{"meta":{"title":"本杰明学习笔记","subtitle":"学习技术，热爱生活","description":"超龄程序员，UNSW计算机专业就读中","author":"Benjamin","url":"http://szdf123.github.io","root":"/"},"pages":[{"title":"404","date":"2021-02-24T10:34:32.000Z","updated":"2021-02-24T10:34:47.194Z","comments":true,"path":"404/index.html","permalink":"http://szdf123.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-02-24T10:30:28.000Z","updated":"2021-02-24T10:30:43.118Z","comments":true,"path":"about/index.html","permalink":"http://szdf123.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2021-02-24T13:38:08.000Z","updated":"2021-02-26T14:15:55.145Z","comments":true,"path":"archives/index.html","permalink":"http://szdf123.github.io/archives/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-02-24T10:30:58.000Z","updated":"2021-02-24T10:31:12.888Z","comments":true,"path":"contact/index.html","permalink":"http://szdf123.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-24T10:28:55.000Z","updated":"2021-02-24T10:29:41.745Z","comments":true,"path":"categories/index.html","permalink":"http://szdf123.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-02-24T10:32:22.000Z","updated":"2021-02-24T10:32:47.488Z","comments":true,"path":"friends/index.html","permalink":"http://szdf123.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-24T10:29:56.000Z","updated":"2021-02-24T10:30:13.312Z","comments":true,"path":"tags/index.html","permalink":"http://szdf123.github.io/tags/index.html","excerpt":"","text":""},{"title":"常用链接","date":"2021-02-24T14:37:58.000Z","updated":"2021-04-10T07:17:58.669Z","comments":true,"path":"usefullinks/index.html","permalink":"http://szdf123.github.io/usefullinks/index.html","excerpt":"","text":"UNSW学校官网学校官网myUNSWeLearningMoodlewebcms3IT专业课程说明我的学校邮箱Outlook校园地图Lab地图ELISE 专业我的课程表全部课程列表COMP课程列表各课程时间表handbook 8543 总体要求handbook 8543 AI方向handbook 8543 大数据方向课程开课时间搜索新课程具体课程要求 课程COMP9020 课程主页及练习COMP9021 discussionCOMP9021 workspaceCOMP9311 课程主页及练习 公共学习慕课网菜鸟教程 学校推荐COMP9021The Missing Semester of Your CS Education 实用网站注册激活zID 外部排序"}],"posts":[{"title":"Maven命令","slug":"技术学习/Java/Maven命令","date":"2021-05-11T09:00:05.000Z","updated":"2021-05-11T12:12:54.588Z","comments":true,"path":"2021/05/11/ji-zhu-xue-xi/java/maven-ming-ling/","link":"","permalink":"http://szdf123.github.io/2021/05/11/ji-zhu-xue-xi/java/maven-ming-ling/","excerpt":"","text":"Maven Lifecycle 命令mvn clean 清除编译产生的target文件夹内容 mvn validate 验证项目是否正确并且所有必要的信息均可用 mvn compile 对src/main/java目录的下的代码进行编译 mvn test 测试命令,或执行src/test/java/下所有junit的测试用例 mvn package 打包项目 mvn verify 对集成测试的结果进行任何检查，以确保符合质量标准 mvn install 打包后将其安装在本地仓库 mvn site 生成站点目录 mvn deploy package,install,deploy三者关联mvn clean package 依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)等７个阶段。mvn clean install 依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install等8个阶段。mvn clean deploy 依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。 Maven常用命令mvn -version 查看maven的版本及配置信息 mvn archetype:create -DgroupId= DartifactId= 构建java项目 mvn archetype:create -DgroupId= DartifactId= -DarchetypeArtifactId=maven-archetype-webapp 创建web项目 mvn compile 编译项目代码 mvn package 打包项目 mvn package -Dmaven.test.skip=true 打包项目时跳过单元测试 mvn test 运行单元测试 mvn clean 清除编译产生的target文件夹内容，可以配合相应命令一起使用，如mvn clean package， mvn clean test mvn install 打包后将其安装在本地仓库 mvn deploy 打包后将其安装到pom文件中配置的远程仓库 mvn eclipse:eclipse 将maven生成eclipse项目结构 mvn eclipse:clean 清除maven项目中eclipse的项目结构 mvn site 生成站点目录 mvn dependency:list 显示所有已经解析的所有依赖 mvn dependency:tree 以树的结构展示项目中的依赖 mvn dependency:analyze 对项目中的依赖进行分析，依赖未使用，使用单未引入 mvn tomcat:run 启动tomcat 参考资料 maven命令https://blog.csdn.net/zflovecf/article/details/80831467 Maven的常用命令 - clean compile test package installhttps://blog.csdn.net/u012887259/article/details/111570702 一篇文章学懂Maven（附带对idea中clean，validate，complie，test，package，verify，install，site，deploy用法）https://blog.csdn.net/qq_40547893/article/details/110091275","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"Maven","slug":"Maven","permalink":"http://szdf123.github.io/tags/Maven/"}],"author":"Benjamin"},{"title":"数据库基础期末要点复习","slug":"UNSW/COMP9311/数据库基础期末要点复习","date":"2021-05-07T13:53:46.000Z","updated":"2021-05-07T15:58:47.103Z","comments":true,"path":"2021/05/07/unsw/comp9311/shu-ju-ku-ji-chu-qi-mo-yao-dian-fu-xi/","link":"","permalink":"http://szdf123.github.io/2021/05/07/unsw/comp9311/shu-ju-ku-ji-chu-qi-mo-yao-dian-fu-xi/","excerpt":"","text":"本文转载自 9311数据库期末要点复习——IF 一、绪论二、关系数据库 关系模式 关系模式：对关系的描述 关系：关系是一张表，一张二维表 关系中有哪些需要描述 关系中的属性 属性来自哪些域 属性与域之间的映射关系 关系的表示 R（U, D, DOM, F） R：关系名 U：所有属性名 D：属性来自哪些域 DOM：属性和域的映射 F：属性间的依赖关系 关系数据库：关系数据库也有关系数据库模式 关系操作 插入、查询、删除、修改 查询：选择、投影、连接、除法（一般出现‘全部’时使用）、并、差、交、笛卡尔积 查询基本操作：选择、投影、并、差、笛卡尔积 关系语言的分类 ！关系代数语言 四种基本运算：并、差、交、笛卡尔积 专门的关系运算：选择、投影、连接、除法 除法：用来表示全体的，比如说他全都包含了，就可以被留下来 悬浮元组：R 和 S 在自然连接中，被舍弃的元组 特殊的连接（不同情况保留悬浮元组的自然连接）：外连接、左外连接、右外连接 关系演算语言 具有关系代数和关系演算的SQL语言（详见第三章） 关系的完整性 实体完整性：主码唯一且非空 参照完整性：外码要么为空，要么就要对应另一个表的主码 用户定义完整性：自己定义的完整性，比如年龄在18-60岁，身高多少之类的 三、SQL SQL特点 SQL包括：数据查询、数据操作、数据定义、数据控制 非过程语言 SQL特点 综合统一：把定义，修改，删除，连接，安全性，完整性，事务控制，动态SQL等统一起来 高度非过程化：层次模型和网络模型是过程化的，关系模型是非过程化的 面向集合的操作方式 以同一种语法结构提供多种使用方式：即可以独立，也可以嵌入到Java或者C++中 语言简洁，易学易用 SQL的基本概念 外模式：视图、部分基本表 模式：若干基本表 内模式：若干存储文件 一个关系对应一张基本表，一个或多个基本表对应一个存储文件 SQL的基本语法 数据定义：包括模式定义、表定义、视图和索引的定义 模式（create schema&lt;模式名&gt; authorization&lt;用户名&gt; / drop schema&lt;模式名&gt;） 表（create/drop table） 视图（create/drop view） 索引（create/drop index） 一个DBMS建立多个数据库，一个数据库建立多个模式，一个模式包含多个表、视图、索引 数据查询 数据查询（select(去重distinct，聚合函数(count、sum、avg、max、min))\\\\from\\\\where\\\\order by (DESC)\\\\group by\\\\having） 全体查询：包括 exists的查询，union、intersect（并、交） 数据更新 数据插入（insert into &lt;表名&gt; [列名] values()） 更新数据（update &lt;表名&gt; set &lt;列名&gt;=&lt;表达式&gt; [where…]） 删除数据（delete from &lt;表名&gt; [where…]） 空值判断（IS NULL / IS NOT NULL） 视图 建立视图（create view &lt;视图名&gt; as &lt;子查询&gt; [with check option] 行列子集视图） 删除视图（drop view &lt;视图名&gt; [CASCADE级联/RESTRICT限制]） 视图的作用 视图能够简化用户操作 视图用多种角度看待同一数据 提供一定程度的数据独立性 提供安全保护 利用视图清晰地表达查询 四、数据库安全性 数据库安全性概述 不安全因素 非授权对数据库的恶意存取和破坏 数据库中重要的数据泄露 安全环境的脆弱性 自主存取控制方法 grant (grant &lt;权限&gt; on table &lt;表名&gt; to &lt;用户&gt;) revoke (revoke &lt;权限&gt; on table &lt;表名&gt; to &lt;用户&gt;) 创建用户（create user with） 数据库安全性控制 用户身份鉴别：静态口令、动态口令、生物特征、智能卡 存取控制 自主存取控制方法 授权：授予grant与回收revoke 数据库角色：角色指的是一类人，比如教师、学生、家长。可以给一类人授权 视图机制：为不同的用户定义不同的视图，把不需要的数据隐藏，这样用户就不会进行误操作 审计：把对数据库的所有操作都记录到审计日志中，然后就可以通过日志审查这个里面是否存在非法行为 数据加密：通过一些加密算法，把明文变成密文 五、数据库完整性 正确性、相容性 正确性：符合现实世界语义 相容性：同一对象在不同表中的数据符合逻辑的 为维护完整性，需要实现如下功能 提供定义完整性约束条件的机制 提供完整性检查的方法 进行违约处理 三大完整性 实体完整性：主码唯一且非空 参照完整性：外码的约束 用户定义完整性：属性上约束条件的定义 非空 NOT NULL 列值为一 UNIQUE 满足某一条件表达式 check 创建的时候用check进行约束 用constraint进行完整性约束 删除完整性 断言 创建断言（create assertion &lt;断言名&gt; ） 只有符合check()里面的表达式才可以执行成功，否则就会执行失败 删除断言（drop assertion &lt;断言名&gt;） 触发器 触发器：用户定义在关系表上的一类有时间驱动的特殊过程。由某个触发事件引发的事务 建立触发器（create trigger &lt;触发器名&gt; {BEFORE|AFTER} &lt;触发事件&gt; on &lt;表名&gt; Referencing new|old roe as &lt;变量&gt; for each {row|statement} [when &lt;触发条件&gt;] &lt;触发动作体&gt;） 触发器不能定义在视图上 触发器类型 行级触发器 for each row 语句触发器 for each statement 删除触发器（create trigger &lt;触发器名&gt; on &lt;表名&gt;） 六、关系数据理论 存在的问题（数据冗余、更新异常、插入异常、删除异常） 补充概念 函数依赖 非平凡函数依赖 -&gt; 部分函数依赖 平凡函数依赖 -&gt; 完全函数依赖 码 候选码：这样一个集合，它可以推出所有的属性，但是他的任意一个真子集无法推出所有属性 只出现在左边的一定是候选码 只出现在右边的一定不是候选码 左右都出现的不一定 左右都不出现的一定是候选码 闭包：x的闭包是指由x能推出来的所有属性 超码：能推出所有属性的属性集，候选码是最小的超码 主码：从候选码中任意挑出一个为主码 主属性：包含在任意一个候选码中的属性 非主属性：不包含在候选码中的属性 码：主码、候选码都简称码 全码：所有属性都是码，称为全码 规范化-几个范式 1NF：表中无表 2NF：在1NF的基础上，不存在非主属性对码的部分函数依赖 3NF：在2NF的基础上，不存在非主属性对码的传递函数依赖（全码一定是3NF，因为全码没有非主属性） BCNF：在3NF的基础上，不存在主属性对码的部分和传递函数依赖 ！数据依赖的公理系统 Armstrong公理系统：自反律、增广律、传递律 合并规则、伪传递规则、分解规则 最小函数依赖集（不唯一） F 中的每一个依赖，都不可以被其他的依赖推出，且右边一定是单元素 步骤 把右边的元素拆分成单个的 对所有的依赖一一排查找出多余的（排查x-&gt;y：去掉x-&gt;y，求x闭包，如果包含y则多余，剔除；反之保留） 左部最小化 ！模式分解 准则：无损连接性、保持函数依赖 无损连接：画ab表。①题中R中已经存在的记a，不存在的记b。②遍历F中的依赖关系，如果两个R对同一个依赖关系的左边都是a，而其中一个R在依赖关系右边也是a，则另一个R在此依赖关系右边的b转换成a。③遍历结束，如果有任意一个R全a，则为无损连接 判断是否保持函数依赖：判断题中几个R在不下推的情况下，包含F的哪些依赖关系，如果F中全部满足则保持依赖，否则不保持 分解成3NF步骤 求出最小函数依赖集 把不在F中的属性全部找出来，单独分一类，并从这些属性删除 把每一个依赖左边的相同的分成一类 如果候选码没有出现在分类中，把任意一个候选码作为一类 七、数据库设计 数据库设计的基本步骤 需求分析 概念结构设计：ER图、数据字典（数据项、数据结构、数据流数据存储、处理过程） 逻辑结构设计：把ER图转换成逻辑模型 物理结构设计：逻辑模型转换为物理模型 数据库实施：写SQL代码 数据库运行和维护：性能检测、转储、恢复 需求分析 ！概念设计（ER图） 矩形表示实体；椭圆表示属性（虚线为派生属性，双线为多值属性）；菱形表示联系 联系：两个实体之间的联系（1：1，1：N，M：N），联系也可以拥有属性 ！逻辑结构设计（ER图转化为表结构） 1：1 转换为主码 1：N 转换为外码（添加到N方） M：N 转换为一张表 一个实体一张表；此外，一个多对多关系一张表两个主属性为主码，多值属性与主属性一张表为主码 部分参与为单实线，全部参与为双实线 物理结构设计 确定物理结构 对物理结构进行评价 实际关系模式的存取方法 数据库的实施和维护 八、数据库编程 嵌入式SQL：SQL语句写到其他编程Java，C++ 处理过程 预编译转化为函数调用 主语言再编译 变成主语言所编译的内容 与主语言之间的通信 SQL给主语言传递状态 主语言给SQL提供参数 SQL把查询结构交给主语言处理，通常用主变量和游标实现 主变量：SQL使用主语言的变量，前面加冒号，如：name 游标：一个缓冲区，存放SQL的执行结果 动态SQL：执行的时候才确定SQL子句，使用动态SQL 过程SQL：基本结构是块 块的基本结构 定义部分（DECLARE//变量、常量、游标、异常） 执行部分（BEGIN//SQL语句、过程化SQL的流程） 控制语句（EXCEPTION//异常处理部分//END） 变量和常量的定义 存储过程 创建存储过程 执行SQL语句 修改存储过程 删除存储过程 函数 创建函数 create or replace function &lt;函数名&gt; (参数…) return &lt;类型&gt; AS &lt;过程化SQL块&gt; 执行函数 CALL\\SELECT 函数(参数…) 修改函数 alter function &lt;函数名1&gt; rename to &lt;函数名2&gt; ODBC编程 九、关系查询和优化 查询处理 查询语句—查询分析—查询检查—查询优化—查询执行 查询优化包括代数优化和物理优化 ！代数优化 规则 连接、笛卡尔积的交换律 连接、笛卡尔积的结合律 投影的串接定律 选择的串接定律 选择和投影操作的交换律 选择和笛卡尔积的交换律 选择与并的分配律 选择与差运算的分配律 选择对自然连接的分配律 投影和笛卡尔积的分配律 投影与并的分配律 查询树的算法 选择运算尽可能先做 投影运算和选择运算同时进行 把投影同其前或后的双目运算结合起来 物理优化 十、数据库恢复技术 事务 四大特性（ACID） A—原子性：要么不做要么全做 C—一致性：一致性与原子性密切相关，要么全做要么不做，否则就会造成数据不一致。如银行汇款，两边都有操作才行 I—隔离性：一个事务的执行不能被其他事务干扰 D—持久性：数据库的改变是永久的 事物的种类 故障的种类 事物内部故障：采取REDO重做和UNDO撤销技术 系统故障：系统突然停转，系统要重启 介质故障：硬件损坏 计算机病毒 恢复技术 数据转储：对失败的事物重新执行 日志文件：记录事物对数据的更新操作的文件 恢复策略 事务故障：事务异常终止，那么就撤销之前的所有操作 系统故障：还没执行完的事务UNDO，丢失的事务REDO 介质故障：重装数据库，重做已完成的事物 有检查点的恢复 十一、并发控制 并发带来的问题和解决 问题 - 丢失修改：修改的数据丢失 - 读脏数据：读取了已撤回的无效数据 - 不可重复读：同一事物中，连续两次读到的数据不一样 - 解决方法 - 排他锁：写锁，X锁 - 共享锁：读锁，S锁 - 封锁协议 - 一级封锁协议（解决丢死修改）：修改时，必须加X锁，直到结束 - 二级封锁协议（解决读脏数据）：读的时候，加S锁，用完就放 - 三级封锁协议（解决不可重复读）：读的时候，加S锁，直到结束 活锁和死锁 活锁：该锁永远等待得不到机会上锁 死锁：多个锁互相等待，互相谦让，没人上锁 可串行性 并发调度中的某一次结果与串行调度一致，称为可串行化，可串行化是事务正确调度的准则 两段锁协议 判断冲突可串行化（优先图存在环，S不是冲突可串行的；反之则是） - 优先图画法：结点：S中的事务。弧：Ti-&gt;Tj （pi，pj涉及同一数据库元素），pi在qj之前且至少一个是写动作 - ![img](https://api2.mubu.com/v3/document_image/ba44f70e-29f5-42ba-ab56-a1c5be9b9733-9610017.jpg) 封锁的粒度：封锁粒度大，并发度小，开销小；封锁粒度小，并发度大，开销大 十二、B树、B+树 B+树记录数量：间隔数^层数*格数 B数、B+树增删操作 数据库必考题视频链接 参考资料 9311数据库期末要点复习——IF","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"UNSW 关于学校","slug":"UNSW/UNSW 关于学校","date":"2021-05-04T12:36:55.000Z","updated":"2021-05-04T13:50:10.890Z","comments":true,"path":"2021/05/04/unsw/unsw-guan-yu-xue-xiao/","link":"","permalink":"http://szdf123.github.io/2021/05/04/unsw/unsw-guan-yu-xue-xiao/","excerpt":"","text":"学校校历开学时间 2021-Summer: 1月4日至2月6日 2021-T1：2月15日-5月13日 2021-T2：5月31日-8月26日 2021-T3：9月13日-12月9日 课程评分标准Grade Definitions","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"更换MacOS的brew源","slug":"最佳实践/更换MacOS的brew源","date":"2021-04-26T07:20:20.000Z","updated":"2021-04-27T02:15:34.479Z","comments":true,"path":"2021/04/26/zui-jia-shi-jian/geng-huan-macos-de-brew-yuan/","link":"","permalink":"http://szdf123.github.io/2021/04/26/zui-jia-shi-jian/geng-huan-macos-de-brew-yuan/","excerpt":"","text":"MacOS操作系统在使用brew命令安装工具时，可能停留在Updating Homebrew…提示行处。其更可能的原因为使用了默认的brew源，下载更新速度过慢导致， brew源有如下三个配置： brew.git homebrew-core.git homebrew-bottles 修改brew.git 仓库地址执行如下命令： # 替换brew.git地址 cd \"$(brew --repo)\" git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git # 阿里源 git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git # 清华源 git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git # 腾讯源 # 还原brew.git地址 cd \"$(brew --repo)\" git remote set-url origin https://github.com/Homebrew/brew.git 修改homebrew-core.git仓库地址执行如下命令： # 替换homebrew-core.git地址 cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git # 阿里源 git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git # 清华源 git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git # 腾讯源 # 还原homebrew-core.git地址 cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" git remote set-url origin https://github.com/Homebrew/homebrew-core.git 修改homebrew-bottles访问地址修改 homebrew-bottles 访问地址与 MacOS 系统使用的 Shell 版本有关。使用如下命令查看当前 Shell 版本 echo $SHELL 若当前使用的 Shell 版本为/bin/zsh，则替换方法为：# 替换 homebrew-bottles 地址 echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.zshrc source ~/.zshrc # 还原 homebrew-bottles 地址 vim ~/.zshrc # 编辑.zshrc文件 source ~/.zshrc # 删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 若当前使用的 Shell 版本为/bin/bash，则替换方法为： # 替换 homebrew-bottles 地址 echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.bash_profile source ~/.bash_profile # 还原 homebrew-bottles 地址 vim ~/.bash_profile # 编辑.zshrc文件 source ~/.bash_profile # 删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置 全部操作完成后，刷新brew源执行如下命令：# 更新brew brew update # 根据提示，可能需要执行 git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow 参考资料 Mac下如何更改brew地址源https://www.cnblogs.com/feiquan/p/13267284.html mac brew更换国内源https://www.jianshu.com/p/bea984d27cd2","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"Linux","slug":"Linux","permalink":"http://szdf123.github.io/tags/Linux/"},{"name":"MacOS","slug":"MacOS","permalink":"http://szdf123.github.io/tags/MacOS/"}],"author":"Benjamin"},{"title":"理财训练营（2）","slug":"课程笔记/理财训练营（2）","date":"2021-04-21T16:04:42.000Z","updated":"2021-04-21T16:50:50.435Z","comments":true,"path":"2021/04/22/ke-cheng-bi-ji/li-cai-xun-lian-ying-2/","link":"","permalink":"http://szdf123.github.io/2021/04/22/ke-cheng-bi-ji/li-cai-xun-lian-ying-2/","excerpt":"","text":"本学习笔记根据某投学堂提供资料整理学习 初识投资品：人人都该有的4个钱包投资不可能三角投资品三个特征：安全性、流动性、收益性 投资不可能三角：没有一款投资品，可以兼顾高收益、高流动性和高安全性 投资品的四种分类四大类：货币类、债权类、股权类、商品实物类 它们按特征分，处于不可能三角的不同位置 投资品的主要差异： 学会资产配置 四个钱包：要花的钱，保命的钱，生钱的钱和保本的钱 要花的钱：3-6个月生活费 保命的钱：年收入的10%，意外险，重疾险等 生钱的钱：股票、基金，即有较高风险，较高收益 保本的钱：稳中有升，如国债，债券基金 投资100法则： 生钱的钱=投资本金*（100-现在的年龄）% 保本的钱=投资本金*现在的年龄% 可转债打新实操入门适合新手，下有保底，上不封顶的投资品：可转债 可转债，即可转换公司债券 可转债的性质： 债券必须还本付息 发行可转债的公司，违约意愿小 一定条件下，可转债能转换为公司股票 可转债的投资方法有两种：构建投资组合；可转债打新 构建投资组合：购买组合可转债，降低一只可转债的波动风险 可转债打新：申购即将上市的可转债 选股方法要投资，不要投机！ 股市里，永远不要高估自己的理性，更不要挑战自己的运气。 正确的做法：深入研究背后的公司，找到好公司，让好公司替我们赚钱。 投资股票，就是投资公司。 股票赚钱的方式： 分红，如格力电器、双汇发展 赚股价上涨的差价 判断股票是否便宜的方法 看市盈率（PE）和市净率（PB） 市盈率PE=买下公司需要的钱/每年能转到的钱 PE越小，越有投资价值 市净率PB=买下公司需要的钱/公司自己拥有的资产 PB越小，越具有投资价值 查询PE和PB的网站：理杏仁","categories":[{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"理财","slug":"理财","permalink":"http://szdf123.github.io/tags/%E7%90%86%E8%B4%A2/"}],"author":"Benjamin"},{"title":"bistoury综合资料","slug":"技术学习/bistoury/bistoury综合资料","date":"2021-04-21T08:59:58.000Z","updated":"2021-04-22T11:06:55.249Z","comments":true,"path":"2021/04/21/ji-zhu-xue-xi/bistoury/bistoury-zong-he-zi-liao/","link":"","permalink":"http://szdf123.github.io/2021/04/21/ji-zhu-xue-xi/bistoury/bistoury-zong-he-zi-liao/","excerpt":"","text":"bistoury官网 Bistoury原理解析 Bistoury-releases bistoury-2.0.7-quick-start.tar.gz","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"}],"author":"Benjamin"},{"title":"bistoury使用及配置","slug":"技术学习/bistoury/bistoury使用及配置","date":"2021-04-20T08:58:45.000Z","updated":"2021-04-21T08:18:58.070Z","comments":true,"path":"2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-shi-yong-ji-pei-zhi/","link":"","permalink":"http://szdf123.github.io/2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-shi-yong-ji-pei-zhi/","excerpt":"","text":"应用注册 一台主机（ip）只可绑定到一个应用 发布信息配置在日志目录下创建../webapps/releaseInfo.properties文件 #gitlab项目名 project=tc/bistoury #项目所属module，没有module时值为英文句号[.] module=bistoury-ui #应用运行的版本号/分支/tag output=master JVM参数配置Agent启动前需要在bin/bistoury-agent-env.sh的JAVA_OPTS设置以下参数 参数名称 是否必须 默认值 说明 bistoury.store.path 否 /home/bistoury/store bistoury agent数据存放路径，包括rocksdb存放的监控、jstack及jmap数据和反编译代码临时文件的存放 bistoury.proxy.host 是 proxy的域名，具体值请联系管理员，agent依赖该值获取proxy的连接配置信息 bistoury.app.lib.class 是 应用依赖的jar包中的一个类（推荐使用公司内部中间件的jar包或Spring相关包中的类，如org.springframework.web.servlet.DispatcherServlet），agent通过该类获取加载应用类的classloader bistoury.pid.handler.jps.symbol.class 否 org.apache.catalina.startup.Bootstrap attach的应用入口类，用于使用jps -l命令获取应用pid bistoury.pid.handler.jps.enable 否 true 是否打开通过jps -l获取pid的开关 bistoury.pid.handler.ps.enable 否 true 是否打开通过ps aux bistoury.app.classes.path 否 bistoury.app.lib.class对应jar包目录同级的classes目录 项目代码编译后字节码存放目录，一般情况下为classes目录 bistoury.agent.workgroup.num 否 2 agent netty work group 线程数 bistoury.agent.thread.num 否 16 agent执行命令的线程数 启动bistoury agent启动是可以通过-p指定pid确定agent attach特定的java进程，不指定时会通过jps -l和ps aux|grep java 命令及proxy中配置的参数解析pid，优先级依次降低。 使用 ./bistoury-agent.sh -h 查看脚本参数信息 启动 ./bistoury-agent.sh -p 100 start ./bistoury-agent.sh start 停止 ./bistoury-agent.sh stop 重启 ./bistoury-agent.sh -p 101 restart ./bistoury-agent.sh restart 条件表达式 使用Spring EL表达式，基于 spring-expression 3.2.8.RELEASE 局部变量localVariables[a] 类属性fields[a] 静态变量staticFields[A] 支持逻辑连接符：&amp;&amp;、 ||、 ==，符号两侧不可有空格 表达式最终结果是个布尔值 支持的方法白名单:equals, length, valueOf, toString, hashCode, compareTo, size, count Spring EL表达式官网使用规则 Spring EL 表达式样例 localVariables[content].value.equals(\"aaa\") 获取源码的方式三种： 反编译字节码 项目代码从git获取源码 jar包里的类从maven获取源码 反编译字节码无需配置；git和maven需要做一些配置。 git目前仅支持gitlab api3 和 github。 配置发布信息配置发布信息位置：bistoury-proxy-bin/conf/releaseInfo_config.properties 默认值：/tmp/bistoury/releaseInfo.properties 默认提供properties文件解析。若需要自定义文件解析方法，可实现qunar.tc.bistoury.ui.util.ReleaseInfoParse接口，并在qunar.tc.bistoury.ui.service.impl.ReleaseInfoServiceImpl中修改实现类 #gitlab项目名，项目名组成：owner/repo project=tc/bistoury #项目所属module，没有module时值为英文句号[.] module=bistoury-ui #应用运行的版本hash/分支/tag output=master 配置Git配置文件在bistoury-ui-bin/conf/config.properties 配置仓库类型：git.repository，值为github或gitlabv3 配置仓库地址：git.endpoint，giblab填写首页地址；github填写api地址（https://api.github.com） 配置private token：bistoury-ui-bin/conf/url_redirect.properties gitlab.private.token.url * gitlab获取位置一般在gitlab&gt;Profile Settings&gt;Account * github获取位置一般在github&gt;settings&gt;Developer settings&gt;Personal access tokens，链接一般为：[https://github.com/settings/tokens](https://github.com/settings/tokens) 配置private token：在线debug和动态监控页面按钮上方都有一个配置private token的链接，点击配置private token。 配置目录格式：bistoury-ui-bin/conf/config.properties file.path.format maven配置maven配置之后可以从maven私服下载源码，所以需要在bistoury-ui-bin/conf/config.properties文件中配置maven.nexus.url为jar source的下载链接 获取的key为ETag 值的格式：{SHA1{d32c943ba20a1351181e11adb71f7e3e28bdfe3c}}，其中SHA1是hash算法，d32c943ba20a1351181e11adb71f7e3e28bdfe3c是hash值 hash算法支持MD5、SHA1和SHA256 应用PID的获取方式按以下顺序获取： 系统参数指定 jps -l获取 ps aux|grep java 获取 使用系统参数指定，则应用重启后也需要重启agent 使用jps -l或ps aux|grep java获取，重启不需要重启agent 参考资料 Bistoury官网网站及文档： https://github.com/qunarcorp/bistoury 详细部署方法推荐部署方法 ui 独立部署，推荐部署在多台机器，并提供独立的域名 proxy 独立部署，推荐部署在多台机器，并提供独立的域名 agent 需要和应用部署在同一台机器上。推荐在测试环境全环境自动部署，线上环境提供单机一键部署，以及应用下所有机器一键部署 独立的应用中心，管理所有功能内部应用和机器信息，这是一个和 Bistoury 相独立的系统，Bistoury 从中拿到不断更新的应用和机器信息 环境支持OS: Linux Java: ui、proxy使用Java1.8+，agent使用java1.7+ 注册中心：zookeeper 部署步骤 1、初始化数据库：Bistoury的ui和proxy依赖数据库，所以需要事先创建并完成初始化 2、获取安装包：Bistoury的安装包共三个，bistoury-ui、bistoury-proxy和bistoury-agent，通过源码构建安装包 3、部署：获取安装包后修改对应的配置文件后就可以通过脚本进行部署到测试和生产环境了 初始化数据库sql文件在bistoury-ui安装包的sql目录下 ui和proxy需配置相同的数据库 配置文件在conf/jdbc.properties文件中 获取安装包安装包一共有两种，local和prod，local本地快速启动用，使用h2数据库；prod使用MySQL数据库 修改好各个配置文件后，执行脚本 ./build.sh 生成的文件在 bistoury-dist/target/bistoury-agent-bin.tar.gz bistoury-ui/target/bistoury-ui-bin.tar.gz bistoury-proxy/target/bistoury-proxy-bin.tar.gz","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"}],"author":"Benjamin"},{"title":"Bistoury搭建及使用问题解决记录","slug":"技术学习/bistoury/Bistoury搭建及使用问题解决记录","date":"2021-04-20T08:10:05.000Z","updated":"2021-04-20T08:29:04.607Z","comments":true,"path":"2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-da-jian-ji-shi-yong-wen-ti-jie-jue-ji-lu/","link":"","permalink":"http://szdf123.github.io/2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-da-jian-ji-shi-yong-wen-ti-jie-jue-ji-lu/","excerpt":"","text":"解决agent无法启动问题问题描述打开UI后，页面提示agent没有启动 排查过程查看agent日志，提示某个GC命令不存在，推测为java版本问题。由于之前在官网下载的Java最新版本，使之不兼容一些原有命令。 解决办法删除系统中的java，并重新根据要求，安装Jdk1.8，重新启动bistoury，问题解决。 参考资料Bistoury官网及使用文档：https://github.com/qunarcorp/bistoury 排查arthas未正常启动问题问题描述UI启动后，在主机信息-文件信息下报错： Agent error: java.lang.IllegalStateException—-can not init bistoury, start arthas error, pid [30043],Agent JAR loaded but agent failed to initialize 排查过程官方文档中有提及：agent attach时加载初始化类失败，即arthas未成功加载。 其日志目录为：/root/logs/arthas/arthas.log 日志中关键错误信息： java.lang.IllegalStateException: can not find lib class, [org.springframework.web.servlet.DispatcherServlet] 官方参考启动命令： ./quick_ start.sh -c org.springframework.web.servlet.DispatcherServlet -p 1024 start 询问曹奇org.springframework.web.servlet.DispatcherServlet 的引用方式，发现实际上helloworld-jenkins-pipeline.war包并没有正确放置正确，放在tomcat里的是个zip包！ 解决办法根据参考资料，尝试使用以下命令重新启动 ./quick_start.sh -c org.springframework.web.servlet.DispatcherServlet -p 30043 -i 172.20.59.153 start 问题仍未解决 配置idea，重新构建出helloworld-jenkins-pipeline.war包，并重新启动bistoury，该问题解决 参考文档官方FAQ：https://github.com/lqnasa/bistoury/blob/master/docs/cn/FAQ.md Spring 官网下载地址：https://repo.spring.io/webapp/#/artifacts/browse/tree/General/libs-release-local/org/springframework/spring/5.2.9.RELEASE 官网下载Spring的jar包教程：https://blog.csdn.net/qq_35661171/article/details/86165467 问题描述排查过程解决办法参考资料","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"}],"author":"Benjamin"},{"title":"bistoury功能详解","slug":"技术学习/bistoury/bistoury功能详解","date":"2021-04-20T08:10:05.000Z","updated":"2021-04-21T07:38:36.643Z","comments":true,"path":"2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-gong-neng-xiang-jie/","link":"","permalink":"http://szdf123.github.io/2021/04/20/ji-zhu-xue-xi/bistoury/bistoury-gong-neng-xiang-jie/","excerpt":"","text":"Bistoury介绍开发者：去哪儿网 功能：从日志、内存、线程、类信息、调试、机器和系统属性等各个方面对应用进行诊断 目的：提升开发人员诊断问题的效率和能力 集成：Alibaba开源的arthas和唯品会开源的vjtools Arthhas官方中文说明 Arthas和vjtools通过命令行或类似的方式使用 Arthas和vjtools针对单台机器，从机器的维度对系统进行诊断 Bistoury特点及优势 Bistoury图形化界面 提供全局的视角（多台机器） 提供统一的web入口 在线debug功能：通过web界面提供断点调试的功能，可以在不阻塞应用的情况下捕获断点处的信息 线程级cpu使用率监控：监控系统每个线程的分钟级cpu使用率 动态对方法添加监控：监控方法的调用次数、异常次数和执行时间 日志查看功能：可对单台或同时对多台机器的日志进行查看 Bistoury 能做什么？ 查看应用日志 查看主机运行状态 在线debug 动态监控 线程级cpu使用率监控 JVM运行状态监控 thread dump jstack jmap JVM数据紧急收集，一键收集jstack、jmap以及GC日志等相关信息 能查看这个类从哪个 jar 包加载的，为什么会报各种类相关的 Exception。 从全局视角来查看系统的运行状况。 觉得代码和想的不一样？反编译class试试 Bistoury技术架构组件Bistoury必要模块：agent，proxy，ui 其他模块：用户系统，注册中心，负载均衡器，应用中心 用户系统：待诊断的正在运行的应用 agent: 接收、执行、返回从proxy传递过来的命令，目前一个agent对应一个用户系统；一个agent注册到一个proxy上 proxy: 接收ui传来的命令，并传递给agent ui: 图形化界面，接收操作者指令，下发指令给proxy，为用户展示结果 负载均衡器：为proxy做负载均衡 注册中心：注册所有proxy的地址；注册中心目前仅支持zookeeper 应用中心：获取用户的应用信息和机器信息，bistoury只自带一个微信用户中心，需要用户接入自己的应用中心（通过实现bistoury-application模块的相关api接入） 各逻辑链条agent连接proxy agent通过域名访问proxy 访问请求打到proxy2这台机器上 proxy2返回自身ip和注册信息 agent接收到注册信息 agent注册到proxy2上，建立连接 ui根据命令选择proxy proxy集群机器全部注册到注册中心上 ui从注册中心获取到全部的proxy地址信息 ui从应用中心拿到要执行命令的机器信息 ui请求proxy1，判断要执行命令的机器是否与proxy1连接 ui请求proxy2，判断要执行命令的机器是否与proxy2连接 proxy1返回结果为否 proxy2返回连接存在 命令执行与结果返回 ui将命令信息发给proxy2 proxy2将命令发给agent agent将命令发给用户系统（如果需要访问用户系统的话） 用户系统将结果返回给agent（如果需要访问用户系统的话） agent将结果返回给proxy2 proxy2将结果返回给ui 功能详细说明在线debug优势 模拟IDE的调试体验 可以直接在代码上添加断点 支持条件断点 可查看本地变量、成员变量、静态变量以及调用栈 在线debug不需要应用重启 系统不挂起，只打印快照信息 待改进 只会触发一次 目前原代码只支持gitlab，若不设置token，只通过反编译获取原代码 技术特点 条件表达式使用Spring EL表达式 线程级CPU监控 保存最近3天的线程级别监控数据 动态监控性能分析性能分析结果默认只保存三天 Java支持的三种方式：插桩统计，同步抽样，异步抽样 Bistoury采用异步抽样","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"}],"author":"Benjamin"},{"title":"CentOS搭建Nginx","slug":"最佳实践/CentOS搭建Nginx","date":"2021-04-20T06:48:50.000Z","updated":"2021-04-22T06:03:46.307Z","comments":true,"path":"2021/04/20/zui-jia-shi-jian/centos-da-jian-nginx/","link":"","permalink":"http://szdf123.github.io/2021/04/20/zui-jia-shi-jian/centos-da-jian-nginx/","excerpt":"","text":"使用Yum安装方法 添加yum源 rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 或在/etc/yum.repo.d/目录下，新建新Yum源[nginx-stable] name=nginx stable repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://nginx.org/keys/nginx_signing.key [nginx-mainline] name=nginx mainline repo baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/ gpgcheck=1 enabled=0 gpgkey=https://nginx.org/keys/nginx_signing.key 安装Nginx yum search nginx # 查看yum源是否包含nginx yum install -y nginx # 安装Nginx 启动Nginx并设置开机自动运行 # 启动Nginx systemctl start nginx # 系统开机自动启动Nginx systemctl enable nginx # 查看Nginx状态 systemctl status nginx 访问Nginx Nginx默认占用端口为80 默认配置文件在 /etc/nginx/nginx.conf 项目部署目录为 /usr/share/nginx/html/ lsof -i:80 # 查看80端口占用情况 配置nginx下载目录 # 在nginx配置文件中增加下载目录 # 此配置的文件下载目录为/data/download location ~ ^/download { root /data/; autoindex on; # 开启目录文件列表 autoindex_exact_size on; # 显示出文件的确切大小，单位是bytes autoindex_localtime on; # 显示的文件时间为文件的服务器时间 charset utf-8,gbk; # 避免中文乱码 } 使用安装包安装Nginx方法 下载Nginx安装包，并解压 wget http://nginx.org/download/nginx-1.9.9.tar.gz tar -zxvf nginx-1.9.9.tar.gz 进入Nginx目录，安装编译Nginx # 可将Nginx安装至 /usr/local/nginx ./configure make make install 查看修改Nginx配置文件nginx.conf 启动Nginx服务 /usr/local/nginx/sbin ./nginx # 启动命令 ps -ef | grep nginx # 查看nginx服务是否启动成功 nginx配置文件说明 #user nobody; worker_processes 1; #工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。 #错误日志存放路径 #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; # nginx进程pid存放路径 events { worker_connections 1024; # 工作进程的最大连接数量 } http { include mime.types; #指定mime类型，由mime.type来定义 default_type application/octet-stream; # 日志格式设置 #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; #用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径 sendfile on; #指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。 #tcp_nopush on; #此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用 #keepalive_timeout 0; #keepalive超时时间 keepalive_timeout 65; #gzip on; #开启gzip压缩服务 #虚拟主机 server { listen 80; #配置监听端口号 server_name localhost; #配置访问域名，域名可以有多个，用空格隔开 #charset koi8-r; #字符集设置 #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } #错误跳转页 #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ { #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。 # root html; #根目录 # fastcgi_pass 127.0.0.1:9000; #请求转向定义的服务器列表 # fastcgi_index index.php; # 如果请求的Fastcgi_index URI是以 / 结束的, 该指令设置的文件会被附加到URI的后面并保存在变量$fastcig_script_name中 # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht { # deny all; #} } # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; #监听端口 # server_name localhost; #域名 # ssl_certificate cert.pem; #证书位置 # ssl_certificate_key cert.key; #私钥位置 # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; #密码加密方式 # ssl_prefer_server_ciphers on; # ssl_prefer_server_ciphers on; # # location / { # root html; # index index.html index.htm; # } #} } 参考资料 centOS7安装nginx及nginx配置https://blog.csdn.net/qq_37345604/article/details/90034424 CentOS7中使用yum安装Nginx的方法https://www.cnblogs.com/songxingzhu/p/8568432.html CentOS7.X中使用yum安装nginx的方法https://www.cnblogs.com/opsprobe/p/10773582.html nginx配置下载目录https://cloud.tencent.com/developer/article/1366668","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://szdf123.github.io/tags/CentOS/"},{"name":"Nginx","slug":"Nginx","permalink":"http://szdf123.github.io/tags/Nginx/"}],"author":"Benjamin"},{"title":"CentOS搭建Zookeeper","slug":"最佳实践/CentOS搭建Zookeeper","date":"2021-04-20T06:48:50.000Z","updated":"2021-04-27T02:15:43.662Z","comments":true,"path":"2021/04/20/zui-jia-shi-jian/centos-da-jian-zookeeper/","link":"","permalink":"http://szdf123.github.io/2021/04/20/zui-jia-shi-jian/centos-da-jian-zookeeper/","excerpt":"","text":"使用Yum安装方法 从Zookeeper官网，下载安装包3.4.14 版本的 ZooKeeper 上传安装包至服务器，或在服务器中直接下载安装包，并解压 wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz tar -xvf zookeeper-3.4.14.tar.gz 创建 ZooKeeper 数据文件存放目录、以及日志存放目录 mkdir -p /root/zookeeper/tmp mkdir -p /root/zookeeper/log 在conf目录中，复制并编辑Zookeeper的配置文件 cd conf cp zoo_sample.cfg zoo.cfg vim zoo.cfg dataDir=/root/zookeeper/tmp dataLogDir=/root/zookeeper/log 进入bin目录，启动并查看Zookeeper的状态 cd bin ./zkServer.sh start ./zkServer.sh status 参考资料 CentOS下ZooKeeper的安装教程（单机模式）https://www.hangge.com/blog/cache/detail_2790.html CentOS 7下安装 Zookeeper单机版https://www.linuxidc.com/Linux/2017-01/139731.htm","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://szdf123.github.io/tags/CentOS/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"http://szdf123.github.io/tags/Zookeeper/"}],"author":"Benjamin"},{"title":"MySQL查询视图、函数及存储过程","slug":"最佳实践/MySQL查询存储过程","date":"2021-04-20T06:48:50.000Z","updated":"2021-04-27T08:59:49.245Z","comments":true,"path":"2021/04/20/zui-jia-shi-jian/mysql-cha-xun-cun-chu-guo-cheng/","link":"","permalink":"http://szdf123.github.io/2021/04/20/zui-jia-shi-jian/mysql-cha-xun-cun-chu-guo-cheng/","excerpt":"","text":"查询MySQL视图查看视图SELECT * from information_schema.VIEWS //视图 SELECT * from information_schema.TABLES //表 查询MySQL函数及存储过程方法一select `name` from mysql.proc where db = 'your_db_name' and `type` = 'PROCEDURE' //存储过程 select `name` from mysql.proc where db = 'your_db_name' and `type` = 'FUNCTION' //函数 方法二show procedure status; //存储过程 show function status; //函数 show function status where db='giangao' ; ---数据库名 查看存储过程或函数的创建代码show create procedure proc_name; show create function func_name; 查看触发器方法一:语法：SHOW TRIGGERS [FROM db_name] [LIKE expr] 实例：SHOW TRIGGERS\\G //触发器 方法二:对INFORMATION_SCHEMA数据库中的TRIGGERS表查询 mysql&gt;SELECT * FROM triggers T WHERE trigger_name=”mytrigger” \\G 参考文档 MySQL查看存储过程和函数、视图和触发器https://blog.csdn.net/dbagaoshou/article/details/81940859","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://szdf123.github.io/tags/MySQL/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（9）","slug":"UNSW/COMP9020/离散数学课程笔记（9）","date":"2021-04-18T13:11:53.000Z","updated":"2021-05-05T10:18:09.636Z","comments":true,"path":"2021/04/18/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-9/","link":"","permalink":"http://szdf123.github.io/2021/04/18/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-9/","excerpt":"","text":"条件概率与期望 Conditional Probability and Expectation条件概率 Conditional Probability定义已知S下，E的概率为 P(E|S)=\\frac{P(E\\cap S)}{P(S)},\\quad E,S\\subseteq\\Omega仅当$P(S)\\neq0$ 注意，$P(A|B)$和$P(B|A)$一般情况下不相关，即其中一个值本身无法预测另一个值。唯一的特例是，若$P(A),P(B)\\neq 0$，当且仅当$P(A\\cap B)=0$时，$P(A|B)=0$，$P(B|A)=0$ 如果$P$在有限集$ω$上的均匀分布，那么 P(E|S)=\\frac{\\frac{|E\\cap S|}{|\\Omega|}}{\\frac{|S|}{|\\Omega|}}=\\frac{|E\\cap S|}{|S|}一些一般规则事实上， \\begin{align} A ⊆ B & ⇒ P(A|B) ≥ P(A) \\\\ A ⊆ B & ⇒ P(B|A) = 1 \\\\ P(A ∩ B|B) & = P(A|B) \\\\ P(∅|A) & = 0 \\ 对于\\ A \\neq ∅ \\\\ P(A|Ω) & = P(A) \\\\ P(A^c|B) & = 1 - P(A|B) \\\\ P(A^c\\cap B) & = P(B) - P(A\\cap B) \\\\ P(A) & = P(A|B) P(B)+ P(A|B^c)P(B^c) \\end{align}注意： $P(A|B)$与$P(A|B^C)$不相关 $P(A|B),P(B|A),P(A^C|B^C),P(B^C|A^C)$不相关 贝叶斯公式 Bayes’ Formula：$P(S|B)\\cdot P(B)=P(B|S)\\cdot P(S)$ 推论：如果$P(A|B)&gt; P(A)$（正相关），那么$P(B|A)&gt; P(B)$ 随机独立 Stochastic Independence定义：如果$P(A\\cap B)=P(A)\\cdot P(B)$，那么称A和B随机独立，记作$A\\perp B$ 如果$P(A)\\neq 0$，且$P(B)\\neq 0$，那么以下所有等价： P(A ∩ B) = P(A)\\cdot P(B) \\\\ P(A|B) = P(A) \\\\ P(B|A) = P(B) \\\\ P(A\\cup B)=P(A)+P(B)-P(A)\\cdot P(B) \\\\ P(A^C|B) = P(A^C) 或 P(A|B^C) = P(A) 或 P(A^C|B^C) = P(A^C)最后一条也意味着： $A\\perp B \\Leftrightarrow A^C\\perp B \\Leftrightarrow A\\perp B^C \\Leftrightarrow A^C\\perp B^C$ 基本非独立事件集（如果$P(A)， P(B) &gt; 0$） $A\\subseteq B$ $A\\cap B=\\emptyset$ 任意单值事件$\\{x\\},\\{y\\}$:要么$x=y$且$P(x|y)=1$，或者$x\\neq y$且$P(x|y)=0$ 对于独立的$A_1,\\dots,A_n$，对所有的可能集$A_{i_{1}},A_{i_{2}},\\dots,A_{i_{k}}$ $P(A_{i_{1}} \\cap A_{i_{2}} \\cap \\dots \\cap A_{i_{k}})=P(A_{i_{1}})\\cdot P(A_{i_{2}}) \\cdots P(A_{i_{k}})$ 这通常被称为完全独立 full independence 两两独立是一个较弱的概念。 我们也可以构造一个$n$个事件的集合，其中任意$k$个事件是独立的，而任意$k + 1$个事件是相互依赖的 总体可能性：$P(A)=P(A|B)\\cdot P(B) + P(A|B^C)\\cdot P(B^C)$ 随机变量 Random Variables定义：（整数）随机变量是从$\\Omega$到$Z$的函数。换句话说，它将一个数值与每个结果相关联。 随机变量通常用$X, Y, Z，…$表示。 期望 Expectation定义：随机变量X的期望值(通常称为“期望”或“平均值”)为 E(X)=\\sum_{k \\in \\mathbb{Z}}{P(X=k) \\cdot k}注：期望是一个真正普遍的概念；它是一切决策的基础，是估计收益和损失的基础，是一切冒险行为的基础。从历史上看，期望值的基本概念比概率的概念早得多。 定理（期望值线性） E(X + Y ) = E(X) + E(Y ) \\\\ E(c · X) = c · E(X)二项身份 binomial identity:$\\sum\\limits_{k=0}^{n}{(\\begin{array}{1}n \\\\ k\\end{array})}=2^n$ 注意：如果$X_1 X_2…， X_n$是独立的恒等分布随机变量，则$E(X_1 + X_2 +…+ X_n)$和$E(nX_1)$是一样的，但它们是非常不同的随机变量。 几何级数 geometric progressions 定理：看到概率为p的事件的平均试验次数是$A = \\frac{1}{p}$。 标准差和方差 Standard Deviation and Variance定义：对于具有期望值（或:均值）的随机变量$X\\ µ= E(X)$，$X$的标准差 standard deviation 为 \\sigma=\\sqrt{E((X-\\mu )^2)}X的方差 variance为：$\\sigma^2$ 标准差和方差测量随机变量值的分布情况。对于随机选择的$ω$， $σ^2$越小，我们就越确信$X(ω)$接$近E(X)$。 注意：方差可以计算为$E((X-µ)^2 ) = E(X^2)- µ^2$ 累积分布函数 Cumulative Distribution Functions定义：定义整数随机变量$X$的累积分布函数$CDF_X: \\mathbb{Z}→\\mathbb{R}$为 CDF_X(y)\\mapsto \\sum_{k\\leq y} {P(X=k)}$CDF_X (y)$累积在$y$之前所有值的概率$P(X)$ 例如：二项分布 Binomial Distributions定义：二项随机变量计算n个独立实验中成功的次数，每个实验的概率为p。 P(X=k)=(\\begin{matrix} n \\\\ k\\end{matrix})p^k(1-p)^{n-k} \\\\ CDF_B(y)\\mapsto \\sum_{k\\leq y}(\\begin{matrix} n \\\\ k\\end{matrix})p^k(1-p)^{n-k}定理：如果$X$是一个基于$n$次和概率$p$的二项分布随机变量，那么$E(X) = n·p$，$ σ^2 = n·p·(1 - p)$ 正态分布 Normal Distribution如果n非常大，二项分布可以近似为正态分布normal distributions（又称高斯分布 Gaussian distributions），其均值$µ= n·p$，方差$σ^2 = n·p·(1 - p)$。 总结 条件概率$P(A |b)$，独立性$A⊥B$ 贝叶斯公式，总概率 随机变量$X$ 期望值$E (X)$ 均值$µ$，$CDF$，标准差$σ$，方差$σ^2$ 参考资料 Textbook (R &amp; W) - Ch. 9, Sec. 9.1-9.4","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（8）","slug":"UNSW/COMP9020/离散数学课程笔记（8）","date":"2021-04-18T13:10:29.000Z","updated":"2021-05-04T09:23:36.805Z","comments":true,"path":"2021/04/18/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-8/","link":"","permalink":"http://szdf123.github.io/2021/04/18/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-8/","excerpt":"","text":"统计与概率 Counting and Probability计算技术总体思路：从一些基本集合，以一种结构化的方式寻找方法、算法或精确公式来计算不同集合或派生集合中的元素数量。 基本统计规则结合律 Union rule：对不相交的$S$和$T$，有 |S\\cup T| = |S| + |T|若$S_1,S_2,\\dots S_n$两两不相交，则 |S_1 \\cup \\dots \\cup S_n| = \\sum|S_i|乘积率 Product rule： |S_1 \\times \\dots \\times S_k| = |S_1| \\cdot |S_2| \\cdots |S_k| = \\prod _{i=1}^{k}|S_i|如果所有的$S_i=S$，且$|S|=m$，那么$|S^k|=m^k$ 对于有限函数$S\\rightarrow T$，可能的组合数为$|T|^{|S|}$ 对于有n个点的完全图: 长度为3的路径数量为 $n\\cdot (n-1)^3$ 长度为3，各点不同的路径数量为 $n(n-1)(n-2)(n-3)$ 长度为3，各边不同的路径数量为 $n(n-1)(n-2)^2$ 容斥定理 Inclusion-Exclusion两个集合： |A\\cup B| = |A| + |B| - |A\\cap B|三个集合： |A \\cup B \\cup C | = |A| + |B| + |C| - |A \\cap B| - |A\\cap C| - |B \\cap C| + |A \\cap B \\cap C |注： 容斥定理通常是非正式的应用，没有明确或明确地说明为什么要减去或放回某些数量。 推论：如果 $|S\\cup T|=|S| + |T|$，那么 $S$ 和 $T$ 不相交如果 $|\\cup_{i=1}^{n}S_i|=\\sum_{i=1}^n|S_i|$，那么 $S_i$ 互不相交如果 $|T\\setminus S|=|T|-|S|$，那么 $S\\subseteq T$ 排列 Permutationsn个元素的全排列数为： n! = n \\cdot (n-1)\\cdots 1, 0!=1!=!r-排列 r-permutationsn个元素中r个元素的排列数为： \\Pi(n,r)=n\\cdot (n-1)\\cdots (n-r+1)=\\frac{n!}{(n-r)!}r-组合 r-combinations \\left( \\begin{array}{} n \\\\ r \\end{array} \\right) = \\frac{n!}{(n-r)!r!}=\\frac{n\\cdot (n-1)\\cdots (n-r+1)}{1\\cdot 2 \\cdots r}注： 这些数字通常被称为二项式系数，因为： (a+b)^n = a^n + \\left(\\begin{array}{} n \\\\ 1 \\end{array}\\right) a^{n-1}b + \\left( \\begin{array}{} n \\\\ 2 \\end{array} \\right) a ^{n-2}b^2 + \\dots + b^n = \\sum_{i=0}^{n}\\left( \\begin{array}{} n \\\\ i \\end{array} \\right)a^{n-i}b^i在实数领域$\\alpha \\in \\mathbb{R}$，有 \\left( \\begin{array}{} \\alpha \\\\ r \\end{array} \\right) = \\frac{\\alpha\\cdot (\\alpha-1)\\cdots (\\alpha-r+1)}{ r!}计数扑克牌型 Poker Hands52张扑克牌可为：$\\{A, 2-10, J, Q, K\\} \\times \\{\\textcolor{black}{\\spadesuit} \\text{spade},\\textcolor{red}{\\heartsuit} \\text{heart}, \\textcolor{black}{\\clubsuit} \\text{club},\\textcolor{red}{\\diamondsuit} \\text{diamond} \\} $ “4 of a kind” 4张相同“flushes” 同花“straight” 顺 基本概率 Elementary Probability样本空间： \\Omega = \\{ \\omega_1, \\dots, \\omega_n \\}当每一种可能性概率相同时，即$P(\\omega_i)=\\frac{1}{n}$ 这被称为$Ω$上的均匀概率分布 uniform probability distribution 对于非均匀概率 Non-uniform Probability令$P(\\omega_1)=p_1, P(\\omega_2)=p_2, \\dots, P(\\omega_n)=p_n$那么， \\sum_{i=1}^{n}p_i=1事件 Events事件 Event -结果集合= $Ω$的子集 P(E)=\\sum_{\\omega \\in E}P(\\omega)一般有$P(\\emptyset)=0, P(\\Omega)=1, P(E^C)=1-P(E)$ 递归在概率计算中的应用给定n次抛硬币，连续两次正面朝上的概率是多少?计算n = 5, 10, 20，… 小结 统计 Counting 结合律，乘积律，$n!, \\Pi(n,r) \\left( \\begin{array}{} n \\\\ r \\end{array} \\right)$ 容斥原理 inclusion-exclusion principle 概率 Probability 事件Event 容斥 inclusion-exclusion 递归 recursion 参考资料 Textbook (R &amp; W) - Ch. 5, Sec. 5.1-5.3","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"Python自定义错误","slug":"技术学习/Python/Python自定义错误","date":"2021-04-17T12:13:08.000Z","updated":"2021-04-17T12:38:06.375Z","comments":true,"path":"2021/04/17/ji-zhu-xue-xi/python/python-zi-ding-yi-cuo-wu/","link":"","permalink":"http://szdf123.github.io/2021/04/17/ji-zhu-xue-xi/python/python-zi-ding-yi-cuo-wu/","excerpt":"","text":"class CustomizeError(BaseException): def __init__(self, msg): self.msg = msg def __str__(self): return self.msg try: raise CustomizeError('错误类型') except CustomizeError as e: print(e) 本文参考链接 python 自定义错误处理https://www.cnblogs.com/zjj1990/p/12924649.html","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"Python中yield及itertools用法","slug":"技术学习/Python/Python中yield及itertools用法","date":"2021-04-17T09:18:25.000Z","updated":"2021-04-20T08:09:19.568Z","comments":true,"path":"2021/04/17/ji-zhu-xue-xi/python/python-zhong-yield-ji-itertools-yong-fa/","link":"","permalink":"http://szdf123.github.io/2021/04/17/ji-zhu-xue-xi/python/python-zhong-yield-ji-itertools-yong-fa/","excerpt":"","text":"yield在函数中，功能类似于return 但是函数一旦包含yield，就是一个生成器了 其定义方法为 def foo(): print(\"starting...\") while True: res = yield 4 print(\"res:\",res) 其使用方法为： g = foo() print(next(g)) # 调用生成器时，不传入参数 print(g.send(7)) # 调用生成器时，传入参数 使用生成器的一个好处是，其可以有效减小在生成列表时，内存空间的占用 itertools引用方法from itertools import * # 或 import itertools itertools.izip(*iterables)功能类似于zip，但速度更快，作用是将两个相同长度的集合合并成对. 创建一个迭代器，生成元组(i1, i2, … iN)，其中i1，i2 … iN 分别来自迭代器iter1，iter2 … iterN，只要提供的某个迭代器不再生成值，迭代就会停止，此函数生成的值与内置的zip()函数相同。 a = [1,2,3,4] b = [2,2,2,2] c = zip(a,b) &gt;&gt; c = [(1,2),(2,2),(3,2),(4,2)] itertools.izip_longest(*iterables[, fillvalue])与izip()相同，但是迭代过程会持续到所有输入迭代变量iter1,iter2等都耗尽为止，如果没有使用fillvalue关键字参数指定不同的值，则使用None来填充已经使用的迭代变量的值。 itertools.count(start=0, step=1)创建一个迭代器，生成从n开始的连续整数，如果忽略n，则从0开始计算 for i in izip(count(1), ['a', 'b', 'c']): print i &gt;&gt;&gt; (1, 'a') (2, 'b') (3, 'c') itertools.cycle(*iterables)无限迭代iterables中的内容 cycle('ABCD') --&gt; A B C D A B C D itertools.repeat(object[, times])创建一个迭代器，重复生成object，times（如果已提供）指定重复计数，如果未提供times，将无止尽返回该对象。 for i in repeat('over-and-over', 3): print i &gt;&gt;&gt; over-and-over over-and-over over-and-over itertools.chain(*iterables)将多个迭代器作为参数, 但只返回单个迭代器, 它产生所有参数迭代器的内容, 就好像他们是来自于一个单一的序列。 for i in chain([1, 2, 3], ['a', 'b', 'c']): print i &gt;&gt;&gt; 1 2 3 a b c itertools.compress(data, selectors)提供一个选择列表，对原始数据进行筛选 def should_drop(x): print 'Testing:', x return (x&lt;1) for i in dropwhile(should_drop, [ -1, 0, 1, 2, 3, 4, 1, -2 ]): print 'Yielding:', i &gt;&gt;&gt; Testing: -1 Testing: 0 Testing: 1 Yielding: 1 Yielding: 2 Yielding: 3 Yielding: 4 Yielding: 1 Yielding: -2 itertools.groupby(iterable[, key])返回一个产生按照key进行分组后的值集合的迭代器. 如果iterable在多次连续迭代中生成了同一项，则会定义一个组，如果将此函数应用一个分类列表，那么分组将定义该列表中的所有唯一项，key（如果已提供）是一个函数，应用于每一项，如果此函数存在返回值，该值将用于后续项而不是该项本身进行比较，此函数返回的迭代器生成元素(key, group)，其中key是分组的键值，group是迭代器，生成组成该组的所有项。 即：按照keyfunc函数对序列每个元素执行后的结果分组(每个分组是一个迭代器), 返回这些分组的迭代器 itertools.ifilter(predicate, iterable)返回的是迭代器类似于针对列表的内置函数 filter() , 它只包括当测试函数返回true时的项. 它不同于 dropwhile() 创建一个迭代器，仅生成iterable中predicate(item)为True的项，如果predicate为None，将返回iterable中所有计算为True的项 itertools.ifilterfalse(predicate, iterable)和ifilter(函数相反 ， 返回一个包含那些测试函数返回false的项的迭代器) 创建一个迭代器，仅生成iterable中predicate(item)为False的项，如果predicate为None，则返回iterable中所有计算为False的项 对函数func执行返回假的元素的迭代器 itertools.islice(iterable, stop)itertools.islice(iterable, start, stop[, step])返回的迭代器是返回了输入迭代器根据索引来选取的项 创建一个迭代器，生成项的方式类似于切片返回值： iterable[start : stop : step]，将跳过前start个项，迭代在stop所指定的位置停止，step指定用于跳过项的步幅。 与切片不同，负值不会用于任何start，stop和step， 如果省略了start，迭代将从0开始，如果省略了step，步幅将采用1. 返回序列seq的从start开始到stop结束的步长为step的元素的迭代器 print 'Stop at 5:' for i in islice(count(), 3): print i print 'Start at 5, Stop at 10:' for i in islice(count(), 5, 8): print i print 'By tens to 100:' for i in islice(count(), 0, 50, 10): print i Stop at 3: 0 1 2 Start at 5, Stop at 8: 5 6 7 By tens to 50: 0 10 20 30 40 itertools.imap(function, *iterables)创建一个迭代器，生成项function(i1, i2, …, iN)，其中i1，i2…iN分别来自迭代器iter1，iter2 … iterN，如果function为None，则返回(i1, i2, …, iN)形式的元组，只要提供的一个迭代器不再生成值，迭代就会停止。 即：返回一个迭代器, 它是调用了一个其值在输入迭代器上的函数, 返回结果. 它类似于内置函数 map() , 只是前者在任意输入迭代器结束后就停止(而不是插入None值来补全所有的输入). 返回序列每个元素被func执行后返回值的序列的迭代器 itertools.starmap(function, iterable)创建一个迭代器，生成值func(*item),其中item来自iterable，只有当iterable生成的项适用于这种调用函数的方式时，此函数才有效。 对序列seq的每个元素作为func的参数列表执行, 返回执行结果的迭代器 itertools.tee(iterable[, n=2])返回一些基于单个原始输入的独立迭代器(默认为2). 它和Unix上的tee工具有点语义相似, 也就是说它们都重复读取输入设备中的值并将值写入到一个命名文件和标准输出中 从iterable创建n个独立的迭代器，创建的迭代器以n元组的形式返回，n的默认值为2，此函数适用于任何可迭代的对象，但是，为了克隆原始迭代器，生成的项会被缓存，并在所有新创建的迭代器中使用，一定要注意，不要在调用tee()之后使用原始迭代器iterable，否则缓存机制可能无法正确工作。 把一个迭代器分为n个迭代器, 返回一个元组.默认是两个 itertools.takewhile(predicate, iterable)和dropwhile相反 创建一个迭代器，生成iterable中predicate(item)为True的项，只要predicate计算为False，迭代就会立即停止。 即：从序列的头开始, 直到执行函数func失败. itertools.product(*iterables[, repeat])笛卡尔积 创建一个迭代器，生成表示item1，item2等中的项目的笛卡尔积的元组，repeat是一个关键字参数，指定重复生成序列的次数。 itertools.permutations(iterable[, r])排列 创建一个迭代器，返回iterable中所有长度为r的项目序列，如果省略了r，那么序列的长度与iterable中的项目数量相同： 返回p中任意取r个元素做排列的元组的迭代器 itertools.combinations(iterable, r)创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (不带重复) itertools.combinations_with_replacement(iterable, r)创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (带重复) 本文参考链接 官方itertoolshttps://docs.python.org/2/library/itertools.html python中yield的用法详解——最简单，最清晰的解释https://blog.csdn.net/mieleizhi0522/article/details/82142856/ Python - zip和izip函数 以及 位置参数和命名参数的运用https://blog.csdn.net/qq_33704653/article/details/79920339 Python itertools模块详解https://blog.csdn.net/u011089523/article/details/513842551111","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"我活着是为了什么？","slug":"生活纪实/我活着是为了什么？","date":"2021-04-16T16:33:35.000Z","updated":"2021-04-16T16:38:47.602Z","comments":true,"path":"2021/04/17/sheng-huo-ji-shi/wo-huo-zhao-shi-wei-liao-shi-me/","link":"","permalink":"http://szdf123.github.io/2021/04/17/sheng-huo-ji-shi/wo-huo-zhao-shi-wei-liao-shi-me/","excerpt":"","text":"我的人生理想物质生活：宜居城市，现代小楼，有可以长途旅行的汽车，生活富足而平静有房，二三层小楼，房前有一个小院子，可以种一些花草 屋子装修比较现代，干净 有车 生活平静，城市安稳发达，气候温和，绿化及空气好 上班通勤40分钟之内 精神生活：时间平衡，知识丰富，生活惬意且有趣工作与生活时间平衡，有自己的时间 了解更多自然、科学、人文、历史知识，了解更多有趣好玩的事 生活状态充实、健康，惬意，富足，有乐趣 有一本日志册，记录着自己过往生活的点点滴滴，回首往事却又不沉醉于往事 心性：自信乐观，心态年轻，平和不焦虑，享受当下生活磨砺心性：自信、乐观、积极、平和、高情商，处变不惊，保持年轻的心态，懂得人情世故，却又不世故 有平和心，钝感力，不过分为未来的事情担心和焦虑，可以平静的享受当下的生活 有执行力，有行动力，精力充沛 人际：志同道合，氛围融洽有几个聊得来，志同道合的朋友 有几个可以一起出来玩的朋友 和领导、同事相处愉快 有几个朋友可以吃饭聊天，相处融洽 会和他人合作完成任务 娱乐：兴趣广泛，有影视与游戏相伴，旅行与美食不可辜负品尝世界各地美食 可以和男友双人自驾游 可以看时下流行的和经典的影视剧 每年有1次7天以上的出国旅行，看世界各地自然风光，体验风土人情 平时可以去家附近郊游 有时间可以专心的玩喜欢的游戏 有更多兴趣爱好 事业：领域专家，受人尊敬，收入中上，小有所成经济独立，工作稳定，收入较好，中等之上 成为一个领域的专家，技术大牛，受人尊敬，处理工作内容游刃有余不需要特别多的钱，但要足够支撑日常的生活 技能：读书、外语、乐器、声乐、美食、穿着皆略知一二有时间读书，提升自己 英语流利 熟练掌握几种乐器，比如电子琴 参加合唱团等集体活动 自己会做很多美食 会穿衣打扮，自然帅气 情感：深爱且忠诚，共同生活，相互扶持，心灵相伴有一个深爱的爱人，我很爱他，他很爱我，我们互相关心、支持、鼓励 他的年龄比我小一些，小10岁之内都可以 他乐观，积极，有趣，有主见，懂得照顾我的情绪 他性情温和，忠于爱情，谦逊，却不软弱，不失男子气概 他喜欢运动，阳光，帅气，身高180左右 我和他的性生活和谐 和他在一起很开心，舒适，可以轻松的做自己 和他生活在一起，每天晚上可以抱着他睡觉 我的付出能够得到他的肯定 喜欢我做的美食，我做的饭能够给他带来喜悦 和他在一起时能做很多有趣的事 家庭：父母健康，有孩子与宠物我父母身体健康 我有自己的孩子，最好是男孩 家里有宠物，有猫有狗 陪父母去外边旅游，对父母多尽尽孝道 健康：身体健康无顽疾，穿衣显瘦，脱衣有肉身体健康，无重大疾病 身形好看，有一些肌肉，没有赘肉 能坚持长跑 老年生活：健康依旧，爱人常在，膝下有福，安度晚年老年时身体依然健康 还可以和老公一起生活在自己家里 孩子大了，能时常回来看看我们 不依靠轮椅和药物生活 每天在家看看花，弄弄草，摆弄几下乐器 和几个朋友一起在外聊天娱乐 没有负债 自己的生活不拖累别人 和这个世界愉快的相处墓志铭：他喜欢这个世界并全身心投入其中，他没有在这个世界上白走一遭，他生活过得很幸福。","categories":[{"name":"生活纪实","slug":"生活纪实","permalink":"http://szdf123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%BA%AA%E5%AE%9E/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://szdf123.github.io/tags/%E7%94%9F%E6%B4%BB/"}],"author":"Benjamin"},{"title":"理财训练营（1）","slug":"课程笔记/理财训练营（1）","date":"2021-04-15T15:38:15.000Z","updated":"2021-04-16T17:27:45.996Z","comments":true,"path":"2021/04/15/ke-cheng-bi-ji/li-cai-xun-lian-ying-1/","link":"","permalink":"http://szdf123.github.io/2021/04/15/ke-cheng-bi-ji/li-cai-xun-lian-ying-1/","excerpt":"","text":"本学习笔记根据某投学堂提供资料整理学习 什么是某投学堂一家能让零基础想学理财的人轻松学习理财的公司。 2011年成立，至今已10年。 某狗钱钱第一节：想变得有钱，这3个建议可以帮你知识点 为什么要学习理财 小狗钱钱的3个建议 不要试试看，要去做 正文钱不是万能的，但是如果缺钱的话，钱就会变得格外的重要 你努力赚钱是为了可以追求钱以外的重要东西，而如果你不努力赚钱，对不起，你们家就会陷入到钱的困扰里面来，钱呢，就会占据你生命中的大部分。 故事的小主人的3个愿望： 要当交换生去美国学习； 要一台笔记本电脑； 要帮爸爸妈妈偿还债务。 成功的人之所成功，因为他们一直梦想着有成功的那天，不停地想着他们成功后的情景，强烈的欲望会推动你走向成功，这是“视觉化”的作用。 面对任何一件事情，你只有两个选择，那就是“做”或者“不做”。 而不能说“试试吧”。如果你每次只是抱着“试试看”心态，那么最后只会以失败而告终。“试试看”其实就是一个借口，是自己为自己失败提前预设的一个理由。因此，从现在开始，无论任何事情，不要试验，只选择：做或者不做。只要选择了做，就用尽全力，直到成功。 小结3个实现梦想的方法：写3个愿望，准备梦想相册、准备梦想储蓄罐。 读后感说实话，本身就抱着试试看的心态报名的这个课程。找着接口说白天要上班，晚上要学习，没有时间看这个课程。结果今天终于起身着手开始做这件事，发现第一课就惊艳到了我。这个故事难道不也正说的我吗？我总是说着试试吧之类的话，却总不拼尽全力做事；工作也总是得过且过，最后吃亏的只有自己。从今天，从此刻开始，必须行动起来了！ 第二节：赚钱，没你想得那么难知识点 坚持写成功日记 赚钱的要点是：第一，别人需要什么？第二，我能做什么？ 正文你可以为你的梦想赚钱啊，而能不能赚到钱，并不取决于你有没有好的点子，更不取决于你有多聪明，而在于你有没有自信，只要你相信自己，就一定能赚到钱。 该如何树立自己的自信呢？ 方法很简单：像富人一样写“成功日记”——把自己做的成功的事情都记录进去，任何小事都可以。 你想赚钱吗？我给你两个建议： 第一，为别人解决问题； 第二，把精力放在你知道的事情和能够做的事情上。 巴菲特在5岁时，已经学会每天自己坐公交送报纸了。 想挣钱当然是好事，可是你花了多少时间思考该怎么挣钱呢？你喜欢什么，你擅长什么呢？ 觉得钱难赚的人，我觉得大概可以总结为2类人： 第一类是：没有认真思考； 第二类是：不愿面对困难。 小结增加自信的方法就是写成功日记；赚钱的两个方法是，别人需要什么？我能做什么？ 读后感文章内容同样精彩。我就是这样，觉得现在已经赚得足够了，为什么还要再那么努力呢？平平淡淡的多好啊！可是，我还是羡慕那些更加财富自由的人，能够有更高的社会地位，能够有过更加富足的生活。同样的，我一直都不是特别有自信的人，我觉得文章提供的方法很好，我从今天开始，每天都记录一点，自己当天成功完成的事。我相信，这是培养自己自信的一种很好的方式。 第三节：99%的人不成功，都是因为它知识点 无论什么时候，都要坚持自己的想法，尤其是困难时期； 每天不间断做重要不紧急的事情； 决定要做一件事情的时候，就立刻去做，不要犹豫。 正文人往往在顺境中趁胜追击，而在逆境中就会消沉。 首先从体力上改善自己，比如每天坚持午休和锻炼；其次，从精神状态上进行改善，比如即使生病中也可以给自己加油打气，坚持做一些力所能及的工作。 当你决定做一件事的时候，你必须在72小时之内完成它，否则你很可能永远不会再做了。总之就是要立即去做，不要有太多顾虑。 很多人害怕决定太快会带来不好的结果，但事实上呢，反复犹豫反而错失许多机遇。立即下决心去做，可能会做错，但更多是为下一次成功积累了经验。 如果总想着“等我有时间再做或等条件成熟再做”，90%的可能是一直都不会去做了。 小结三条原则 读后感又给自己重重的上了一课。我觉得对我来说，最重要的就是第三点，不要犹豫，立刻去做。因为我发现，我有好多好多想做的事，结果因为一个犹豫，没计划好，害怕失败。。各种各样的原因，把时间都蹉跎了，却始终没有把自己的愿望提上日程。时间不等人，我得继续加油啊！ 第四节：不要杀死你的鹅知识点 永远不要杀死你的鹅； 对于负债的人4条建议。 正文寓言故事：一个人发现自己的鹅可以下金蛋，直到贪婪到一刀把鹅劈成两半，最终却什么都没得到。 对负债人的建议： 应当扔掉所有信用卡：因为使用信用卡时，总比使用现金要花的多； 尽可能少的偿还贷款； 对于消费贷款，欠债的人应该将不用于生活的钱存起来一半，另一半用于还债； 对于所有的消费，都要问一问自己“这真的有必要吗？将物品划分成必要、需要和想要三个级别。 小结保留本金，赚利息。对负债人的建议。 读后感学习这堂课，让我想到最多的就是我的本金如何变成利息。对于负债，除了房贷，我没有更多的债务，所以暂时还不需要考虑更多。当然，我仍然认为文章给出的几点建议是值得考虑的，是合理的建议。 第五节：投资，遵循这3个原则就足够了知识点 现金很重要，可以来应对突发状况； 富人思维&amp;穷人思维 投资三原则 正文投资之前一定要做好资产配置 金钱能否带来幸福，不取决于数量，而取决于人们是否懂得怎样使用它。 穷人思维就是，一旦拿到钱，首先就本能的想到买买买，想到吃喝玩乐，想到各种奢侈享受，却忽略了投资。 富人思维就截然不同了，他们也会消费一些金钱作为对自己的奖励，却会将80%甚至更多的钱分配到投资上，让它们继续为自己赚取更多的钱。 投资三条准则： 第一条：应该把钱投资在安全的地方； 第二条：钱应该能下很多金蛋； 第三条：投资应该简单明白。 不懂的就不要碰。 小结投资要安全，要有收益，要充分了解投资对象 读后感终于，开始准备切入真正的投资课程了。有点小激动，希望正式的课程真的能解决自己的很多顾虑和疑惑，学到有用的理财知识。","categories":[{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"理财","slug":"理财","permalink":"http://szdf123.github.io/tags/%E7%90%86%E8%B4%A2/"}],"author":"Benjamin"},{"title":"Linux CentOS 综合使用技巧","slug":"最佳实践/Linux CentOS 综合使用技巧","date":"2021-04-15T08:58:30.000Z","updated":"2021-04-15T09:00:03.392Z","comments":true,"path":"2021/04/15/zui-jia-shi-jian/linux-centos-zong-he-shi-yong-ji-qiao/","link":"","permalink":"http://szdf123.github.io/2021/04/15/zui-jia-shi-jian/linux-centos-zong-he-shi-yong-ji-qiao/","excerpt":"","text":"Java相关查询Java进程ps -ef | grep java jps -l #（显示java进程的Id和软件名称） jps -lmv #（显示java进程的Id和软件名称；显示启动main输入参数；虚拟机参数）","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://szdf123.github.io/tags/Java/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"Linux","slug":"Linux","permalink":"http://szdf123.github.io/tags/Linux/"}],"author":"Benjamin"},{"title":"CentOS7操作系统配置Java","slug":"最佳实践/CentOS7 配置Java","date":"2021-04-15T07:54:48.000Z","updated":"2021-04-27T02:15:22.715Z","comments":true,"path":"2021/04/15/zui-jia-shi-jian/centos7-pei-zhi-java/","link":"","permalink":"http://szdf123.github.io/2021/04/15/zui-jia-shi-jian/centos7-pei-zhi-java/","excerpt":"","text":"1.从官网下载Java SDK。安装Java环境有rpm版本和使用tar.gz两种方式。比如下载文件为 jdk-16_linux-x64_bin.rpm，上传至要安装Java环境的服务器中 Java官网下载地址 2.在服务器中卸载原有 Java/JDK rpm -qa | grep jdk // 查看当前系统Java版本 rpm -e [jdk版本] // 卸载现有JDK 3.若以rpm版本安装，则可运行以下命令，安装Java rpm -ivh jdk-16_linux-x64_bin.rpm 4.若以tar.gz版本安装，则可运行以下命令，安装Java mkdir /usr/java tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/java 5.设置环境变量 vim /etc/profile # 安装下方需要粘贴的内容修改该文件 source /etc/profile # /etc/profile里需要粘贴的内容 JAVA_HOME=/usr/java/jdk-16 # 本例中，RPM方法默认安装位置为此路径 JAVA_HOME=/usr/java/jdk1.8.0_161 # 本例中，tar.gz方法安装位置为此路径 CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin export PATH CLASSPATH JAVA_HOME 6.检查Java环境 java -version echo $JAVA_HOME 参考资料 CentOS 7 安装 JAVA环境（JDK 1.8）https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html centos7使用rpm安装jdk8https://blog.csdn.net/fansenjun/article/details/82256528 centos rpm安装的 jdk路径在哪和配置在哪https://blog.csdn.net/qq_43313588/article/details/88556527 jdk下载/Linux64位 jdk1.8 jdk-8u161下载https://blog.csdn.net/qq_21187515/article/details/84850814/","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://szdf123.github.io/tags/Java/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"Linux","slug":"Linux","permalink":"http://szdf123.github.io/tags/Linux/"}],"author":"Benjamin"},{"title":"Windown10通过Vagrant搭建CentOS7虚拟机.md","slug":"最佳实践/Windown10通过Vagrant搭建CentOS7虚拟机","date":"2021-04-15T07:54:48.000Z","updated":"2021-04-29T08:28:13.778Z","comments":true,"path":"2021/04/15/zui-jia-shi-jian/windown10-tong-guo-vagrant-da-jian-centos7-xu-ni-ji/","link":"","permalink":"http://szdf123.github.io/2021/04/15/zui-jia-shi-jian/windown10-tong-guo-vagrant-da-jian-centos7-xu-ni-ji/","excerpt":"","text":"下载并安装Vagrant及VMBOX 下载CentOS7的Box 载入Box到系统中 参考资料 Vagrant Cloud - 官网CentOS7-box下载地址https://app.vagrantup.com/centos/boxes/7 vagrant在windows下的使用https://www.cnblogs.com/xiang--liu/p/9710351.html1vagrant使用三种网络配置https://blog.csdn.net/zc474235918/article/details/510391501vagrant调整内存大小https://blog.csdn.net/yageeart/article/details/728407631http://www.fancyecommerce.com/2017/06/06/vagrant-%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%EF%BC%8C%E5%B0%86windows%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%A0%E5%B0%84%E5%88%B0linux%E4%B8%AD/1vagrant报unknownfilesystemtype’vboxsf’解决方https://blog.csdn.net/weixin_43066287/article/details/99703093","categories":[{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"CentOS","slug":"CentOS","permalink":"http://szdf123.github.io/tags/CentOS/"},{"name":"Windows","slug":"Windows","permalink":"http://szdf123.github.io/tags/Windows/"}],"author":"Benjamin"},{"title":"在kubernetes环境搭建bistoury","slug":"技术学习/bistoury/在kubernetes环境搭建bistoury","date":"2021-04-15T07:09:22.000Z","updated":"2021-04-20T08:26:41.571Z","comments":true,"path":"2021/04/15/ji-zhu-xue-xi/bistoury/zai-kubernetes-huan-jing-da-jian-bistoury/","link":"","permalink":"http://szdf123.github.io/2021/04/15/ji-zhu-xue-xi/bistoury/zai-kubernetes-huan-jing-da-jian-bistoury/","excerpt":"","text":"Bistoury介绍开发者：去哪儿网 功能：从日志、内存、线程、类信息、调试、机器和系统属性等各个方面对应用进行诊断 目的：提升开发人员诊断问题的效率和能力 集成：Alibaba开源的arthas和唯品会开源的vjtools 功能概览通过命令行界面查看日志，使用arthas和vjtools的各项功能 在线debug，在线应用调试神器 线程级cpu监控，帮助你掌握线程级cpu使用率 在web界面查看JVM运行信息，以及各种其它信息 动态给方法添加监控 线程dump Bistoury架构分析Bistoury核心组件包含agent，proxy，ui： agent ： 与需要诊断的应用部署到一起，负责具体的诊断命令执行，通过域名连接proxy proxy：agent的代理，agent启动时会通过ws和proxy连接注册，proxy可以部署多个，推荐使用域名负载 ui：ui提供图形化和命令行界面，接收从用户传来的命令，传递命令给proxy，接收从proxy传来的结果并展示给用户。 Bistoury的访问流程 Bistoury原理分析 Bistoury快速开始 Bistoury的快速部署 从官网下载quick_start安装包，本例下载安装包文件名称为bistoury-2.0.7-quick-start.tar.gz 快速开始官网地址 最新release下载地址 解压安装包，并运行quick_start.sh # 解压文件，并进入到对应目录中 tar -zxvf bistoury-quick-start.tar.gz cd bistoury-2.0.7 # 如果应用以本人用户启动，可以直接运行 ./quick_start.sh -p 1024(应用进程pid，自行替换) start # 如果应用以其它帐号启动，比如 tomcat，需要指定一下用户然后运行 sudo -u tomcat ./quick_start.sh -p 1024(应用进程pid，自行替换) start # 停止运行 ./quick_start.sh stop 访问方法在浏览器输入 http://ip:9091 访问 UI，初始化用户名/密码为 admin/admin 官方提供的启动参数| 参数名称 | 是否必填 | 默认值 | 说明 || ———— | ———— | ————————————————————————- | —————————————————————————————— || -i | 选填 | ip 中列表的第一个 | 当本机存在多个 ip 时，指定一个可用 ip || -j | 选填 | 环境变量 JAVA_HOME | 指定 jdk 路径 || -l | 选填 | /tmp | 应用的日志目录，Bistoury 命令执行的目录，比如 ls，tail 等都会默认在此目录下执行 || -p | 必填 | | 应用进程 id，因为是脚本快速启动，所以需要使用该参数指定对哪个 JAVA 进程进行诊断 || -c | 选填 | org.springframework.web.servlet.DispatcherServlet | 用于获取一些应用信息，应填写为依赖的 jar 包中的一个已加载的类（不能使用 Bistoury agent 中用到的类，推荐使用公司内部中间件的 jar 包或 Spring 相关包中的，agent 不可能使用到的类，如org.springframework.web.servlet.DispatcherServlet） || -h | 选填 | | 查看帮助文档 | Bistoury 在docker运行官方的快速启动命令： #!/bin/bash #创建网络 echo \"start create network\" docker network create --subnet=172.19.0.0/16 bistoury #mysql 镜像 echo \"start run mysql image\" docker run --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -d -i --net bistoury --ip 172.19.0.7 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-db #zk 镜像 echo \"start run zk image\" docker run -d -p 2181:2181 -it --net bistoury --ip 172.19.0.2 registry.cn-hangzhou.aliyuncs.com/bistoury/zk:latest sleep 30 #proxy 镜像 echo \"start run proxy module\" docker run -d -p 9880:9880 -p 9881:9881 -p 9090:9090 -i --net bistoury --ip 172.19.0.3 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-proxy --real-ip $1 --zk-address 172.19.0.2:2181 --proxy-jdbc-url jdbc:mysql://172.19.0.7:3306/bistoury #ui 镜像 echo \"start run ui module\" docker run -p 9091:9091 -it -d --net bistoury --ip 172.19.0.4 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-ui --zk-address 172.19.0.2:2181 --ui-jdbc-url jdbc:mysql://172.19.0.7:3306/bistoury #boot 镜像 echo \"start run demo application\" docker run -it -d -p 8686:8686 -i --net bistoury --ip 172.19.0.5 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-demo --proxy-host $1:9090 docker run -it -d -p 8687:8686 -i --net bistoury --ip 172.19.0.6 registry.cn-hangzhou.aliyuncs.com/bistoury/bistoury-demo --proxy-host $1:9090 注意，运行时需要传入本机IP地址 Bistoury 在生产环境运行官方推荐部署方式： ui 独立部署，推荐部署在多台机器，并提供独立的域名 proxy 独立部署，推荐部署在多台机器，并提供独立的域名 agent 需要和应用部署在同一台机器上。推荐在测试环境全环境自动部署，线上环境提供单机一键部署，以及应用下所有机器一键部署 独立的应用中心，管理所有功能内部应用和机器信息，这是一个和 Bistoury 相独立的系统，Bistoury 从中拿到不断更新的应用和机器信息 bistoury-application-k8s(Bistoury on K8S) 本文参考链接 bistoury官网https://github.com/qunarcorp/bistoury java应用诊断和在线debug利器bistoury介绍与在K8S环境使用https://www.cnblogs.com/xiaoqi/p/Bistoury.html","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（7）","slug":"UNSW/COMP9020/离散数学课程笔记（7）","date":"2021-04-01T11:25:01.000Z","updated":"2021-05-03T16:48:31.440Z","comments":true,"path":"2021/04/01/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-7/","link":"","permalink":"http://szdf123.github.io/2021/04/01/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-7/","excerpt":"","text":"归纳，递归，Big-Oh符号 Induction, Recursion, Big-Oh Notation归纳推理 Inductive Reasoning假设我们想要得出这种形式的结论：$P(x)$对于所有的$x$都属于某种类型 正如哲学中所理解的那样，归纳推理是从例子出发的。 例如：已知“这只天鹅是白色的，那只天鹅也是白色的，事实上每只天鹅都是白色的。我所见过的天鹅都是白色的。” 结论：”每只天鹅都是白色的“ 注意：这对发现假说来说，确实是个好方法，但这不是一个有效的推理原则！ 数学归纳法 Mathematical induction 是一种有效的变体。 数学归纳法 Mathematical Induction数学归纳法不仅基于一组例子，而且基于从已知P存在的情况中推导出新的$P(x)$情况的规则。 数学归纳法推理的一般结构： 基本情况Base Case[B]：$P(a_1), P(a_2),…. P(a_n)$对于一个小的例子集$a_1…a_n$(通常 n = 1) 归纳步骤 Inductive Step[I]: 如果$P(x)$在某些情况下$x = x_1,…, x_k$成立，那么以某种方式由$x_1,…,x_k$构成的$y$，$P(y)$成立。 结论 Conclusion: 从$a_1…a_n$开始，并重复应用已有值构造y的方法，我们最终可以构造所有感兴趣的域内的值。 关于$\\mathbb{N}$的数学归纳 Mathematical Induction on $\\mathbb{N}$假设从$x=0$开始，重复构建$x \\mapsto x +1$。那么，也就构建了 $0, 0+1=1, 1+1=2,2+1=3,3+1=4,…$ 这被称为$\\mathbb{N}$ $\\mathbb{N}$的数学归纳法对应原理： 基础情形 Base Case[B]: $P(0)$ 归纳过程 Inductive Step[I]: $\\forall k \\ge 0(P(k)\\Rightarrow(k+1))$ 结论 Conclusion: $\\forall n \\in \\mathbb{N}\\ P(n)$ 归纳假设 Inductive Hypothesis为了证明$k≥0$时的归纳步骤[I]， $P(k)\\Rightarrow P(k + 1)$，我们通常进行如下步骤： 假设 Assume P(k)，对任意$k \\ge 0$ ​ $\\vdots$ （推理步骤，通常使用$P(k)$假设） 推导出$P(k+1)$ 此处，$P(k)$为称为归纳假设 Inductive Hypothesis 定理： 对任意$n \\in \\mathbb{N}$，有 P(n):\\quad \\sum_{i=0}^{n}i=\\frac{n(n+1)}{2}从m开始的归纳 Induction From $m$ Upwards如果 [B] $P(m)$ [I] $\\forall k \\ge m(P(k)\\rightarrow P(k+1))$ 那么 [C] $\\forall n \\ge m(P(n))$ 定理： 对于任意的$n\\ge 1$，$8^n-2^n$可被6整除 推理步骤 Induction Steps $ \\mathcal{l} &gt; 1$如果 [B] $P(m)$ [I] $P(k)\\Rightarrow P(k+\\mathcal{l})\\quad \\forall k\\ge m$ 那么 [C] $P(n)$ 对于所有的第 $\\mathcal{l}$个 $n \\ge m$ 强归纳 Strong Induction这是一个归纳假设更强的版本。我们不使用P(k)只适用于一个值，而是使用k之前的所有值。 如果 [B] $P(m)$ [I] $[p(m)\\land P(m_1)\\land \\dots \\land P(k)]\\Rightarrow P(k+1)\\ \\forall k \\ge m$ 那么 [C] $P(n)$ 对于所有的 $n \\ge m$ 负整数，逆向归纳 Negative Integers, Backward Induction 注：归纳法可以对$\\mathbb{Z}$的任何元素最小的子集进行。因此m可以是负数。如，[b] $m = -10^6$。我们可以在”相反”方向$p(m) \\Rightarrow p(m - 1)$上应用归纳法，它意味着以相反的顺序考虑整数，即n之后的下一个数是$n - 1$。这种归纳法可以用来证明所有$n≤m$时的某个$p(n)$。有时需要推理所有整数$\\mathbb{Z}$。这需要两个单独的简单归纳法证明：一个对$\\mathbb{Z}$，另一个对$-\\mathbb{Z}$。它们都会形成一些相同的初始值，比如0。之后，先证明正整数情形，再证明负整数情形。 前后向归纳 Forward-Backward Induction思考：为了证明$P(n) \\ \\forall n \\ge k_0$， 核实$P(k_0)$ 证明$P(k_i) 对无穷k_0 &lt; k_1 &lt; k_2 &lt; k_3 &lt; …$ 填充空隙$P(k_1) ⇒ P(k_1- 1) ⇒ P(k_1-2) ⇒ . . . ⇒ P(k_0 + 1)$$P(k_2) ⇒ P(k_2- 1) ⇒ P(k_2-2) ⇒ . . . ⇒ P(k_1 + 1)$ 无限下降 Infinite Descent欧拉定理：对于平面连接图G，有 V-E+F=2其中，F为面数，E为边数，V为顶点数 结构归纳 Structural Induction归纳法不仅适用于自然数(和整数)，而且一般适用于任何部分有序集。基本的方法总是一样的——我们需要验证这一点[I] 对于任何给定的对象，如果该属性对其所有的前身(“较小的”对象)都有效，那么它对对象本身也有效[B] 该属性适用于所有最小对象——没有前身的对象；它们通常是非常简单的对象，可以立即验证 定理：在任何有根的树中，叶节点的数量都比有右兄弟节点的顶点的数量多1。 递归定义 Recursive Definitions它们包括基(B)和递归过程(R)。递归定义序列时(通常)(B) 一些初始条款被指定，也许只有第一个；(R) 后面的术语表示为前面术语的函数表达式。 (R)又称递归公式 recurrence formula 关于递归定义的归纳证明关于递归定义函数的证明通常是根据定义的结构进行数学归纳法。 阿克曼数字 Ackermann’s numbers: $(2, 4, 6, 6553, …)$ b_n = 2^{b_{n-1}}递归定义的正确性 Correctness of Recursive Definitions如果后一项的计算可以简化为(B)中给出的初始值，则递归公式是正确的。 在应用递归构造之前，对定义的边界(极限)情况进行评估。 相互递归 Mutual Recursion一些更复杂的程序采用了两个过程相互调用的技术。当然，它应该被设计成每个连续调用引用更小的参数，这样整个过程就会终止。这种方法常用于计算机图形学，特别是用于生成分形图像(包括各种想象的风景)。 大o符号:动机 Big-Oh Notation: Motivation我们希望能够讨论一个程序/算法所需的资源(运行时间、内存、能量消耗)，作为其输入大小n的函数f (n)。 增长的次序 Order of Growth增长的顺序提供了一种方法来抽象这两个问题，并专注于什么是函数大小的本质，通过说“(复杂的)函数g是大致相同的大小(对于大的输入)(简单的)函数f” 渐近上界 Asymptotic Upper Bounds“Big-Oh”渐近上界 “Big-Oh” Asymptotic Upper Bounds定义：令$f,g:\\mathbb{N} \\rightarrow \\mathbb{R}$，我们说$g$渐近小于$f$(或:$f$是$g$的上界)，如果存在$n_0\\in N$，且实常数$c &gt; 0$对于所有$N≥n_0$， g(n) ≤ c · f (n)对于所有渐近小于$f$的函数$g$，写作$\\mathcal{O}(f (n))$。 传统的记录符号为： g(n) = \\mathcal{O}(f (n))一般地， 对于常数$a_k \\dots a_0$， a_k n^k + a_{k-1} n ^{k-1} + \\dots + a_0 = \\mathcal{O}(n^k) 所有的$\\log _b x$都有相同的阶数，不管b的值是多少 \\mathcal{O}(\\log_2 n) = \\mathcal{O}(\\log_3 n) = \\dots = \\mathcal{O}(\\log_{10} n) = \\dots 指数$r^n,s^n$到不同的基$r &lt; s$有不同的阶数，例如，对于所有的$n$没有c &gt; 0使$3^n &lt; c·2^n$ \\mathcal{O}(r^n)\\not\\subseteq \\mathcal{O}(s^n) \\not\\subseteq \\mathcal{O}(t^n) \\dots \\quad for\\ r < s < t \\dots 多项式类似 \\mathcal{O}(n^k) \\not\\subseteq \\mathcal{O}(n^l) \\not\\subseteq \\mathcal{O}(n^m) \\dots \\quad for\\ k < l < m \\dots 以下是在分析程序性能(算法复杂度)时最常见的一些函数： \\begin{array}{} 1, \\log \\log n, \\log n, \\sqrt{n}, \\sqrt{n}(\\log n), \\sqrt{n}(\\log n)^2 \\\\ n, n \\log \\log n, n \\log n, n^{1.5}, n^2, n^3 \\\\ 2^n, 2^n \\log n, n2^n, 3^n \\\\ n!, n^n, n^{2n}, \\dots, n^{n^2} , n^{2^n} \\end{array}符号:$\\mathcal{O}(1)≡ const$，尽管技术上它可以是在两个常数c和d之间变化的任何函数。 大θ符号 Big-Theta Notation定义：两个函数$f, g$如果以相同的方式伸缩，它们的增长顺序是相同的：存在$n_0∈\\mathbb{N}$，实常数$c &gt; 0, d &gt; 0$，对于所有$N≥n_0$，有 c·f (N)≤g(N)≤d·f (N)对于与$f$具有相同增长阶的所有函数$g$的类，写$Θ(f (n))$。 如果$g∈O(f)$，则$f$是(给出)$g$的增长阶的上界；如果$g∈Θ(f)$，我们称它为紧界 tight bound。 注意这一点，有对称性 g ∈ Θ(f ) \\Leftrightarrow f ∈ Θ(g)很明显，有 Θ(f (n)) ⊆ \\mathcal{O}(f (n))同时，“大O”不是一个对称关系 g ∈ \\mathcal{O}(f ) \\not\\Rightarrow f ∈ \\mathcal{O}(g)分析算法的复杂性我们想知道当输入量增加时算法的运行时间是多少。为了避免特定计算平台的变化，我们以基本操作的数量而不是时钟时间来衡量性能。通常我们将四种算术运算、比较运算和逻辑运算视为基本运算；它们占用一个处理器周期(或固定数量的周期)。 确定算法复杂度的一种典型方法，即对其运行时间的渐近估计，是将操作数的递归式写成输入大小的函数。然后我们将递归式求解到一个大小的阶数。 普遍式算法复杂度的递归通常涉及到子问题规模的线性减少 linear reduction。定理：情行1： \\begin{array}{} T(n) = T(n - 1) + bn^k \\\\ T(n) = \\mathcal{O}(n^{k+1}) \\end{array}情行2： \\begin{array}{} T(n) = cT(n - 1) + bn^k, c>1 \\\\ T(n) = \\mathcal{O}(c^n) \\end{array}这与分治算法形成了对比，在分治算法中，我们通过对某个c(通常是c = 2)的子问题递归来解决规模为n的问题。 主定理 Master Theorem定理：以下案例涵盖了实践中出现的许多分治法： T(n) = d^α · T (\\frac{n}{d}) + \\mathcal{O}(n^β)情行1：$α &gt; β$，$T(n) = O(n^α)$情行2：$α = β$，$T(n) = O(n^α\\log n)$情行3：$α &lt; β$，$T(n) = O(n^β)$ 当我们将一个规模为$n$的问题简化为几个规模为$n/d$的子问题时，就会出现这种情况。如果这些子问题的数量是$d^α$，而合并这些更小的解的代价是$n^β$，那么总代价取决于$α$和$β$的相对大小。 小结 数学归纳法 Mathematical induction基本情况，归纳假设$P(k)$结论：归纳步骤$∀k (P(k)\\Rightarrow P(k + 1))$ 变化 Variations:强型、前后型、结构型。 递归定义 recursive definitions“大-哦”符号$\\mathcal{O}(f (n))$为一类函数$f (n)$是上界;$Θ(f (n))$ 分析算法的复杂性，求解递归 线性缩减的一般结果指数约简(“主定理”) 参考资料 Textbook (R &amp; W) - Ch. 4, Sec. 4.2-4.6","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（8）","slug":"UNSW/COMP9311/数据库基础课程笔记（8）","date":"2021-03-28T12:03:15.000Z","updated":"2021-03-28T12:52:01.024Z","comments":true,"path":"2021/03/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-8/","link":"","permalink":"http://szdf123.github.io/2021/03/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-8/","excerpt":"","text":"文件组织和索引成本模型D: 读取或写入磁盘页的平均时间 C: 处理记录的平均时间 H：对记录应用Hash函数所需的时间 3文件组织:堆文件 整理文件 散列文件 待研究的操作扫描Scan：获取文件中的所有记录 根据相等选择搜索。(SWES) (“ Find the students record with sid = 23 “)根据范围选择搜索。(SWRS) (“ Find all students with name alphabetically after ‘ Smith ‘ “) 插入Insert：插入一个给定的记录到文件中。 删除Delete:删除给定rid的记录。 下面，我们将根据3种不同的文件组织检查这些操作的成本。 堆文件Heap Files 扫描： B(D + RC)，其中B是页面数，R是页面(块)的平均记录数 SWES： 如果选择是在一个键上指定的，平均0.5B(D + RC)，否则为B(D + RC) SWRS： 插入Insert: 2D + C (总是插入到文件末尾) 删除Delete： 只涉及到一个记录 如果rid没有给出，平均成本为0.5B(D + RC) + D; 其他为 (D + C ) + D 如果涉及几条记录，则花费巨大 整理文件 Sorted Files按搜索键排序——一个或多个字段的组合 如果对搜索键执行以下查询，则： 扫描Scan: B(D + RC) SWES: 如果唯一记录 O(D log2 B + C log2 R) O(D log2 B + C log2 R + #matches) SWRS: O (D log2 B + C log2 R + #matches) 插入：花费巨大，搜索成本 + 2∗(0.5B(D + RC)) 删除：花费巨大，搜索成本 + 2∗(0.5B(D + RC)) 哈希文件 Hashed Files文件中的页面被分组成桶。bucket由散列函数定义。页面的占用率保持在80%左右。 假设数据操作基于Hash键。 扫描Scan：1.25B(D + RC) SWES：如果每个哈希桶只包含一个页面，则H + D + 0.5RC SWRS: 1.25B(D + RC)。（没有从哈希结构得到帮助） 插入Insert：如果涉及一个块，搜索成本加上C + D 删除Delete：如果涉及一个块，搜索成本加上C + D 小结 FileType Scan EqualitySearch RangeSearch Insert Delete Heap BD 0.5 BD BD Search + D Search+ D Sorted B D D log B D log B+# matches Search+ BD Search+ BD Hashed 1.25 BD D 1.25 BD 2 D Search+ BD 索引 Indexes索引背后的基本思想是参照书籍： 一个键值表，其中每个条目给出使用键的位置。 目的：通过键值有效地访问记录。 索引结构 索引是数据项k∗的集合。 每个数据条目k∗都包含足够的信息来检索（一个或多个）具有搜索键值k的记录。 编入索引 Indexing： 如何组织数据条目以支持对具有给定搜索键值的数据条目的有效检索？数据输入到底存储了什么？ 索引中数据条目的替代方案数据条目k∗是一个实际的数据记录（搜索键值k）。 一个数据条目（k, 消除）对（rid是数据的记录id，记录搜索键值k) 数据条目是（k, rid-list）对（rid-list是数据的记录ids，记录搜索键值k) 例如：(Xuemin Lin, page 12),(Xuemin Lin, page 100)和(Xuemin Lin, page 12, page 100) 聚集索引 Clustered Index群集：一个文件是由数据记录组织起来的，与某些索引中的数据条目的顺序相同或接近。通常，“file”的搜索键与“index”的搜索键相同。 未聚集索引 Unclustered Index 聚集索引维护起来相对昂贵。一个数据文件最多可以集中在一个搜索键上。 稠密索引与稀疏索引 Dense VS Sparse Indexes密集：对于每个搜索键值，它包含(至少)一个数据输入。 稀疏：其他情况 Q：我们可以建立一个非聚集的稀疏索引吗？ 一级和二级索引 Primary and Secondary Indexes一级：索引字段包括主键 二级：其他情况 一个文件最多只能有一个主索引 组合搜索键：搜索键包含多个字段","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（7）","slug":"UNSW/COMP9311/数据库基础课程笔记（7）","date":"2021-03-28T09:02:36.000Z","updated":"2021-05-05T16:45:26.870Z","comments":true,"path":"2021/03/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-7/","link":"","permalink":"http://szdf123.github.io/2021/03/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-7/","excerpt":"","text":"磁盘及文件记忆等级 等级 存储 特点 一级存储 主内存 访问快，昂贵 二级存储 磁盘 访问慢，略昂贵 三级存储 磁带、CD等 访问最慢，最便宜 磁盘磁盘的特点 盘片（platters）集 每个盘片=磁道（tracks）集 每个磁道=扇区sectors（块blocks）序列 传输单元：1扇区（例如512B, 1KB） 访问时间取决于磁头访问扇区所需耗时 通过块地址访问（p, t, s） DBMS只能对保存在内存中的数据进行操作。对于磁盘来说，如果需要读取一个块中的一条记录，则整个块都会被转移。 访问时间包括： 寻道时间（find the right track），例如10msec 旋转延迟（find the right sector），例如5msec 传输时间（read/write block），例如10μsec 随机访问主要受寻道时间和旋转延迟的控制 磁盘空间管理磁盘空间由磁盘空间管理器管理 提高磁盘访问：使用数据访问模式的知识，例如：两条记录经常一起访问，那就将它们放在同一个块（集群）例如：顺序扫描的记录，那么就将它们放置在同一轨道上的连续扇区 跟踪空闲块： 维护空闲块列表 使用位图 使用OS文件系统管理磁盘空间 扩展OS工具，但是 不依赖OS文件系统（保证可移植性和可伸缩性） 缓冲区管理缓冲区管理器 通过在主内存中维护一个缓冲池来管理磁盘和内存之间的通信 缓冲池（Buffer pool）=可以填满磁盘块数据副本的page slots（帧）集合 request_block操作先替换所有文件访问算法中的read block 如果块已经在缓冲池中： 不需要再读取这些数据直接在缓冲池复制（除非write-locked） 如果块还没有在缓冲池中： 需要从硬盘读取到一个空闲帧 如果没有空闲帧，需要使用缓冲区替换策略删除块 release_block函数表明块不再在使用，这意味着它是是好的移除候选项 对于每一帧，我们需要知道： 它目前是否正在使用 自加载后，它是否已经被修改（脏位） 有多少事务目前正在使用它（pin计数） （可能）时间戳为最近访问 request_block操作方法： 检查缓冲池，看它是否已经包含请求的块。如果没有，区块被引入如下：(a)选择要替换的帧，使用替换策略(b)如果选择的帧是脏的，写块到磁盘(c)将请求的页面读到现在空闲的缓冲区帧(并设置dirty= False和pinCount = 0) 固定包含请求块的框架（这只是意味着更新pin计数） 包含被请求块的帧的返回地址 release_block操作 方法： 减少指定页的pin计数。除非需要更换，否则没有实际效果。 write_block操作 方法： 更新池中包含的页面 设置脏数据dirty bit 注意：实际上不写入磁盘。 force_block操作通过写入磁盘来”提交“。 缓冲区替换策略有几种常用的方案： 最少最近使用(LRU) 释放没有使用最长时间的框架 直觉上吸引人，但可能执行效果并不理想 先进先出（FIFO） 需要维护帧队列 当读取时进入队列尾部 最近使用(MRU)：释放最近使用的帧 随机 没有保证比其他更好。对于DBMS，我们可以更好地预测访问。 记录格式记录存储在固定长度的块中。 固定长度fixed-length：每个字段都有一个固定的长度和字段的数量。 便于块内空间管理 可能浪费空间 可变长度：某些字段的长度可变 复杂的块内空间管理 不浪费（太多）空间 记录格式信息： 最好存储在数据字典 字典内存驻留 固定长度固定长度记录的编码方案： 长度+偏移量存储在头文件中 可变长度可变长度记录的编码方案： 每个字段以长度为前缀[4] xxxx [10]Neil Young [8]musicians [4] xxxx 字段以分隔符结尾33357462/Neil Young/ musicians /0277/ 偏移数组 块（页面）格式块是槽slots的集合。 每个插槽包含一条记录。 记录由rid =&lt;页面id，槽位号&gt;标识。 固定长度的记录对于固定长度的记录，使用记录槽： 插入：占用第一个空闲槽；打包更有效率。 删除：(a)需要压缩，(b)标记为0；打开更有效率。 变长记录对于变长记录，请使用槽位目录。 处理块内的空闲空间的可能性： 压缩（一个区域的空闲空间） 碎片（分布式空闲空间） 在实践中，可能使用一个组合： 通常碎片化（维护成本低） 在需要时压缩（例如记录不适合） 压实自由空间： 注意：“指针”是在块内实现的偏移量；允许块被加载到内存的任何地方。 分散的自由空间： 溢出一些文件结构（例如哈希）将记录分配给特定的块。如果指定的块已经满了怎么办？需要一个地方来存储“多余的”记录。 介绍溢出块的概念： 位于主文件外部（不破坏主文件的块序列） 连接到原始块 可能有溢出块的“链” 新块总是追加到文件中 一个单独文件中的溢出块： 注意：”指针“是作为文件偏移量实现的 不适合通过偏移（例如哈希）访问块 文件一个文件由几个数据块组成。 堆文件（Heap Files）：无序的页面（块）。 维护阻塞信息的两种选择： 链接页面列表 页面目录 链接页面列表将堆文件维护为双向链接的页面列表。 缺点：如果记录的长度是可变的，那么所有的页面实际上都在空闲的记录列表中。为了插入一个记录，可能要检索和检查几页。 页面的目录维护页面目录。 每个目录条目标识堆文件中的一个页（或一系列页）。 每个条目还保留一个位来指示对应的页面是否有空闲空间。","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础大作业记录（1）","slug":"UNSW/COMP9311/数据库基础大作业记录（1）","date":"2021-03-23T13:49:51.000Z","updated":"2021-05-11T03:30:56.448Z","comments":true,"path":"2021/03/23/unsw/comp9311/shu-ju-ku-ji-chu-da-zuo-ye-ji-lu-1/","link":"","permalink":"http://szdf123.github.io/2021/03/23/unsw/comp9311/shu-ju-ku-ji-chu-da-zuo-ye-ji-lu-1/","excerpt":"","text":"目标 这个项目的目的是给你练习 阅读和理解一个中等规模的关系模式(MyMyUNSW) 实现SQL查询和视图，以满足信息请求 实现PLpgSQL函数来帮助满足对信息的请求 如何做这个项目 仔细、完整地阅读本说明书 熟悉数据库模式（描述、SQL模式、摘要） 为这个项目创建一个私有目录，并放置一个projec1.sql的副本 当定义解决方案时必须使用proj1中的create语句 查看作为检查的一部分加载的expected_qX表中的预期输出check.sql文件 解决下面的每个问题，并将你完成的解决方案放入proj1.sql中 检查您的解决方案是正确的，通过验证与示例输出和使用check_qX()函数 测试你的proj1.sql文件，可以毫无错误地加载到只包含原始文件的数据库中MyMyUNSW数据 仔细检查你的proj1.sql文件加载到仅包含原始MyMyUNSW数据 通过moodle提交项目 对于每个问题，您必须在120秒内在Grieg服务器上输出结果 介绍所有的大学都需要一个重要的信息基础设施来管理他们的事务。这通常需要安装一个大型的商业DBMS。UNSW的学生信息系统位于MyUNSW网站的后面。MyUNSW提供了一个与PeopleSoft企业管理系统的接口，该系统具有底层Oracle数据库。这个后端系统(Peoplesoft/Oracle)通常称为NSS。 UNSW已经在MyUNSW/NSS系统上花了相当多的钱(8000多万美元)，而且它似乎很好地处理了大部分的教育管理工作。大多数人都抱怨MyUNSW的界面质量，但该系统确实允许你在线完成最基本的注册任务。 尽管MyUNSW/NSS取得了成功，但仍然存在一些不足，包括： 没有课程或课程报名等候名单 没有代表学位项目结构 与新南威尔士大学在线手册的整合很差 第一点很不方便，因为这意味着注册一门完整的课程或课程变成了一系列反复尝试的过程。想要注册这门可的人只能希望在注册之前有人退出，而且没有其他人抢了这个空位。 第二点限制了MyUNSW/NSS在三个重要操作，而这些操作原本对学生管理他们的注册非常有帮助： 了解他们在学位课程中已经取得了多大的进步，还有哪些是需要完成的 查一查他们下学期的注册项目（例如，弄一份可供选择的课程列表） 确定他们何时完成了学位课程的所有要求并有资格毕业 NSS包含有关学生、课程、课程、先决条件、配额等数据，但不包含任何UNSW学位项目结构的表示。如果在NSS数据库中没有这些信息，以上三种情况都是不可能做到的。因此，在2007年，COMP9311班设计了一个数据模型，可以代表UNSW学位课程的要求和规则。这是建立在表示所有核心NSS数据（学生、工作人员、课程、类等）的现有模式之上的。增强的数据模型被命名为MyMyUNSW模式。 MyMyUNSW数据库包括包括NSS功能的信息，UNSW在线手册和CATS（房间分配）数据库。MyMyUNSW数据模型、模式和数据库在单独的文档中描述。 设置要在Grieg服务器下安装MyMyUNSW数据库，只需运行以下两个命令： $ createdb proj1 $ psql proj1 -f /home/cs9311/web/21T1/proj/proj1/mymyunsw.dump 如果你已经在template1数据库中设置了PLpgSQL，当数据库开始加载时，你会得到一条错误消息: psql:mymyunsw.dump:NN: ERROR: language \"plpgsql\" already exists 您可以忽略此错误消息，但是在加载期间发生的任何其他错误都需要进行调查。 如果一切正常，load输出应该有很多信息。 除了可能的与plpgsql相关的消息外，您应该不会得到错误消息。在Grieg上加载数据库的时间应该少于60秒，前提是Grieg负载不重。(如果您直到最后一刻才开始进行项目，那么在Grieg上加载数据库将会相当缓慢，从而进一步推迟您的工作。解决方案：至少现在就加载数据库，即使您一段时间后不要开始使用它。转储文件大小为50MB；把它复制到你的主目录或/srvr目录下不是一个好主意)。 如果您的PostgreSQL服务器在Grieg上有其他大型数据库，或者您的/srvr/you/目录下有大型文件，那么您可能会耗尽Grieg磁盘配额。特别是，您将无法在Grieg服务器下存储MyMyUNSW数据库的两个副本。解决方案:在加载MyMyUNSW数据库之前删除所有现有的数据库。 如果您在家里运行PostgreSQL，您可以下载这些文件：ymyunsw.dump，proj1.sql来帮助您开始。一旦check.sql可用，你可以去拿单独使用。 一开始要做的一件事是对实际存在的数据有一个感觉。这可以帮助你更好地理解模式，并使练习的描述更容易理解。看看这个模式。问一些查询。现在就做。 例如： $ psql proj1 ... PostgreSQL welcome stuff ... proj1=# \\d ... look at the schema ... proj1=# select * from Students; ... look at the Students table ... proj1=# select p.unswid,p.name from People p join Students s on (p.id=s.id); ... look at the names and UNSW ids of all students ... proj1=# select p.unswid,p.name,s.phone from People p join Staff s on (p.id=s.id); ... look at the names, staff ids, and phone #s of all staff ... proj1=# select count(*) from Course_Enrolments; ... how many course enrolments records ... proj1=# select * from dbpop(); ... how many records in all tables ... proj1=# ... etc. etc. etc. proj1=# \\q 您将发现一些表（例如，书籍、需求等）目前没有填充；这个项目不需要他们的内容。 入门总结要为这个项目设置数据库，按提供的顺序运行以下命令： $ createdb proj1 $ psql proj1 -f /home/cs9311/web/21T1/proj/proj1/mymyunsw.dump $ psql proj1 ... run some checks to make sure the database is ok $ mkdir Project1Directory ... make a working directory for Project 1 $ cp /home/cs9311/web/21T1/proj/proj1/proj1.sql Project1Directory 在开始做练习之前，请先阅读以下内容： 分数反映了每个问题的相对难度/长度 使用提供的proj1.sql模板文件来完成任务 可以根据需要定义更多的附加函数和视图，前提是(a)在保留proj1.sql中的定义，(b)您可以按照每个问题中的要求来定义允许定义的内容 确保你的查询可以在MyMyUNSW模式的任何实例上工作；不要定制它们只在这个数据库上工作；最后可能在一个不同的实例上测试 不要假设任何查询都只返回单个结果;即使用“大多数”或“最大”来表示，数据库中也可能有两个或两个以上同样“大”的实例 查询人名时，使用Person.name字段;它的作用就是产生可显示的名称 当查询要求学生ID时，使用people.unswid字段；people.id字段是一个内部数字键，数据库之外的任何人都不感兴趣 除非在练习中特别提到，否则结果中元组的顺序无关紧要；它可以随时调整使用顺序。事实上，我们的check.sql将自动对结果进行排序以进行比较 结果元组中字段的精确格式确实很重要，例如，如果你使用to_char将一个数字转换为字符串，它可能不再匹配包含相同值的数字字段，即使这两个字段看起来很相似 分阶段开发查询；在最终视图/函数的查询中使用它们之前，请确保您正在使用的任何子查询或子连接实际工作正确 您可以定义SQL视图来回答以下问题。 如果你遇到类似“不能改变视图列的名称”这样的错误，你可以使用命令drop view VIEWNAME cascade删除你刚刚创建的视图，然后重新创建你的新视图。 每个问题都附有对所需内容的简要描述。如果您想要预期输出的完整细节，请查看检查脚本中提供的expected_qX表。 任务为了方便半自动标记，请按照每个问题中定义的方式将所有SQL解决方案打包到视图中(参见我们提供的解决方案模板的详细信息)。 $ dropdb proj1 ... remove any existing DB $ createdb proj1 ... create an empty database $ psql proj1 -f /home/cs9311/web/21T1/proj/proj1/mymyunsw.dump ... load the MyMyUNSW schema and data $ psql proj1 -f /home/cs9311/web/21T1/proj/proj1/check.sql ... load the checking code $ psql proj1 -f proj1.sql ... load your solution (replace by proj2.sql here) $ psql proj1 proj1=# select check_q1(); … check your solution to question1 (replace by check_q13() here) … proj1=# select check_q6(); … check your solution to question6 … proj1=# select check_q12(); … check your solution to question13 proj1=# select check_all(); … check all your solutions","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"离散数学课程笔记-综合","slug":"UNSW/COMP9020/离散数学课程笔记-综合","date":"2021-03-22T05:46:15.000Z","updated":"2021-04-01T11:25:06.442Z","comments":true,"path":"2021/03/22/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-zong-he/","link":"","permalink":"http://szdf123.github.io/2021/03/22/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-zong-he/","excerpt":"","text":"数学符号正整数$\\mathbb{P}$ 自然数$\\N$ 整数$\\Z$ 有理数$\\Q$ 实数$\\R$ $\\mathbb{P} \\subset \\N \\subset \\Z \\subset \\Q \\subset \\R$ $\\lfloor\\pi \\rfloor=3=3\\lceil e \\rceil$ $\\lfloor -x \\rfloor=-\\lceil x \\rceil \\quad \\lceil x \\rceil = - \\lfloor -x \\rfloor$ 对于$m \\le n$，其中有$\\lfloor \\frac{n}{k}\\rfloor- \\lfloor \\frac{m-1}{k}\\rfloor$个$k$ $m|n$，意思是n可以被m整除，除数divisor，即$n=k\\cdot m $；相对的表示为$m\\not|\\ n$ $r=n\\mod m\\Rightarrow n=k\\cdot m + r(0\\le r&lt; m)$ 质数prime，互质relatively prime，最大公约数$gcd (m,n)$，最小公倍数$lcm (m,n)$ $gcd (m,n) \\cdot lcm(m,n) = |m|\\cdot |n|$ $gcd(0,n)=|n|(n\\neq 0)$ $gcd(m,n)=\\begin{cases} m &amp; (m=n)\\\\ gcd(m-n,n) &amp; (m&gt;n)\\\\ gcd(m,n-m) &amp; (m&lt;n)\\end{cases}$ 闭区间$[a,b]$，边开半闭区间$(a,b]，[a,b)$，开区间$(a,b)$ 对于$m\\le n$的整数，$[m,n]=\\{m,m+1,\\dots,n\\}\\quad |[m,n]|=n-m+1$ 集合定义：集合set，元素element，有限集，无限集，空集empty set $\\emptyset$，全集U 符号表示方法：集合$A,B,C$；元素$a,b,c$； 属于关系$a \\in A \\quad a \\not\\in A$ 表示方法：枚举法、叙述法、文氏图 基数Cardinality $|A|$：元素的个数 集合相等$A=B$，即其包含的元素完全相同 子集subset $B\\subseteq A \\quad B \\nsubseteq A$，真子集proper subset $B\\subset A \\quad B\\not\\subset A$ 证明集合相等：$A=B \\Leftrightarrow A\\subseteq B \\land B\\subseteq A$ 幂集(power set)：$Pow(A)$，$|Pow(X)|=2^{|X|}$ 并集Union $A\\cup B$，交集Intersection $A \\cap B$，补集$A^C$，差集$A\\setminus B$，对称差集$A\\oplus B\\overset{def}{=}(A\\setminus B)\\cup(B \\setminus A)$ 不相交disjoint $A \\cap B=\\emptyset$ 集合的运算 |A \\cup B|=|A|+|B|-|A\\cap B| \\\\ |A \\cup B|+ |A\\cap B|=|A|+|B| \\\\ |A \\setminus B|=|A|-|A\\cap B| \\\\ |A \\oplus B|=|A| + |B| -2|A\\cap B|等势$A\\sim B$，可数集合，不可数集合 文氏图Venn Diagrams 函数定义域dom f，值域ran f 单射1-1，满射onto，双射bijection 复合函数$(f\\circ g)(x)=g(f(x))$ 复合函数不满足交换律，但满足结合律 逆函数 词语word $\\Sigma$，空词empty word $\\lambda$，$\\Sigma^k\\ \\Sigma^0\\ \\Sigma^*\\ \\Sigma^+\\ \\Sigma^{\\le k}$ 命题逻辑定义：命题，真值T1F0，原子命题，复合命题，真值函数/命题公式，公式的解释，真值表 否定联结词$\\lnot$，合取联结词$\\land$，析取联结词$\\lor$，蕴含联结词$\\Rightarrow$，等价联结词$\\Leftrightarrow$ 否定式$\\lnot P$，合取式$P\\land Q$，析取式$P\\or Q$，蕴含式$P\\Rightarrow Q$，等价式$P \\Leftrightarrow Q$ $\\land \\or \\Leftrightarrow$具有对称性，$\\lnot \\rightarrow$没有对称性 永真公式（重言式），永假公式（矛盾式/不可满足公式），可满足公式 逻辑等价$G=H$，充要条件是$G\\Leftrightarrow H$ 简单析取式$P\\lor Q \\lor \\lnot R$，简单合取式$\\lnot P \\land Q \\land R$ 析取范式（DNF），合取范式（CNF），主范式 极小项和极大项 主范式求解定理： 求析取范式和合取范式 消除重复命题变元，矛盾式，重言式 缺少变元P可通过增加$\\land (\\lnot P \\lor P)$或$\\or (\\lnot P \\and P)$的方式补足 合并极小项和极大项，调整顺序 求公式$G=\\lnot (P \\Rightarrow Q) \\lor R$ 的主析取范式和主合取范式。 （析取范式看1，子项0取逆，合取范式看0，子项1取逆） （极大或有逆1，极小和有逆0） 推理定律–基本蕴涵关系 关系定义：序偶，笛卡尔积 笛卡尔积不一定满足交换律和结合律 对于有限集A，B，有$|A\\times B| = | B \\times A | = |A| \\times |B|$，同时，从A到B的不同关系共有$2^{|A|\\times |B|}$个 定义域dom（domain），值域ran（range），R的域fld（field） 关系的标识方法：图形表示，矩阵表示 关系矩阵（relation matrix），邻接矩阵（adjacency matrix） 布尔矩阵的并和交运算，积运算 关系的并交差补运算、逆运算 关系可以具有的性质：自反性（Reflexivity）反自反性（Antireflexivity）对称性（Symmetry）反对称性（Antisymmetry）传递性（Transitivity） 等价关系：自反(R)、对称(S)、传递(T) 等价类，如[0]；商集A/R 偏序关系：自反(R)、反对称(AS)、传递(T) 哈斯图，最大元，最小元，极大元，极小元 上界，上确界、下界，下确界 拟序关系：反自反(AR)，传递(T) 全序关系，全序集，良序关系，良序集 图图G(V,E)，无向图，有向图，混合图 环路，孤立结点","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（6）","slug":"UNSW/COMP9020/离散数学课程笔记（6）","date":"2021-03-21T09:17:58.000Z","updated":"2021-05-03T09:37:44.369Z","comments":true,"path":"2021/03/21/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-6/","link":"","permalink":"http://szdf123.github.io/2021/03/21/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-6/","excerpt":"","text":"图 Graphs图（Graph）：用$G(V,E)$表示，其中，$V$为顶点的集合，$E$为边的集合，且每一条边都与点$\\{x_e,y_e\\}$相关。 无向图（Undirected Graph）：线的起终点没有方向 有方向的边称作弧（arc），它与有序对$(x_a,y_a)$相关。 有向图（Directed Graph）由点和弧构成。 当$x=y$时，边$\\{x,y\\}$与弧$(x,y)$组成环（loops）。一般的，我们仅讨论无环图。 有限集合的二元关系对应于有向图。对称关系对应于无向图。 计算机科学中的图 WWW（万维网）可以看做由网页作为节点，超链接作为弧组成的超大图 一段程序可能的状态可以构成一个有向图 地图可以看做一个无向图，其中每个国家的边界由边表示 顶点的度 Vertex Degrees图$G$中顶点$v$的度数（Degree）定义为：$deg(v)=|\\{w\\in V(G):(v,w)\\in E(G)\\}|$，即与该顶点连接的边的数目 正则图（Regular graph）：所有顶点的度数相同 度数序列（Degree sequence）：$D_0,D_1,D_2,…,D_k$，其中度数为$i$的顶点的数量 $\\sum_{v\\in V}deg(v)=2\\cdot|E(G)|$，即顶点的度数和为2倍的边的数量，因此，顶点的度数和一定为偶数。也就是说，顶点度数的集合中，只能有偶数个基数顶点度数。 通路 Paths通路（Path）是图中连接起来的边，其中边和点都不必须完全不同 通路的长度（Length）即边的数量：$n$ 长度为r的子通路：$(e_m,e_{m+1},…,e_{m+r-1})$ 长度为0的通路：单个顶点$v_0$ 连通图（Connected graph）：每个顶点都有通路连接 图$G$的连接组成component：G中没有比其更大的连通子图的连通子图 回路 Cycles简单通路（simple path）：对路径中的每个边，$e_i\\neq e_j(i\\neq j)$ 闭合通路（closed path）：$v_0=v_n$ 回路（cycles）：闭合简单路径，除了$v_0=v_n$以外，所有$v_i$均不相同 非回路通路（Acyclic path）：对于路径中的所有的顶点，$v_i\\neq v_j(i\\neq j)$ 注： 当且仅当移除路径中的一条边以后，路径变为非回路通路，那么这个通路就是回路$C_n=(e_1,…,e_n)$ 当边和顶点数相同，且没有恰当的子通路时，C是一个回路 恰当的子通路（proper subpath）：没有环存在的子通路 比如，如果$|E(G)|=|V(G)|$，每个顶点都包含一个环时，那这就不是个回路 树 Trees非回路图（Acyclic graph）：不包含回路的图 树（Tree）：连接起来的非回路图 一个图当且仅当是森林时，是非回路图 森林（Forest）：一系列不连接的树 图$G$是树，等价于以下描述： $G$是非回路的，且$|V(G)|=|E(G)|+1$ 每两个顶点之间只有一条精确的通路 $G$是连通的，但如果移除任意一条边的话，就变成非连通图 $G$是非回路的，但如果在现有的顶点中增加任意一条边，就有回路出现 对于$n$个顶点的树，$n\\ge 3$，则： $|E(T)|$并不永远等于$n$ 最少一个顶点的度数为2 最少有两个顶点，$deg(v_1)=deg(v_2)$ 有根的树叫根树（Rooted tree），这指定了数的起源：总是从根开始，从父节点到子节点。这也定义了节点的层级，即离根的距离。 根树的高度（Height）是最大顶点层级。 有向非环图DAG（directed, acyclic graph） 图同构 Graph Isomorphisms当$\\iota :V(G)\\rightarrow V(H)$是1-1映射且满射（或叫双射），当且仅当$\\{\\iota(x),\\iota(y)\\}\\in E(H)$时，$\\{x,y\\}\\in E(G)$，那么$\\iota : G\\rightarrow H$是图同构（graph isomorphism） 当两个图之间存在至少一个图同构时，他们被称为同构图。 具有2、3、4、5个顶点的非同构树为： 自同构和不对称图 Automorphisms and Asymmetric Graphs同构图与自身相同的图称为自同构图Automorphism 每个图都至少包含平凡自同构trivial automorphism 没有非平凡自同构图 non-trivial automorphisms 的图叫做不对称图 asymmetric。 最小的非平凡不对称图有6个顶点： 类似的图一共有8个。 遍历边欧拉通路（Euler path）：包含图G中每条边1次的通路 欧拉回路（Euler circuit）：闭合欧拉通路 欧拉通路和欧拉回路的特性： 对于每个顶点$v\\in V(G)$，当且仅当$deg(V)$是偶数时，连通图G有欧拉回路。 当且仅当或者有欧拉回路，或者包含2个基数度顶点的连通图G有欧拉通路。 对于有环的图，这两个特性仍然适用 对于有向图，欧拉回路存在的条件是$\\forall v \\in V(G)\\ indeg(v)=outdeg(v)$ 特殊的图完全图（Complete graph）$K_n$，有$n$个顶点，全部相互连接，含有$\\frac{n(n-1)}{2}$条边 完全双边图（Complete bipartite graph）$K_{n,n}$，有$m+n$个顶点，分割为两个不连接的集合，一个包含n个顶点，另一个包含m个顶点。每个顶点都与另一组顶点连接，每组内的顶点相互不连接。其边的数量为$m\\cdot n$ 完全k部图（Complete k-partite graph）$K_{m_1,…,m_k}$ 包含$m_1 + … + m_k$个顶点，分割成k个不相接的集合，分别为顶点$m_1,m_2…$。所有来自不同集合顶点相连，来自相同集合的顶点不相连。其边数为$\\sum_{i&lt;j}m_im_j=\\frac{1}{2}\\sum_{i\\neq j}m_im_j$ 这些图生成完全图$K_n=\\underbrace{K_1,…,1}_n$ 当$n$为基数时，$K_n$有欧拉回路 当m和n都为偶数时，$K_{m,n}$有欧拉回路 当$p+q,p+r,q+r$全部为偶数时，或者说$p,q,r$同基或同偶时，$K_{p,q,r}$有欧拉回路 顶点遍历哈密顿路径（Hamiltonian path ）：访问每一个顶点一次 哈密顿回路（Hamiltonian circuit）：除了最后一个顶点，访问每一个顶点一次，最后回到初始顶点 找到这个回路或证明它不存在很难——最坏的情况是NP完全问题 这两种情况下，存在哈密顿回路：对于$m\\ge3$，$K_m$；如果$m=n且m,n\\ge2时，K_{m,n}$ 对于$K_{n,n}$图，一共有$c=2(n!)^2$个哈密顿回路。 没有什么明显的方法可以确定非平凡的图没有哈密顿回路。 相反，如果给定一个回路，就可以立即验证它是否是哈密顿回路。 着色 Colouring非正式用法：为每个顶点（例如电力网络或交通网络中的一个节点）指定一个“颜色”，使由一条边连接的顶点具有不同的颜色。 正式：映射$c： V→[1…n]$，对每个$e = {v,w}\\in E$ c(v)\\neq c(w)足以实现这种映射的最小$n$称为图$G = (E, V)$的色数，用$χ(G)$表示。 色数的性质 Properties of the Chromatic Numberχ(K_n) = n如果$G$有$n$个顶点，且$χ(G) = n$，那么$G = K_n$ 如果$χ(G) = 1$那么$G$是完全不连通的，它有0条边 如果$χ(G) = 2\\ G$是二部图 对于任意树$χ(T) = 2$ 对于任何循环$C_n$，它的色数取决于$n$的奇偶性，对于当$n$为偶数时，$χ(C_n) = 2$，而当$n$为奇数时，$χ(C_n) = 3$ 团 Cliques图$(V’,E’)$是图$(V,E)$的子集，其中$V’ \\subseteq V$且$E’ \\subseteq E$ 团（clique）是G的完全子图。含有k个节点的团被称为k-团 最大的团数被称为图的团数，记作$\\kappa(G)$ $\\chi(G)\\ge\\kappa(G)$ 然而，这是唯一的限制。对于任意给定的$k$，都存在$κ(G) = k$的图，而$χ(G)$可以任意大。 $\\kappa(K_n)=n,\\kappa(K_{m,n})=2,\\kappa(K_{m_1,…,m_r})=r$ 如果$\\kappa(G)=1$，那么$G$是完全非连接的 对于树$\\kappa(T)=2$ 对于回路$C_n$，$\\kappa(C_3)=3$，$\\kappa(C_4)=\\kappa(C_5)=…=2$ $\\kappa(G)$与$\\chi(G)$的差异是显然的，仅当$\\kappa(G)=2$，这不意味着G是双边的。例如，环路$C_n$对每个基数n有$\\chi(C_n)=3$ 对于无向图，有$max_{v\\in V}deg(v)+1\\ge \\chi(G) \\ge \\kappa(G)$ 平面图形 Planar Graphs如果一个图的各边不相交而能嵌入一个平面中，则该图是平面的（Planar）。 定理：如果图形是平面的，它可以嵌入一个平面（无自交），使其所有边都是直线。 两个最小的非平面图为： 如果图$G$作为子图包含一个非平面图，则$G$本身是非平面的。 一个图的次要部分是指通过反复删除顶点、删除边和合并相邻顶点而得到的任何图。 如果一个图包含$K_5$或$K_{3,3}$为副图，它就是非平面的。 $n\\ge5$时，$K_n$是非平面的。 当$m≥3$且$n≥3$时，$K_{m,n}$是非平面的。 所有的$K_{m,1}$，$K_{m,2}$ 都是平面的。同样的 ，对于k部图，$K_{2,2,2}$，$K_{1,1,m}$是平面图。 摘要图Graphs, 树trees, 顶点的度vertex degree, 连通图connected graphs, 连通组成connected components, 通路paths, 回路cycles $C_n$ 图同构Graph isomorphisms, 自同构automorphisms 特殊图Special graphs: 完全图complete $K_n$, 完全双边图complete bi-, k部图k-partite $K_{m_1,\\cdots,m_k}$ 遍历Traversals 欧拉通路和回路Euler paths and circuits (边遍历edge traversal) 汉密尔顿通路和回路Hamiltonian paths and circuits (点遍历vertex traversal) 图形特点Graph properties 着色数chromatic number $(G)$, 团数clique number $κ(G)$, 平面化planarity 参考资料 Textbook (R &amp; W) - Ch. 3, Sec. 3.2; Ch. 6. Sec. 6.1-6.5","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础实践记录（3）","slug":"UNSW/COMP9311/数据库基础实践记录（3）","date":"2021-03-18T12:54:33.000Z","updated":"2021-05-11T03:31:31.361Z","comments":true,"path":"2021/03/18/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-3/","link":"","permalink":"http://szdf123.github.io/2021/03/18/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-3/","excerpt":"","text":"实践目标 对一个相对简单的模式进行SQL查询 使用SQL聚合和分组操作符 编写SQL视图定义 PostgreSQL用户手册 背景Web服务器的访问日志可能包含以下关键信息： 发出页面请求的主机的IP地址 提出请求的确切日期/时间 请求的URL（相对于服务器文档根目录的路径名） 获取操作的状态（例如，200 =成功，404 =未找到） 传输到请求者的数据的字节数 下面是一段日志样例： 60.240.97.148 - - [01/Mar/2005:00:00:00 +1100] \"GET /webcms/intro/view_intro.phtml?cid=845&amp;color=%23DEB887 HTTP/1.1\" 200 342 60.240.97.148 - - [01/Mar/2005:00:00:03 +1100] \"GET /webcms/notice/view_notice.phtml?cid=845&amp;color=%23DEB887&amp;state=view HTTP/1.1\" 200 3642 60.229.57.188 - - [01/Mar/2005:00:00:06 +1100] \"GET /webcms/creation/index.phtml?tid=000000124004 HTTP/1.1\" 200 881 60.229.57.188 - - [01/Mar/2005:00:00:06 +1100] \"GET /webcms/login/invalid.phtml HTTP/1.1\" 200 1401 60.229.57.188 - - [01/Mar/2005:00:00:07 +1100] \"GET /webcms/login/login.phtml HTTP/1.1\" 200 4883 60.229.57.188 - - [01/Mar/2005:00:00:09 +1100] \"POST /webcms/login/log_in.phtml HTTP/1.1\" 302 5 60.229.57.188 - - [01/Mar/2005:00:00:09 +1100] \"GET /webcms/creation/index.phtml?tid=000000124013 HTTP/1.1\" 200 720 60.229.57.188 - - [01/Mar/2005:00:00:09 +1100] \"GET /webcms/creation/menu.phtml?tid=000000124013 HTTP/1.1\" 200 1898 60.229.57.188 - - [01/Mar/2005:00:00:10 +1100] \"GET /webcms/creation/welcome.phtml?tid=000000124013 HTTP/1.1\" 200 5487 60.229.57.188 - - [01/Mar/2005:00:00:12 +1100] \"GET /webcms/course/index.phtml?tid=000000124013&amp;cid=860 HTTP/1.1\" 200 806 一些基于Web的应用程序，如WebCMS，在用户与Web服务器的交互中引入了会话（Session）的概念。用户的所有操作信息会记录至日志中，因此，可以通过查找使用相同会话标识符的所有页面访问来跟踪单个用户对系统的访问。 假设我们想要找出人们在使用WebCMS的会话中所做的典型事情。可以猜到他们做了一些事：他们会查看布告栏，看看有没有新的课堂讲稿，阅读现有的实践练习，等等。这些信息可以帮助我们了解用户习惯，调优系统性能等等。 为了方便，可以先把数据都加载到关系数据库系统中，所以第一步是将包含关键信息的Web日志数据导入到关系模式中。由此，可以定义一个数据库模式来表示来自WebCMS web日志的数据： 各种主机的IP地址和名称 关于使用WebCMS的每个会话的信息，包括它来自哪个主机，以及用户是否实际通过WebCMS登出页面登出（如果他们不登出，他们的会话最终会超时） 每个单独页面访问的详细信息，包括脚本的名称、参数、访问时间和访问所涉及的会话 使用如下ER图： 将此图转换为关系模式为： create table Hosts ( id integer, ipaddr varchar(20) unique, hostname varchar(100), primary key (id) ); create table Sessions ( id int, host integer, complete boolean, primary key (id), foreign key (host) references Hosts(id) ); create table Accesses ( session int, seq int, course int, page varchar(200), params varchar(200), accTime timestamp, nbytes integer, primary key (session,seq), foreign key (session) references Sessions(id) ); 先已将某服务3天的日志准备好，同时也转换为了SQL文件。每个文件里现在都包含了大量的插入语句。 -rw-r--r-- 1 YOU YOU 5568874 31 Mar 16:58 Accesses.sql -rw-r--r-- 1 YOU YOU 172536 31 Mar 16:09 Hosts.sql -rw-r--r-- 1 YOU YOU 193407 31 Mar 21:03 Sessions.sql 这些文件比较大，一般不会存储在本地，或者服务器的根目录下。 本次练习中，可以把他们放在自己的/srvr/YOU/目录下。 需要注意，自己的目录空间也是有限的，当出现磁盘不足提示时，就需要自己清理一些之前的无用文件。 构建数据库表结构的模式副本和模板文件模板文件也已经准备好： -rw-r--r-- 1 YOU YOU 657 31 Mar 16:10 schema.sql -rw-r--r-- 1 YOU YOU 2243 31 Mar 16:11 weblog.sql 下载好这个文件后，为这次练习创建一个单独的目录，然后使用此命令解压文件： unzip weblog.zip 如果是在家练习，可以下载此文件：weblog.zip 设置PostgreSQL数据库通过以下命令可以建立一个PostgreSQL数据库： % createdb weblog CREATE DATABASE % psql weblog -f schema.sql ... should produce CREATE TABLE messages ... % psql weblog -f Hosts.sql ... should produce lots of INSERT messages ... % psql weblog -f Sessions.sql ... should produce lots of INSERT messages ... % psql weblog -f Accesses.sql ... should produce lots of INSERT messages ... 导入数据时，会显示大量的INSERT 0 1，其中0表示没有生成唯一ID，1表示插入了1条数据。 另外一种导入数据的方式为： % createdb weblog CREATE DATABASE % psql weblog psql (9.0.3) Type \"help\" for help. weblog=# \\i schema.sql CREATE TABLE CREATE TABLE CREATE TABLE weblog=# \\i Hosts.sql ... should produce lots of INSERT messages ... weblog=# \\i Sessions.sql ... should produce lots of INSERT messages ... weblog=# \\i Accesses.sql ... should produce lots of INSERT messages ... 如果在导入数据时，不想查看这样全部的INSERT信息，在Linux或Mac OS系统下，可以按如下方式操作： % createdb weblog CREATE DATABASE % psql weblog -f schema.sql ... should produce CREATE TABLE messages ... % (psql weblog -f Hosts.sql 2&gt;&amp;1) &gt; .errs ... INSERT messages are added to file .errs ... % (psql weblog -f Sessions.sql 2&gt;&amp;1) &gt;&gt; .errs ... INSERT messages are added to file .errs ... % (psql weblog -f Accesses.sql 2&gt;&amp;1) &gt;&gt; .errs ... INSERT messages are added to file .errs ... 其中，&gt;符号表示新增文件，&gt;&gt;符号表示追加信息至文件末尾， 通过以下命令，可以在.errs文件中查找ERROR信息 grep ERROR .errs 当全部数据载入完毕后，通过psql进行检查： % psql weblog psql (9.0.3) Type \"help\" for help. weblog=# \\d weblog=# select count(*) from hosts; weblog=# select count(*) from sessions; weblog=# select count(*) from accesses; 由于数据量较大，因此执行SQL语句查询时可能耗时过长。可以通过以下命令开启计时功能： \\timing 另外，当你第一次对新建立的表做查询时，可能会耗时较长；当再次查询时，速度会快很多。 练习从现在开始，你需要生成SQL语句来检索一些问题。为了简化操作，SQL模板文件可以使用。 PostgreSQL查询 注：参考答案文件见文末 问题1： 3月2日有多少次页面访问？ select count(*) from accesses where acctime &gt;= '2005-03-02 00:00:00' and acctime &lt;='2005-03-02 24:00:00'; 问题2：有多少次使用了留言板搜索工具?select count(*) from accesses where page like 'messageboard%' and params like '%=search%'; 问题3：在哪个Tuba lab machines上有不完整的session?select distinct h.hostname from Hosts h, Sessions s where h.hostname like 'tuba%cse.unsw.edu.au' and s.host=h.id and not s.complete ; 问题4：在页面访问中传输的min,avg,max字节数select min(nbytes),avg(nbytes)::integer,max(nbytes) from Accesses; 问题5：CSE主机会话数create or replace view CSEHosts as select * from Hosts where hostname like '%cse.unsw.edu.au'; select count(*) from Sessions s, CSEHosts c where s.host = c.id ; 问题6：非CSE主机会话数create or replace view nonCSEHosts as select * from Hosts where hostname not like '%cse.unsw.edu.au'; select count(*) from Sessions s, nonCSEHosts c where s.host = c.id ; 问题7：在最长的会话中有多少个页面访问（页面访问的次数）?create or replace view sessLength as select session,count(*) as length from Accesses group by session; select session,length from sessLength where length = (select max(length) from sessLength); 问题8：给出页面访问频率，并排序select page,count(*) from Accesses group by page order by count(*) desc ; 问题9：模块访问频率create or replace view ModuleAccess as select session, seq, substring(page from '^[^/]+') as module from Accesses; select module,count(*) from ModuleAccess group by module order by count(*) desc ; 问题10：没有页面访问的”会话“select id from Sessions s where not exists (select * from Accesses where session=s.id); 参考答案)","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（6）","slug":"UNSW/COMP9311/数据库基础课程笔记（6）","date":"2021-03-16T08:15:20.000Z","updated":"2021-03-17T14:29:10.661Z","comments":true,"path":"2021/03/16/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-6/","link":"","permalink":"http://szdf123.github.io/2021/03/16/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-6/","excerpt":"","text":"关系数据库设计通过分解关系设计，直到它们处于标准的形式，可以将异常从关系设计中移除。 关于分解，应该研究几个问题。 关系方案$R$的分解是一组关系方案$\\{R_1，…，R_n\\}$，使每个$i$符合$R_i \\subseteq R$，且$\\cup_{i=1}^{n}R_i=R$ 注意，在一个分解${R_1，…R_n}$中，每一对$R_i$和$R_j$的交集不一为空。 例： $R=\\{A,B,C,D,E\\},R_1=\\{A,B\\},R_2=\\{A,C\\},R_3=\\{C,D,E\\}$ 朴素分解：每个关系只有一个属性。 一个好的分解应该有以下两个特性。 定义：当$F^+ = G^+$时，FD的两个集合F和G等价。 给定一个分解$R$为$\\{R_1, . . . ,R_n\\}$ F_i=\\{X\\rightarrow Y: X \\rightarrow Y \\in F \\& X \\in R_i,Y\\in R_i\\}分解$R\\{R_1，…R_n\\}$，使其对$F$保持依赖 F^+=(\\cup_{i=1}^{i=n}F_i)^+例1： 设$F = \\{ A \\rightarrow BC, D \\rightarrow EG, M \\rightarrow A \\}, R = (A, B, C, D, E, G, M)$ 1） 给定$R_1=\\{A,B,C,M\\}$，$R_2=\\{C,D,E,G\\}$， $F_1 = \\{A \\rightarrow BC, M \\rightarrow A \\}$，$F_2 = \\{ D\\rightarrow EG\\}$ $F=F_1 \\cup F_2$，因此，依赖保留 2）假设$F’=F \\cup \\{M \\rightarrow D\\}$。 $R_1$和$R_2$与1）相同，$F_1$和$F_2$也与1）相同。 我们需要确认$M\\rightarrow D$是否可以由$F_1\\cup F_2$推出。 当$M^+ |_{F_1 \\cup F_2}=\\{M,A,B,C \\}$，$M \\rightarrow D$不能由$F_1 \\cup F_2$推出 因此，$R_1$和$R_2$没有保留$F’$的依赖关系 3）$F’’ =\\{ A \\rightarrow BC, D \\rightarrow EG, M \\rightarrow A , M\\rightarrow C, C\\rightarrow D, M\\rightarrow D\\} $ $F_1 = \\{A \\rightarrow BC, M\\rightarrow A, M\\rightarrow C\\}, F2 = \\{D\\rightarrow EG, C\\rightarrow D\\}$ 可以证明$M\\rightarrow D$可以由$F_1$和$F_2$推出 由此，$F’’^+ = (F_1 \\cup F_2)^+$ 因此，$R_1$和$R_2$对$F’’$保持依赖关系 无损连接分解分解的第二个必要属性： 如果对于每个满足F的关系实例r，一个分解$R\\{R_1，…，R_n\\}$是对FD的集合F的无损连接分解（lossless join）： r=\\pi R_1(r)\\Join\\dots\\Join\\pi R_n(r)如果$r\\subset \\pi R_1(r)\\Join\\dots\\Join\\pi R_n(r)$，那么分解是有损的（lossy）。 例2： 假设需要分解以下关系： 与依赖关系 $\\{Name→Department, Name→Advisor, Advisor→Department\\}$ 将上表分为两个关系： 如果我们把这些分解的关系连接起来，则有： 这与原始关系不同(添加了带有*标记的元组)。因此分解是有损的（lossy）。 定理：如果普通属性$R_1\\cap R_2$构成$R_1$或$R_2$的超键，则$R$的分解$\\{R_1,R_2\\}$是无损的。 例3：给定$R(A,B,C)$和$F = \\{A→B\\}$。因为$A→B$是$R_1$上的FD，所以分解为$R_1(A,B)$和$R_2(A,C)$是无损的。所以一般属性$A$是$R_1$的键。 测试无损连接属性TEST_LJ算法 步骤1：创建一个矩阵$S$，每个元素$s_{i,j}∈S$对应关系$R_i$和属性$A_j$，使： s_{j,i} = a \\text{如果} A_i∈ R_j, \\text{否则} s_{j,i} = b步骤2：重复下面的过程，直到$S$没有变化，或者有一行完全由“a”符号组成 步骤2.1：对于每个$X→Y$，选择与$X$对应的元素取值为a的行 步骤2.2：在那些选择的行中（必须至少有两行），如果其中一个选择的行在Y上取值a，那么对应于Y的元素也取值a 如果一行完全由“a”值组成，则分解是无损的。 （该算法可以在E/N书中找到——算法15.2） 注意：本算法的正确性是基于此假设：Join属性不允许有空值。 当且仅当存在一个令$R_i\\cap M_{i-1}$形式的顺序，$R_i$或$M_{i-1}$的超键，其中$M_{i-1}$是$R_1, R_2,\\dots ,R_{i-1}$的结合 例1： $R = (A,B,C,D), F = \\{A→B,A →C,C → D\\}$ 令$R_1 = (A,B,C), R_2 = (C,D)$ 最初，$S$为 \\begin{array}{} & A & B & C & D \\\\ R_1 & a & a & a & b \\\\ R_2 & b & b & a & a \\end{array}注意，$S$的第1行和第2行与$\\{C\\}$一致，即$C→D$的左手边。因此，改变第一行的D值为a，匹配第2行中的值。 现在第一行完全是a，所以分解是无损的。 例2： $R = (A,B,C,D,E)$，$F = \\{AB →CD,A → E,C → D\\}$ 令$R_1 = (A,B,C), R_2 = (B,C,D), R_3 = (C,D,E)$ 例3： $R = (A,B,C,D,E,G)$，$F = {A → B,C → DE,AB → G}$ 令$R_1 = (A,B)$，$R_2 = (C,D,E)$，$R_3 = (A,C,G)$ 例4： $R = (A,B,C,D,E,G)$，$F = \\{AB →G, C → DE, A → B\\}$令$R_1 = (A,B)$，$R_2 = (C, D, E)$ ，$R_3 = (A,C,G)$ \\begin{array}{} & A & B & C & D & E & G\\\\ R_1 & a & a & b & b & b & b\\\\ R_2 & b & b & a & a & a & b\\\\ R_3 & a & b & a & b & b & a\\\\ & & & & & & \\\\ & & & & & & \\end{array} \\quad \\begin{array}{} & A & B & C & D & E & G & \\\\ R_1 & a & a & b & b & b & b & \\\\ R_2 & b & b & a & a & a & b & \\Leftarrow\\\\ R_3 & a & b & a & \\not{b} & \\not{b} & a & \\Leftarrow \\\\ & & & & \\uparrow & \\uparrow & & \\\\ & & & & a & a & & \\end{array} \\quad \\begin{array}{} & A & B & C & D & E & G & \\\\ R_1 & a & a & b & b & b & b & \\Leftarrow\\\\ R_2 & b & b & a & a & a & b & \\\\ R_3 & a & \\not{b} & a & a & a & a & \\Leftarrow \\\\ & & \\uparrow & & & & & \\\\ & & a & & & & & & \\end{array}无损分解为BCNFTO_BCNF算法： $D := {R_1,R_2, …R_n}$ While $\\exists a\\ R_i\\in D$，且$R_i$不在BCNF DO ​ 在$R_i$查找违反BCNF的$X\\rightarrow Y$ ​ 用$(R_i-Y)$和$(X \\cup Y)$替换$D$中的$R_i$ 例： $F=\\{A\\rightarrow B,A\\rightarrow C,A\\rightarrow D,C\\rightarrow E,E\\rightarrow D,C\\rightarrow G\\}$， $R_1=(C,D,E,G)$，$R_2=(A,B,C,D)$ $R_{11}=\\{C,E,G\\}$，$R_{12}=(E,D)$根据$E\\rightarrow D$ $R_{21}=(A,B,C)$，$R_{22}=(C,D)$由于$C\\rightarrow D$ 因为违反BCNF的$X\\rightarrow Y$并不总是在$F$中，主要的难点是验证$R_i$是否在BCNF中； 见下面的方法： 对每个$R_i$的子集$X$，计算$X^+$ 如果$ X^+|_{R_i}-X \\neq \\emptyset$且$R_i - X^+\\neq \\emptyset $ ,$X\\rightarrow (X^+|_{R_i}-X)$违反BCNF 这里，$ X^+|_{R_i}-X \\neq \\emptyset$意味着每个包含$X$的FD作为左半部分是平凡的（trivial） $R_i - X^+\\neq \\emptyset $意味着$X$是$R_i$的一个超键 例： 找到下面关系方案的BCNF分解 SHIPPING(Ship , Capacity , Date , Cargo , Value)$F$为： Ship$→$ Capacity {Ship , Date}$→$ Cargo {Cargo , Capacity}$→$ Value 根据$Ship→ Capacity$，将$SHIPPING$分解为 $R_1$(Ship, Date, Cargo, Value)​ 键：{Ship, Date}​ 在$F^+$中的非平凡FD违反BCNF： {Ship,Cargo\\}\\rightarrow$ Value 且 $R_2$(Ship,Capacity)​ 键：{Ship}​ $F^+$只有一个非平凡FD：Ship$\\rightarrow$ Capacity $R_1$不在BCNF所以必须将它再次分解为 $R_{11}$(Ship,Date,Cargo)​ 键：{Ship, Date}​ 在右侧，$F^+$上只有一个包含单一属性的非平凡FD：{Ship, Date}$\\rightarrow$ Cargo 且 $R_{12}$(Ship,Cargo,Value) 键：{Ship,Cargo}​ 在右侧$F^+$上只有一个具有单一属性的非平凡FD：{Ship,Cargo}$\\rightarrow$ Value 这在BCNF中，分解是无损的，但是没有保护依赖，FD{Capacity, Cargo}$\\rightarrow$ Value丢失了 或者，可以选择{Cargo, Capacity}$\\rightarrow$ Value，这可以得到： $R_1$ (Ship , Capacity , Date , Cargo)​ 键：{Ship,Date}​ $F^+$上一个非平凡FD违反BCNF： Ship$\\rightarrow$ Capacity 且 $R_2$(Cargo, Capacity, Value)​ 键：{Cargo, Capacity}​ 在右侧$F^+$上只有一个具有单一属性的非平凡FD：{Cargo,Capacity}$\\rightarrow$ Value​ 再根据Ship$\\rightarrow$ Capacity​ $R_{11}$ (Ship , Date , Cargo)​键：{Ship,Date\\}​ 在右侧$F^+$上只有一个具有单一属性的非平凡FD：{Ship , Date\\}$ \\rightarrow$ Cargo 且 $R_{12}$(Ship, Capacity)​ 键：{Ship} $F^+$上只有一个非平凡FD：Ship$ \\rightarrow$ Capacity 且 $R_{12}$(Ship,Capacity)​ 键：{Ship}​ $F^+$上只有一个非平凡FD：Ship $\\rightarrow$ Capacity 这符合BCNF，而且分解即无损又保留依赖关系。 然而，有一些关系方案分解为BCNF后，没有无损、保持依赖关系的方法。 无损和保持依赖分解为3NF具有任何$F$的任何$R$都可以无损且保持依赖关系的分解为3NF。 需要更多关于FD的定义。 FD的集合$F$是最小的，如果： 每个$F$上的FD$X \\rightarrow Y$是朴素的：$Y$由一个单一属性构成 每个$F$上的FD$X \\rightarrow Y$是左减的（left-reduced）：没有恰当的子集$Y \\subset X$使$X \\rightarrow A$可以被替换为$Y\\rightarrow A$，即，没有$Y \\subset X$使$((F-\\{X \\rightarrow A\\})\\cup \\{Y\\rightarrow A\\})^+ = F^+$ 没有FD可以被移除；没有F上的FD$X\\rightarrow A$使$(F=\\{X\\rightarrow A\\})^+=F^+$ 计算最小覆盖F是FD的集合。 F的最小覆盖（或规范覆盖）是FD的$F_{min}$的最小集合，使$F^+=F^+_{min}$ Min_Cover算法 输入：F的函数依赖集合 输出：F的最小覆盖 步骤1：减少右侧。使用算法减少右侧至F 步骤2：减少左侧。适应算法减少左侧至步骤2的输出 步骤3：减少多余的FD。使用算法减少多余的依赖至步骤2的输出。输出结果是最小覆盖。 这3个步骤的详细算法为： 算法减少右侧： 输入：$F$ 输出：右侧减少后的$F’$ 对每个FD$X\\rightarrow Y \\in F$，其中$Y=\\{A_1,A_2,…,A_k\\}$，使用所有$X\\rightarrow \\{A_i\\}(1\\leq i \\leq k)$来替换$X\\rightarrow Y$ 算法减少左侧： 输入：减少后的右侧$F$ 输出：右侧和左侧减少后的$F’$ 对每个$X \\rightarrow \\{A\\} \\in F$，其中$X=\\{A_i:1\\leq i \\leq K\\}$，按以下操作：使i从1到k，如果$A\\in (X-\\{A_I\\})^+$用$X-\\{A_i\\}$替换$X$ 算法减少多余： 输入：右侧和左侧减少后的$F$ 输出：$F$的最小覆盖$F’$ 对每个FD$X\\rightarrow \\{A\\}\\in F$，如果$A \\in X^+$对于$F-\\{X\\rightarrow \\{A\\}\\}$，将它从$F$移除 例： $R = (A, B, C, D, E, G)$$F = \\{A \\rightarrow BCD, B \\rightarrow CDE, AC \\rightarrow E\\}$ 步骤1： $F’ = \\{A \\rightarrow B, A\\rightarrow C, A \\rightarrow D, B\\rightarrow C, B\\rightarrow D, B\\rightarrow E, AC \\rightarrow E\\}$ 步骤2： $AC\\rightarrow E\\quad C^+=\\{C\\}$ 故由$F’$不能得出$C\\rightarrow E$ 因此，$AC\\rightarrow E$不能替换为$A \\rightarrow E$ $A^+=\\{A,B,C,D,E\\}$，故由$F’$可得出$A\\rightarrow E$ 因此，$AC\\rightarrow E$可以被替换为$A\\rightarrow E$ $F’’ = \\{A\\rightarrow B, A\\rightarrow C, A\\rightarrow D, A\\rightarrow E, B\\rightarrow C, B\\rightarrow D, B\\rightarrow E\\}$ 步骤3： $A^+|_{F’’ – \\{A \\rightarrow B\\}}= \\{A, C, D, E\\}$ 故，由$F’’=\\{A\\rightarrow B\\}$不能得出$A\\rightarrow B$ 所以$A\\rightarrow B$是多余的 $A^+|F’’ – {A \\rightarrow C}= \\{A, B, C, D, E\\}$，故$A\\rightarrow C$是多余的 故，将$A\\rightarrow C$从$F’’$移除，变为$F’’’$ 重复这个操作，可以得到$A\\rightarrow D$和$A \\rightarrow E$ 故，$F_{min}=\\{A\\rightarrow B, B\\rightarrow C, B\\rightarrow D, B\\rightarrow E\\}$ 3NF分解算法3NF的分解算法 求$F$的最小覆盖$F’$ 对每一个在$F’$中出现的$X$，做： 创建关系模式$X\\cup A_1 \\cup A_2 … \\cup A_m$，其中$X\\rightarrow \\{A_1\\},…,X\\rightarrow \\{A_m\\}$全部为左侧$X$的$F’$的依赖 如果关系模式均不包含$R$的键，建立一个对$R$键包含属性的多关系模式 例： $R = (A, B, C, D, E, G)$$F_{min}=\\{A\\rightarrow B, B\\rightarrow C, B\\rightarrow D, B\\rightarrow E\\}.$候选键： $(A, G)$$R_1 = (A, B), R_2 = (B, C, D, E)$$R_3 = (A, G)$ 例：还是从$SHIPPING$关系开始。函数依赖已经形成规范覆盖。 从$Ship→Capacity$，根据 $R_1(Ship,Capacity)$从$\\{Ship,Date\\} → Cargo, derive$$R_2(Ship , Date , Cargo)$从 $\\{Capacity,Cargo\\} → Value, derive$$R_3(Capacity , Cargo , Value)$没有未包含的属性和原始键$\\{Ship,Date\\}$包含在$R_2$ 例： 将该算法应用到前面给出的LOTS中 最小覆盖为$\\{ Property_Id→Lot_No, Property_Id → Area, \\{City,Lot_No\\} → Property_Id, Area → Price, Area → City, City → Tax_Rate \\}$ 这可以分解为：$R_1 (\\underline{Property_Id} , Lot_No , Area)$$R_2 (\\underline{City , Lot_No} , Property_Id)$$R_3 (\\underline{Area} , Price , City)$$R_4 (\\underline{City} , Tax_Rate)$ 小结数据冗余是不可取的，因为它们可能导致更新异常。 消除这种冗余的一种方法是在FD的指导下规范化设计。 BCNF根据FD删除所有多余属性，但不能总是找到保持依赖的分解 总是可以找到保持依赖关系，无损分解为3NF的方法，但一些冗余可能仍然存在 即使可以找到一个保留依赖关系的无损分解来删除所有冗余，出于效率的原因，可能也不可能删除所有冗余。","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（5）","slug":"UNSW/COMP9311/数据库基础课程笔记（5）","date":"2021-03-15T17:02:59.000Z","updated":"2021-05-05T14:45:53.615Z","comments":true,"path":"2021/03/16/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-5/","link":"","permalink":"http://szdf123.github.io/2021/03/16/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-5/","excerpt":"","text":"关系数据库的范式优秀数据库设计的标准 通过函数(或其他)依赖形式化 第一范式（1NF）要求属性值是原子的，并且是关系模型定义的一部分。 原子值：不允许多值属性、组合属性及其组合。 假设有如下表 可以转化为: 上图的表现存在以下缺点： 一个教授在一个部门的信息可能重复 如果教授不教授课程，那么教授和部门之间的关系将没有记录 一个课程由某个部门提供，这个信息可能重复 如果没有人选课，那么课程和部门的信息就没有对应记录 假设这些属性的FD是 F = \\{Prof →Fac\\_Dept, Course → Crs\\_Dept\\}注意，超键是一组这样的属性 S → \\{Prof, Course, Fac\\_Dept, Crs\\_Dept\\} ∈ F^+因此，这里唯一的候选关键字是$ \\{Prof, Course\\}$ 产生这些问题，是因为$Fac_Dept$只取决于$Prof$而不取决于$Course$；同样，$Crs_Dept$只取决于$Course$而不取决于$Prof$。 我们可以使用函数依赖来识别和避免这些问题。 第二范式（2NF）主（prime）属性是候选键的一部分。其他属性均为非主属性。 定义：在一个FD $X\\rightarrow Y$中，如果没有$Z \\subset X$使$Z \\rightarrow Y$，那么$Y$是完全函数依赖于$X$（fully functionally dependent）的。否则$Y$部分依赖于$X$。 定义（第二范式）：如果所有非主属性在功能上完全依赖于候选键，那么关系模式就是第二范式（2NF）。 如果数据库模式的所有关系都在2NF中，那么它就是在2NF中。 可能的2NF为： 问：什么关系代数表达式可以从这些关系中恢复$CRS_PREF$ ? 答：Join 2NF并没有完全消除我们之前看到的那些异常： 这符合2NF，但是： 如果另一个课程使用A532房间，那么A532的$Room_Cap$为45和$Enrol_Lmt$为40将存储两次。 如果删除了课程355，那么H940的$Room_Cap$为400，$enroll_lmt$为300就会丢失。 我们也可以通过增加对函数依赖关系的进一步限制来解决这个问题。 第三范式（3NF）定义：如果$Z$不是任何键的子集，使$X \\rightarrow Z$且$Z \\rightarrow Y$且$Z \\not\\rightarrow X$成立，那么一个FD $X\\rightarrow Y$是一个传递依赖， 属性$Y$传递依赖于$X$。 例如， 当 {Course} → {Room} 且 {Room} → {Room_Cap} 成立，且 {Room} 不是任意键的子集时，Room_Cap 传递依赖于{Course}。 定义（第三范式）：如果对所有形式为X→A的非平凡（non-trivial）FD成立，或者X是超键或A是素数属性，则关系模式是第三范式(3NF)。 注意：如果Y是X的子集，那么FD X→Y就是平凡的（trivial）。 转换定义：如果每个非主属性在功能上完全依赖于键，而不是传递地依赖于任何键，那么关系模式就是第三范式。 如果数据库模式的所有关系都在3NF中，那么它就是在3NF中。 TEACHES可以分解为3NF： 另一个例子： 这不符合2NF，因为 City→Tax_Rate, Tax_Rate 不是prime，且 {City,Lot_No} 是键，使 Tax_Rate 部分依赖于键。 可以这样解决这个问题： 现在符合2NF，但没有符合3NF，因为 Area → Price, {Area} 不是一个超键，而且Price 不是 prime。 注意，传递依赖 Property_Id→ Area → Price 我们也可以解决这个问题： 还假设 Area→City。关系模式仍在3NF中，因为 City 是一个prime属性。然而，像以前一样，可能还是会有异常存在。所以仍然需要更多的限制来解决这些问题。 博伊斯-科德范式 Boyce-Codd Normal Form (BCNF)定义 (Boyce-Codd Normal Form)：当X→A成立且X→A非平凡时，X是超键，那么关系模式就在Boyce-Codd范式中。 如果一个数据库模式的所有关系都在BCNF中，那么它就是在BCNF中。 可以把例子变成BCNF：","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础PLpgSQL","slug":"UNSW/COMP9311/数据库基础PLpgSQL","date":"2021-03-15T09:27:19.000Z","updated":"2021-03-28T16:32:27.859Z","comments":true,"path":"2021/03/15/unsw/comp9311/shu-ju-ku-ji-chu-plpgsql/","link":"","permalink":"http://szdf123.github.io/2021/03/15/unsw/comp9311/shu-ju-ku-ji-chu-plpgsql/","excerpt":"","text":"SQL语言已经具有的特点数据类型原子类型： integer, float, character, boolean 可定义元组类型 可自定义新类型 -- 基本类型 CREATE DOMAIN DomainName [ AS ] DataType [ DEFAULT expression ] [ CONSTRAINT ConstrName constraint ] -- 元组类型 CREATE TYPE TypeName AS ( AttrName1 DataType1 , AttrName2 DataType2 , ...) 例： -- 定义一个基本类型 create domain UnswCourseCode as text check ( value ~ '[A-Z]{4}[0-9]{4}' ); create table Course ( id integer , code UnswCourseCode , ... ); 例： -- 定义一个元组类型 create type ComplexNumber as ( r float , i float ); create type CourseInfo as ( course UnswCourseCode , syllabus text , lecturer text ); PLpgSQL（Structured Query Language）PLpgSQL = Procedural Language extensions to PostgreSQL CREATE PROCEDURE ProcName ( Params ) [ local declarations ] procedure body ; CREATE FUNCTION FuncName ( Params ) RETURNS Type [ local declarations ] function body ; 其中，Params有三种模式： IN, OUT, INOUT PostgreSQL 函数定义语法： CREATE OR REPLACE FUNCTION funcName(arg1type, arg2type, ....) RETURNS rettype AS $$ DECLARE variable declarations BEGIN code for function END; $$ LANGUAGE plpgsql; 例： create or replace function withdraw(acctNum text, amount integer) returns text as $$ declare bal integer; begin select balance into bal from Accounts where acctNo = acctNum; if (bal &lt; amount) then return 'Insufficient Funds'; else update Accounts set balance = balance - amount where acctNo = acctNum; select balance into bal from Accounts where acctNo = acctNum; return 'New Balance: ' || bal; end if; end; $$ language plpgsql; 例： -- 指定啤酒的最大价格 create or replace function maxPrice(text) returns float as $$ select max(price) from Sells where beer = $1; $$ language sql; -- 使用方法 select maxPrice('New'); 例： -- 指定地址查询包含的酒吧 create or replace function hotelsIn(text) returns setof Bars as $$ select * from Bars where addr = $1; $$ language sql; -- 使用方法 select * from hotelsIn('The Rocks'); -- 老式函数定义 CREATE OR REPLACE FUNCTION cat(text, text) RETURNS text AS $$ DECLARE x alias for $1; -- alias for parameter y alias for $2; -- alias for parameter result text; -- local variable BEGIN result := x||''''''''||y; return result; END; $$ LANGUAGE 'plpgsql'; -- 新式函数定义 CREATE OR REPLACE FUNCTION add(x text, y text) RETURNS text AS $$ DECLARE result text; -- local variable BEGIN result := x||''''||y; return result; END; $$ LANGUAGE 'plpgsql'; 例： CREATE OR REPLACE FUNCTION add ( x anyelement , y anyelement ) RETURNS anyelement AS $$ BEGIN return x + y ; END ; $$ LANGUAGE plpgsql ; -- 限制：要求x和y具有相同的“可添加”类型的值。 PlpgSQL允许重载 例： CREATE FUNCTION add ( int , int ) RETURNS int AS $$ BEGIN return $1 + $2 ; END ; $$ LANGUAGE plpgsql ; CREATE FUNCTION add ( int , int , int ) RETURNS int AS $$ BEGIN return $1 + $2 + $3 ; END ; $$ LANGUAGE plpgsql ; CREATE FUNCTION add ( char (1) , int ) RETURNS int AS $$ BEGIN return ascii ( $1 )+ $2 ; END ; $$ LANGUAGE plpgsql ; -- 但此时，不能再定义返回其他类型值的add ( char (1) , int ) CREATE FUNCTION add ( char (1) , int ) RETURNS char AS $$ BEGIN return chr ( ascii ( $1 )+ $2 ); END ; $$ LANGUAGE plpgsql ; -- cannot have two functions that look like add(char(1), int). PostgreSQL允许的返回值类型为： void 原子类型（integer, text,…） 元组（table record类型或元组类） 一组原子类型 一组元组 -- 创建不同类型的返回值的示例 create type Employee as (id integer, name text, salary float, ...); create function factorial(integer) returns integer ... create function EmployeeOfMonth(date) returns Employee ... create function allSalaries() returns setof float ... create function OlderEmployees() returns setof Employee ... 不同类型的函数有不同的调用方式： select factorial(5); -- returns one integer select EmployeeOfMonth('2008-04-01'); -- returns (x,y,z,...) select * from EmployeeOfMonth('2008-04-01'); -- one-row table select * from allSalaries(); -- single-column table select * from OlderEmployees(); -- subset of Employees 可以通过几种方式调用PLpgSQL函数 -- 作为 SELECT 的一部分 select myFunction ( arg1 , arg2 ); select * from myTableFunction ( arg1 , arg2 ); -- 作为其他 PLpgSQL 的一部分 PERFORM myVoidFunction ( arg1 , arg2 ); result := myOtherFunction ( arg1 ); -- 通过 insert/delete/update 触发器 create trigger T before update on R for each row execute procedure myCheck (); -- 通过从现有的数据库表派生类型 account Accounts % ROWTYPE ; 变量还可以按照以下方式定义： 现有变量或表列的类型 现有表行类型（隐式记录类型） 例： quantity INTEGER ; start_qty quantity % TYPE ; employee Employees % ROWTYPE ; name Employees.name % TYPE ; 控制结构赋值语法： variable := expression; 例 tax := subtotal * 0.06; my_record.user_id := 20; 条件语法： IF … THENIF … THEN … ELSEIF … THEN … ELSIF … THEN … ELSE 例 IF v_user_id &gt; 0 THEN UPDATE users SET email = v_email WHERE user_id = v_user_id; END IF; LOOP循环语法： LOOP Satement END LOOP ; 例 LOOP IF count &gt; 0 THEN -- some computations END IF; END LOOP; For循环语法： FOR int_var IN low .. high LOOP Satement END LOOP ; 例 FOR i IN 1..10 LOOP -- i will take on the values 1,2,3,4,5,6,7,8,9,10 within the loop END LOOP; SELECT … INTO可以捕获查询结果 语法： SELECT Exp1 , Exp2 , ... , Expn INTO Var1 , Var2 , ... , Varn FROM TableList WHERE Condition ... 例： -- cost 是本地变量, price 是一个字段/属性 SELECT price INTO cost FROM StockList WHERE item = ' Cricket Bat '; cost := cost * (1 + tax_rate ); total := total + cost ; 异常 Exceptions语法： BEGIN Statements ... EXCEPTION WHEN Exceptions1 THEN StatementsForHandler1 WHEN Exceptions2 THEN StatementsForHandler2 ... END ; 例： -- 表 T 包含一行数据 ( ' Tom ' , ' Jones ') DECLARE x INTEGER := 3; BEGIN UPDATE T SET firstname = ' Joe ' WHERE lastname = ' Jones '; -- 此时表 T 包含的数据为 ( ' Joe ' , ' Jones ') x := x + 1; y := x / y; ---- y: = # Staff 表中的 Tom Jones EXCEPTION WHEN division_by_zero THEN -- 更新表 T 回滚至 ( ' Tom ' , ' Jones ') RAISE NOTICE ' Caught division_by_zero '; RETURN x ; -- 返回值为 4 END ; RAISE操作可以生成服务器日志 例： RAISE DEBUG ' Simple message '; RAISE NOTICE ' User = % ' , user_id ; RAISE EXCEPTION ' Fatal : value was % ' , value ; 日志级别有以下几种 DEBUG, LOG, INFO, NOTICE, WARNING, EXCEPTION 并不是所有级别的日志都会在客户端生成消息 Cursors 游标游标是一个变量，可用于访问特定SQL查询的结果 最简单的使用方法是在FOR … IN中使用 例 CREATE FUNCTION totsal () RETURNS REAL AS $$ DECLARE emp RECORD ; total REAL := 0; BEGIN FOR emp IN SELECT * FROM Employees LOOP total := total + emp . salary ; END LOOP ; RETURN total ; END ; $$ LANGUAGE plpgsql ; 可以优化为 CREATE FUNCTION totsal () RETURNS REAL AS $$ DECLARE total REAL ; BEGIN SELECT sum ( salary ) INTO total FROM Employees ; return total ; END ; $$ LANGUAGE plpgsql ; 游标的基本操作为：OPEN, FETCH, CLOSE 例： -- 假设 ... 游标 e 为 SELECT * FROM Employees ; OPEN e ; LOOP FETCH e INTO emp ; EXIT WHEN NOT FOUND ; total := total + emp.salary ; END LOOP ; CLOSE e ; FETCH操作也可以提取一行的组件: FETCH e INTO my_id , my_name , my_salary ; Triggers 触发器触发器是存储在数据库中的过程，在响应数据库事件（例如更新）时被激活。 触发器提供事件-条件-动作(ECA)编程： 事件在激活时激活触发器，触发器检查条件（如果条件成立），执行过程（操作） 两种INSERT的触发器为 create trigger X before insert on T Code1; create trigger Y after insert on T Code2; insert into T values (a,b,c,...); 两种UPDATE的触发器为 create trigger X before update on T Code1; create trigger Y after update on T Code2; update T set b=j,c=k where a=m; 语法 CREATE TRIGGER TriggerName {AFTER|BEFORE} Event1 [OR Event2 ...] ON TableName [ WHEN ( Condition ) ] FOR EACH {ROW|STATEMENT} EXECUTE PROCEDURE FunctionName(args...); 函数触发器 CREATE OR REPLACE FUNCTION name () RETURNS TRIGGER .. 如果有以下数据库表结构 create table Person ( id integer primary key, ssn varchar(11) unique, ... e.g. family, given, street, town ... state char(2), ... ); create table States ( id integer primary key, code char(2) unique, ... e.g. name, area, population, flag ... ); 例：确保只使用有效的州代码 -- 在为每一行的人插入或更新之前创建触发校验状态 create function checkState() returns trigger as $$ begin -- 标准化用户提供的值 new.state = upper(trim(new.state)); if (new.state !~ '^[A-Z][A-Z]$') then raise exception 'Code must be two alpha chars'; end if; -- 实现参照完整性检查 select * from States where code=new.state; if (not found) then raise exception 'Invalid code %',new.state; end if; return new; end; $$ language plpgsql; 例：部门工资总额 现有表结构为： Employee(id, name, address, dept, salary, …)Department(id, name, manager, totSal, …) 我们希望：Department.totSal = (select sum(e.salary) from Employee e where e.dept = d.id) ) 具体来说，可能有以下四种情况 新员工入职 员工加薪 员工从一个部门跳槽到另一个部门 员工离开公司 -- 新员工入职 create trigger TotalSalary1 after insert on Employees for each row execute procedure totalSalary1(); create function totalSalary1() returns trigger as $$ begin if (new.dept is not null) then update Department set totSal = totSal + new.salary where Department.id = new.dept; end if; return new; end; $$ language plpgsql; -- 员工调整部门/调薪 create trigger TotalSalary2 after update on Employee for each row execute procedure totalSalary2(); create function totalSalary2() returns trigger as $$ begin update Department set totSal = totSal + new.salary where Department.id = new.dept; update Department set totSal = totSal - old.salary where Department.id = old.dept; return new; end; $$ language plpgsql; -- 员工离职 create trigger TotalSalary3 after delete on Employee for each row execute procedure totalSalary3(); create function totalSalary3() returns trigger as $$ begin if (old.dept is not null) then update Department set totSal = totSal - old.salary where Department.id = old.dept; end if; return old; end; $$ language plpgsql;","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（5）","slug":"UNSW/COMP9020/离散数学课程笔记（5）","date":"2021-03-12T14:05:27.000Z","updated":"2021-05-03T08:25:04.990Z","comments":true,"path":"2021/03/12/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-5/","link":"","permalink":"http://szdf123.github.io/2021/03/12/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-5/","excerpt":"","text":"等价关系与划分如果关系$\\mathcal{R}$满足(R)，(S)，(T)，那么它被叫做等价关系（equivalence relation） 每个等价关系$\\mathcal{R}$在其定义域$S$上定义等价类equivalence classes。 元素$s \\in S$的等价类[s] （写作$\\mathcal{R}$）为： [s]_{\\mathcal{R}}=\\{t\\in S :t\\mathcal{R}s\\}这个概念只适用于等价关系$\\mathcal{R}$。所有等价类的集合是$S$的一个分区（partition）: S=\\dot\\bigcup_{s\\in S}[s]\\mathcal{R} \\\\其中，$\\dot\\bigcup$表示不相交的结合 等价类是不相交的，并且共同覆盖整个域。每个元素都属于且仅属于一个等价类。 我们用$s_1,s_2,\\dots$代表不同的等价类，对于$s,t \\in S$，要么当$s\\mathcal{R}t$时，$[s] = [t]$，要么当$s\\not\\mathcal{R}t$时，$[s]\\cap[t] =\\emptyset$。 当$s,t$在同一个等价类中时，我们通常写$s\\sim_\\mathcal{R} t$。 相对的，一个集合的划分定义了该集合上的等价关系。 如果$S=S_1\\dot\\cup \\dots \\dot\\cup S_k$，那么当s和t属于同一个$S_i$时，会有$s \\sim t$。 如果关系$\\sim$在$S$上等价，且$[S]$是相应的划分，那么 \\nu : S \\rightarrow [S], \\nu : s \\mapsto [s] = \\{x \\in S:x \\sim s\\}被叫做自然图（natural map）。他总是满射的。 只有当$\\sim$在$S$上有一致性（identity）的时候，$\\nu$是1-1映射。 函数$f:S\\rightarrow T$ 在$S$上定义一个等价关系，通过 $s_1 \\sim s_2$当且仅当$f(s_1)=f(s_2)$ 非空的集合$f^{\\leftarrow}(t),t\\in T$形成相应的划分 S=\\bigcup_{t\\in T}f^{\\leftarrow}(t)只有当$f$是满射的时候，$f^{\\leftarrow}(t)\\neq \\emptyset$ 同余关系 Congruence Relations$\\mathbb{Z}\\rightarrow \\mathbb{Z}_p$：将$\\mathbb{Z}$划分为具有相同余数（mod p）的数类；这对于素数（prime）$p$来说特别重要 \\mathbb{Z}=\\{0,1,\\dots,p-1\\}我们可以为素数$p$在$\\mathbb{Z}_p$上定义所有四种算术运算（具有通常的性质）；当$p$不是质数时除法是有限制的。 标准符号：$\\mathbf{m}\\equiv \\mathbf{n}\\ (mod\\ \\mathbf{p})$ $\\overset{def}=$m除以$p$的余数= $n$除以$p$的余数 注 $(\\mathbb{Z}_p,+,\\cdot,0,1)$是称为环（rings）的基本代数结构。这些结构在编码理论和密码学中非常重要。 模运算$\\mathbb{Z}_5=\\{0,1,2,3,4\\}$ \\begin{array}{c|c,c,c,c} +_5 & 0 & 1 & 2 & 3 & 4 \\\\ \\hline 0 & 0 & 1 & 2 & 3 & 4 \\\\ 1 & 1 & 2 & 3 & 4 & 0 \\\\ 2 & 2 & 3 & 4 & 0 & 1 \\\\ 3 & 3 & 4 & 0 & 1 & 2 \\\\ 4 & 4 & 0 & 1 & 2 & 3 \\end{array} \\quad \\begin{array}{c|c} n & -n \\\\ \\hline 0 & 0 \\\\ 1 & 4 \\\\ 2 & 3 \\\\ 3 & 2 \\\\ 4 & 1 \\end{array} \\quad \\begin{array}{c|c,c,c,c} *_5 & 0 & 1 & 2 & 3 & 4 \\\\ \\hline 0 & 0 & 0 & 0 & 0 & 0 \\\\ 1 & 0 & 1 & 2 & 3 & 4 \\\\ 2 & 0 & 2 & 4 & 1 & 3 \\\\ 3 & 0 & 3 & 1 & 4 & 2 \\\\ 4 & 0 & 4 & 3 & 2 & 1 \\end{array} \\quad \\begin{array}{c|c} n & n^{-1} \\\\ \\hline 0 & - \\\\ 1 & 1 \\\\ 2 & 3 \\\\ 3 & 2 \\\\ 4 & 1 \\end{array}注：逆运算的算法为 $11=1;23=1;32=1;44=1$ 几何中的等价类从矩形开始 将$[a, b]$区间内的点与$[c, d]$区间内的点（在这个方向上）识别为一个圆柱体，同时将$[a, c]$和$[b, d]$识别为一个环面。 矩形内部的点没有“粘”在一起；因此等效类（圆柱体）有一个或两个元素，而环面也有一个类有四个元素（哪四个？） 将$[a, b]$与$[d, c]$（该方向）识别为单侧莫比斯带（Moebius strip）；此外，将它与标识$[a, c$]和$[b, d]$放在一起，给出了一个单边封闭表面（“克莱因瓶Klein bottle”）。 克莱因瓶不能嵌入三维空间而没有自交。 通常需要在$[S]$上定义一个函数，对每个等价类$[S]$中的$t\\in [S]$进行描述。 如果$\\phi: [S]\\rightarrow X$是这样定义的，那么必须 定义$\\phi(t)$对所有$t\\in S$，确定$\\phi(t) \\in X$ 当$t_1 \\sim t_2$时，确定$\\phi(t_1) = \\phi (t_2)$，例如当$[t_1]=[t_2]$ 定义 $\\phi([s])\\overset{def}= \\phi(s)$ 第二个条件对于定义良好的$\\phi$至关重要。 顺序关系 Order Relations全序（Total order）全序（Total order）$\\le$在$S$ (R)$x \\le x$对于所有的$x \\in S$ (AS) $x \\le y, y\\le x \\Rightarrow x = y$ (T)$x\\le y, y\\le z \\Rightarrow x\\le z$ (L)线性-任何两个元素是可比较的：对于所有的$x,y$，要么$x\\le y$或$y \\le x$，要么$x=y$ 在有限集上，所有的全序都是”同构的（isomorphic）”。 x_1 \\le x_2 \\le \\cdots \\le x_n在一个无限的集合上，有相当多的可能性。 偏序（Partical Order）$S$上的一个偏序（partial order）$\\preceq$满足(R)，(AS)，(T)，不需要(L) $(S,\\preceq)$叫做偏序集（poset），即偏序的集合 对于每一个（偏）序，可以关联一个唯一的拟序（quasi-order） x \\prec y 当且仅当 x \\preceq y 且 x \\neq y这满足(AS)和(T)；如果它对应于一个全序（我们可以称它为一个全拟序total quasi-order）它满足(L)；对任意一对$x,y$它都不满足(R) 哈斯图每个优先的偏序集都可以用哈斯图来表示，其中，如果$x \\prec y $且没有$z$使$x \\prec z \\prec y$，那么就从$x$到$y$画一条向上的线。 排序的概念定义 极小元素和极大元素（它们总是存在于每个有限偏序集中） 最小和最大——唯一的最小和最大元素 一个子集$A \\subseteq S $的元素中，lub（最小上界least upper bound）和glb（最大下界greatest lower bound） $lub(A)$——最小元素$x \\in S$，例如，$x \\succeq a$ 对于所有的$a\\in A$ $glb(A)$——最大元素$x \\in S$，例如，$x \\preceq a $对于所有的$a\\in A$ 晶格Lattice每一对元素都存在lub和glb的偏序集（通过归纳法，每个有限元素子集都存在晶格） 注意 无限格不需要对其元素的任意无限子集有lub(或没有glb)，特别是对其所有元素不可能存在这样的边界。 例子 $\\mathbb{Z}$——即不是lub也不是glb $\\mathbb{F}(\\mathbb{N})$——所有有限子集，不具有任意lub性质；glb存在，它是交集，因此总是有限的； $\\mathbb{I}(\\mathbb{N})$——所有的无限子集，可能不具有任意的glb；lub是存在的，它是无限的集合。 有序集合 Well-Ordered Sets有序集合：每个子集都有最小的元素。 注意： 最大的元素不是必需的。 有序集合是证明程序终止的重要数学工具。 偏序集排序-拓扑排序对一个偏序集$(S,\\preceq)$，任意线性顺序$\\leq$与$\\prec$是一致的，这叫做拓扑排序。一致性意味着$a \\preceq b \\Rightarrow a \\leq b$ 结合排序乘积排序（product order）——可以组合任何部分顺序。一般来说，它只是一个部分的顺序，即使把全部的顺序结合起来。 对于$s,s’ \\in S$，且$t,t’ \\in T$，定义 (s,t) \\preceq (s',t') \\quad 如果s \\preceq s' 且 t \\preceq t'函数排序$T$——任意集合（没有顺序要求） $S$——偏序集合 $M=\\{f:T\\rightarrow S\\}$——所有从$T$到$S$的集合 这是一个自然偏序 f \\preceq g \\quad 当且仅当 \\forall t \\in T(f(t)\\preceq g(t))实际上，它是$S^{|T|}$上的一个乘积排序。在大多数应用中，$T$是线性排序的；然而，它并不影响在$T$上定义的函数的顺序（只对S上的顺序有影响）。 实际的序Practical Orderings它们实际上是有序集的乘积上的总排序。 词典顺序（Lexicographic order）——在所有的$\\sum^*$上定义。它扩展了已经假定存在于$\\sum$上的一个总序。 Lenlex顺序 ——在整个$\\sum^*$上的排序，其中的元素先按照长度排序 $\\sum^{1}\\prec \\sum^{2}\\prec \\sum^{3}\\prec \\cdots$，其中每个$\\sum^{(k)}$为字典序。在实践中，它仅被应用于$\\sum^*$的有限子集 锉顺序（Filing order）——字典顺序限制为相同长度的字符串。 它为每一个$i$分别定义了$\\Sigma ^i$的总阶数。 只有当$|\\Sigma|=1$时，词典顺序和Lenlex顺序相同 一些特性如果$\\Sigma$是全序的，那么相关的词典顺序或Lenlex顺序偏序$\\Sigma^*$也是全序的 每个有限偏序集有一个哈斯图，同时有一个拓扑排序 每个有限偏序集不一定有最小值 每个有限全序集一定有最大值 一个无限偏序集也可以有最大值 小结等价关系$\\sim$，等价类$[S]$ $\\mathbb{Z}$上的特别等价关系：符号$m \\equiv n (\\mod p)$；$\\mathbb{Z}_p$ 排序：全，偏；lub，glb，格lattice，拓扑排序 哈斯图 特别排序：乘积排序，字典排序，lenlex排序 等价类：(R)(S)(T) 全序：(R)(AS)(T)(L) 偏序：(R)(AS)(T) 参考资料 Textbook (R &amp; W) - Ch. 3, Sec. 3.4-3.5; Ch. 11. Sec. 11.1-11.2","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（2）","slug":"UNSW/COMP9311/数据库基础课程笔记（2）","date":"2021-03-08T12:21:20.000Z","updated":"2021-05-04T14:59:04.390Z","comments":true,"path":"2021/03/08/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-2/","link":"","permalink":"http://szdf123.github.io/2021/03/08/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-2/","excerpt":"","text":"关系数据模型 Relational Data Model关系数据模型采用简单统一的数据结构，且已在大多数商业数据库系统中实现，具有坚实的理论基础。 结构 Structures在关系模型中，一切都是使用关系来描述的。关系可以看作是一个指定的表。表的每一列都对应一个命名的属性。属性允许的值集合称为它的域。表中的每一行被称为关系的一个元组。 注意，列或行没有顺序要求。 从数学上说，域$D$是一组表示某种语义的原子值（具有某种固定的数据类型）。属性$A$是域$dom(A)$所扮演的角色名称。关系模式$R$，表示为$R(A_1,A_2,\\dots ,A_n)$，由一组属性组成 $R = {A_1,A_2,\\dots,A_n}$。 注意，不允许复合和多值属性！ 元组$t(A_1,A_2,\\dots ,A_n)$是$dom(A_1) \\times \\dots \\times dom(A_n)$中的一个点，其中每个$dom(A_j)$的域是$A_j$ 一个关系（或一个关系实例）是一组元组，是$dom(A_1) \\times \\dots \\times dom(A_n)$的子集 关系模式用于描述关系。关系的度（degree）是关系模式中属性的数量。 关系数据模型与ER模型对比关系模式（内涵）⇄实体或关系类型模式（内涵） 属性⇄属性 元组⇄实体/关系实例 关系(实例，扩展)⇄实体/关系扩展 在ER模型中允许复合和多值属性，但在关系数据模型中不允许 键（keys）用于标识关系中的元组 超键（superkey）是一组唯一确定元组的属性 请注意，这是关系的一个属性，它不依赖于当前的关系实例 候选键（candidate key）是一个超键，它的恰当的（proper）子集都不是超键。 键是由应用程序决定的 例如，如果 {Name} 是唯一的，那么它是PLAYER的候选键；否则，我们需要使用整个元组，或者创建一个候选键，比如PID {Goals}通常不能成为候选关键，因为不同的玩家可能拥有相同数量的目标 {Name, Goals}是超键，但如果{Name}是键，则不是候选键。 主键（primary key, PK）是指定的候选键。在许多应用程序中，如果没有一个自然的主键，那么有必要发明一个主键——通常这将是一个非负整数，例如Person_number。当一个关系模式有几个候选键时，通常最好选择一个具有单个属性或少量属性的主键。 完整性约束 Integrity constraints完整性约束有几种类型，是关系模型不可或缺的一部分： 键约束（Key constraint）：候选键值对于每个关系实例必须是唯一的 实体完整性（Entity integrity）：作为主键的一部分的属性不能为空 参照完整性（Referential integrity）：这种约束与”外键”有关 引用完整性：FK的值必须出现在另一个关系中，否则完全为Null 外键（Foreign keys, FK）用于引用另一个关系中的元组。 如果一个关系模式的属性$R_1$是外键，则其需要满足： 这些属性与另一个关系模式$R_2$的主键中的属性具有相同的域 元组$t_1 (R_1)$中的FK值要么作为$R_2$中某个元组$t_2$的PK值，要么为Null 检查更新的约束 Checking constraints on updates为了维护数据库的完整性，我们需要在进行更新之前对要更新的数据进行检查，检查其是否违反完整性约束 例如，假设我们有如下的带有外键的模式： 插入（Insertions）：当插入数据时，我们需要检查候选键是否已经存在，同时每个外键的值要么为NULL，要么在引用的关系中存在。 删除（Deletions）: 删除时，我们需要检查引用完整性——检查主键是否出现在另一个关系中。 如果要删除的值做为外键被其他表引用，则可以： 删除引用它的数据（注意，这需要进行另一次完整性检查，可能导致级联删除） 将外键值设置为NULL（注意，如果它是主键的一部分，就不能这样做） 将外键值设置为另一个可接受的值 修改（Modifications）：如果修改的属性是主键，那么情况就似于删除然后重新插入。如果修改的是外键，那就检查新值是否指向已经存在的元组。如果不是以上两种情况，那么一般就不会出现问题。 关系数据库的定义 Relational database definition一个关系数据库模式，是一组关系模式${R_1,\\dots,R_m}$和一组完整性约束。 一个关系数据库实例是一组关系实例${r_1,\\dots,r_m}$，使每个$r_i$都是$R_i$的一个实例，并且满足完整性约束。 ER图到关系数据模型映射数据库设计的一种技术是首先使用高级数据模型设计概念模式，然后将其映射到所选DBMS数据模型中的概念模式。这里我们将介绍一种将ER映射到关系数据模型的方法。它包括以下7个步骤。 步骤一：对于每个常规（非弱）实体类型$E$，创建与$R$的关系 Attributes：$E$的所有简单属性（以及复合属性的简单组件）创建一个关系R Key：选择$E$的一个键作为该关系的主键 对于具有父实体类型$P$的每个专门化实体类型$E$，创建与$R$的关系 属性：$P$的键的属性，加上$E$的简单属性 键：P的键 步骤二：对于每个弱实体类型$W$，所有者实体类型$E$，创建与$R$的关系 属性：$W$的所有简单属性（以及复合属性的简单组件），包括$E$派生的关系的主属性作为外键 键：外键加上$W$的部分键 步骤三：对于每种1:1关系类型$B$，设$E$和$F$为参与的实体类型。让$S$和$T$是对应的关系。 从$S$和$T$中选择一个（最好是完全参与的），比如$S$ 将$T$的主键的属性添加到$S$中作为外键 将$B$的简单属性（以及复合属性的简单组件）添加为$S$的属性 另一种选择是，将两种实体类型和关系合并为一个关系，特别是在两者都参与而不参与其他关系的情况下。 步骤四：对于每一个规则的1:N关系类型$B$，设$E$和$F$为参与的实体类型，$E$在1边，$F$在N边。$S$和$T$是对应的关系，将$S$的主键的属性添加到$T$作为外键。向关系$T$添加简单属性（或复合属性的简单组件）。 注意，这并没有添加任何新的元组，只是添加了属性。 步骤五：对于每个N:M关系类型$B$，创建一个新的关系$R$，让$E$和$F$作为参与的实体类型，让$S$和$T$是对应的关系。 属性：将$S$键和$T$键作为外键，再加上$B$的简单属性（以及复合属性的简单组件） key：$S$键和$T$键 步骤六：对于每个多值属性$A$，创建一个新的关系$R$，设$A$为$E$的一个属性。 属性A（如果A是一个简单属性）和$E$的键作为外键；A的简单组件（如果A是一个复合属性），以及作为外键的键$E$ 键：所有属性 步骤七：对于每个n元关系类型（n &gt; 2），创建一个新的关系： 属性：与步骤五相同 键：与步骤五相同，除非其中一个参与实体类型的参与率为1，它的键可以用作新关系的键。","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（1）","slug":"UNSW/COMP9311/数据库基础课程笔记（1）","date":"2021-03-08T07:25:06.000Z","updated":"2021-05-04T14:33:43.402Z","comments":true,"path":"2021/03/08/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-1/","link":"","permalink":"http://szdf123.github.io/2021/03/08/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-1/","excerpt":"","text":"课程安排教师及联系方式Xuemin LinSchool of Computer Science and EngineeringOffice: K17-503E-mail: lxue@cse.unsw.edu.auExt: 6493http://www.cse.unsw.edu.au/~lxue 开课信息演讲： 17:00 - 19:00 （周一，澳大利亚时间） 第 1 – 9 周上课 16:00 - 18:00 （周二，澳大利亚时间） 第 1 – 9 周上课共9周。 实验： 通过Moodle(https://moodle.telt.unsw.edu.au/)在线进行，在“讲座和录音”中（COMP9311 – Database Systems 2021 T1）第2 - 5、7 - 10周上课（第11周周一复活节补课）咨询：TBAQ&amp;A论坛： https://groups.google.com/group/comp9311-21t1课程的电子邮件： comp9311unsw@gmail.com 作业安排2 个大作业（assignments），1 个项目（project）。所有的作业都需要个人独立完成！ 大作业（50%）：大作业1（Ass 1）：数据建模 + 关系代数（20%）（第2-4周）大作业2（Ass 2）：数据库设计理论 + 数据库存储结构 + 事务处理（30%）（第7-9周） 项目（project） (50%)项目 1: SQL &amp; PLpgSQL (50%) ( 4-7 周为SQL, 第 8 周为PLpgSQL)逾期提交的惩罚：作业：迟交作业0分项目：迟交第一天扣10%，然后每天扣30%。 期末考试：100%如果考试当天你生病了，就不要参加考试。如果已经尝试考试，将不允许再提出医疗特殊考虑要求。 最终成绩计算规则最终成绩 = $\\sqrt{(ass1+ass2+proj1)∗exam}$ 教科书Elmasri &amp; Navathe, Fundamentals of Database Systems, Benjamin/Cummings, 6th Edition, 2010. （Elmasri &amp; Navathe，《数据库系统基础》，Benjamin/Cummings，第6版，2010年版） 参考书籍J. D. Ullman &amp; J. Widom, 《数据库系统概论》，武汉大学出版社，1997年版。R. Ramakrishan,《数据库管理系统》，北京:科学出版社，1997年版D. Maier《关系数据库理论》，计算机科学出版社，1983年版 教学安排 Time Monday Tuesday Week 1 Subject Introduction, Conceptual DB Design (ER) Conceptual DB Design (continue), Relational Data Model Week 2 Relational Data Model(continue), Relational Algebra SQL Week 3 SQL(continue), PLpgSQL Functional Dependencies Week 4 Functional Dependencies (continue), Normal Forms Normal Forms (continue) Week 5 Relational DB design Relational DB design (continue) Week 6 Disks, Files Index Week 7 Transaction Management Transaction Management (continue) Week 8 Graph Data and Graph Database Graph Pattern Matching Week 9 Towards Big Graph Processing: applications and challenges Revisions 数据库概念设计graph LR a[应用 Appl] --&gt; e[E-R图] --&gt; r[关系数据库 Relational DB] 实体关系模型实体关系模型（Entity-Relationship Model，ER）是一种高级概念数据模型。其ER主要用作设计工具。 实体类型（Entity type）：具有相同属性的对象组 实体（Entity）：实体类型的成员-类似于对象。 属性（Attribute）：对象的一个属性 关系（Relationship）：对象之间的关系 ER图可以建模n-元（n-way）关系，通过一个关系对两个对象见建立连接 实体和属性 Entity and Attributes实体代表现实世界中的事物。属性描述实体的属性。属性可以是： 简单（原子），例如 sex = ‘ Female ‘ 复合（composite），例如姓名由头衔(Dr)、首字母(C.C.)、姓(Chen)组成 每个实体都有每个属性的值。属性可以是： 单值，例如 学生编号，姓名 多值，例如 关键字=神经网络, 计算机图形, 数据库 每个简单属性都有一个值集（value set）或叫域（domain），表示该属性可能值的集合。 在一个复合属性中$A = (A_1,\\dots ,A_n)$，假设$V_1,\\dots,V_n$为$A_1,\\dots ,A_n$的域 $A$的定义域$V$是$V_1 \\times \\dots \\times V_n$。 数学上，实体$E$的属性$A$是一个函数 A: E \\rightarrow ℘(V)其中$V$是$A$的定义域，$℘(V)$是$V$的单值属性的幂集，$A(E)$必须是一个单值函数。 一个属性可以有一个空值，例如： 没有合适的值，例如，一个学生可能没有兴趣，那么keywords = null 还不知道真实的值，例如，一个人的结婚日期还不知道：结婚日期= null 派生属性的值可以从其他属性和实体派生出来，比如学生人数。 实体类型（entity type）是一组具有相同属性的实体。它由实体模式（entity schema）描述。实体模式由一个名称和一个属性列表构成。 在特定时刻，单个实体实例（instances）集称为实体类型的扩展。 模型和实例的对比如下： 模型Schema (Intension) RESEACHER Name, Payroll_no**, No_of_students**, Keywords DEPARTMENT Name 实例Instances (Extension) (Dr C.C. Chen, 230-0013, 3, Neural Networks) (Dr R. Wilkinson, 231-0091, 1, Databases) Computer Science Psychology Management 实体类型通常有一个主键（key），即可唯一标识实体的属性组。例如：{工资号}是研究员的主键{名称}是部门的主键 一个实体可已有多个主键 一个重要的约束是键约束：在实体类型的任何扩展中，不能有两个实体的键属性具有相同的值。 模式（schemata）可以用以下两种方式描述： 符合属性() 多值属性{} CAR **Registration(Registration No, State), Make, Model, Year, {Colour}** ((ARQ) 595, Vic), Datsun, 120Y, 1972, {green}) ((8HR) 696, WA), Mazda, 929, 1979, {grey, black}) 实体及其属性也可以用实体-关系图（ERDs）来描述。例如： 关系 Relationships关系（relationship ）表示事物之间的关联。 $n$个实体类型$E_1,\\dots E_n$之间的关系类型$R$，是这些实体类型之间的一组关联。 数学上，实体类型$E_1,\\dots E_n$之间的关系类型$R$是$E_1 \\times \\dots \\times E_n$的子集。 每个实例$r = (e_1,\\dots , e_n)$在$R$中是一种关系。 我们说$E_1,\\dots E_n$参与（participate）$R$ . 同样，如果$r = (e_1,\\dots, e_n)$是$R$的一个实例，我们说每个$e_i$参与$r$。 $R$的度（degree）是参与的实体类型的数量。例如， 招生可以是研究员、学生和课程之间的三元（3度）关系。 可以用一个事件图来说明这一点： 实体及其关系也可以用实体-关系图来表示： 参与关系的每种实体类型在关系中扮演特定的角色（role）。 实体类型可以在不同的关系中扮演不同的角色，或者在一个关系中扮演多个角色。 可以使用角色名来区分它们。 例如，ENROLMENT可以是PERSON（作为研究员）、PERSON（作为学生）和COURSE之间的关系，如下图所示: 或者，使用ERD： 这称为递归关系。 弱实体类型 Weak entity types有些实体类型没有自己的键，这种实体类型称为弱实体类型。 弱实体类型的实体可以通过部分键和与另一个实体类型所有者相关联来标识。 弱实体类型与其所有者之间的关系类型是弱实体类型的标识关系（dentifying relationship）。 例如，一个纳税人TAX PAYER 实体可能与几个由其名称确定的独立实体DEPENDENT相关。在本例中，DEPENDENT称为弱实体，{Name}是它的部分键。 DEPENDENT和TAX PAYER之间的标识关系是IS DEPENDENT OF。 TAX PAYER被称为自己的（own） DEPENDENT 关系类型的约束 Constraints on relationship types关系类型通常具有某些约束，这些约束用来限制实体在组合实例时的组成方法。它们应该反映正确的因素基数比率约束（Cardinality ratio constraint）：指定实体可以参与的关系实例的数量。 例如，一个研究补助金只能支持一个研究项目，但一个研究项目可能需要多个补助金来支持。那么，PROJECT:GRANT就是1:N的关系。 如下图所示： 可以在ERD中展示为： 例如：考虑一个AFL(这里替代你最喜欢的团队运动)统计数据的数据库。主教练与俱乐部的关系就是1:1关系的一个例子。 其ERD为： 例子：一个表示作者和出版社之间N: M关系的实例 其等价ERD为： 另一种可以使用ER模型表示的约束是参与约束（Participation constraint） 一个实体在关系中的参与可以是： 合计（total）：每个实体都必须参与，例如每个出版物都有一个作者 部分的（partical）：不一定全部。不是每个人都有出版物。 这可以用ERD表示为： 关系类型的属性 Attributes of relationship types关系类型可以有属性。 例如：一个研究人员可以从事几个项目。她花在一个特定项目上的时间可能是关系WORKS ON的一个属性。 这可以在ERD中显示如下： Elmasre/Navathe总结了ERDs所用的符号： 增强ER模型EER Enhanced ER (EER) model设计者必须使用另外的建模概念来尽可能准确（accurately）和明确地（explicitly）表示应用程序的需求。 ER模型有许多扩展。 专门化（Specialisation）：定义实体类型的一组子类的过程；这种实体类型称为专门化的超类。 概括：专业化的逆向过程。 子类继承父类的所有属性。 专门化涉及以下几个方面：定义实体类型的一组子类，将额外的特定属性与每个子类关联起来。在每个子类和其他实体类型或其他子类之间建立额外的特定关系类型。一个子类可以有多个超类。专门化可以是全部的也可以是部分的；既可以是不相交的，也可以是重叠的。 设计原则 Design Principles诚实（Faithfulness）：反映现实需要（reflect reality） 避免冗余（Avoid redundancy） 选择正确的元素（element）","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（4）","slug":"UNSW/COMP9311/数据库基础课程笔记（4）","date":"2021-03-07T13:35:50.000Z","updated":"2021-05-05T14:41:39.617Z","comments":true,"path":"2021/03/07/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-4/","link":"","permalink":"http://szdf123.github.io/2021/03/07/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-4/","excerpt":"","text":"关系依赖”好的”数据库模式不应该导致更新异常： 更新异常 函数依赖 阿姆斯特朗原理 关闭 更新异常（Update Anomalies）数据库中的冗余（Redundancy ）是指将一段数据多次存储。 出于效率和语义方面的原因，冗余通常是有用的，但也可能造成一致性问题。 不完善的冗余控制可能会导致更新异常。 例如，在此表中，可能会出现： STUDENTS Name Course Phone_no Major Prof Grade Jones 353 237-4539 Comp Sci Smith A Ng 329 427-7390 Chemistry Turner B Jones 328 237-4539 Comp Sci Clark B Martin 456 388-5183 Physics James A Dulles 293 371-6259 Decision Sci Cook C Duke 491 823-7293 Mathematics Lamb B Duke 356 823-7293 Mathematics Bond UN Jones 492 237- 4539 Comp Sci Cross UN Baxter 379 839-0827 English Broes C 修改异常（Modification anomalies）：例如，Jones的电话号码出现了3次。更改电话号码时，必须在3处全部更改，否则数据会不一致。 插入异常（Insertion anomalies）：如果Jones报名另一门课程，输入的电话号码不一样，数据也会不一致。 此外，如果在这个关系中存储课程和教授之间的关联，如果这是唯一方式的话，那我们只能在有人注册该课程时才知道教授信息。 删除异常（Deletion anomalies）：如果删除了某门课的最后一个学生，那么教授和这门课之间的关联就丢失了。 函数依赖性的定义函数$f$从$S_1$到$S_2$的具有这样的性质： 如果$x, y \\in S_1$，而且$x =y$，那么$f(x)=f(y)$ 设$X$和$Y$是$R$中的属性集合， $X$（函数式）决定$Y$，$X \\rightarrow Y$，当且仅当$t_1[X] = t_2[X]$意味着$t_1[Y] = t_2[Y]$。即，$f (t(X)) = t [Y]$ 我们也说$X\\rightarrow Y$有函数依赖性，并且$Y$在函数上依赖于$X$。 $X$被称为设X和Y是r中的属性集合。 X(函数式)决定Y, X→Y, iff t1[X] = t2[X]意味着t1[Y] = t2[Y]。即。， f (t(X)) = t [Y] 我们也说X→Y是一个函数依赖性，并且Y在函数上依赖于X。 X被称为左边的依赖性，Y被称为右边的依赖性。（left side），$Y$被称为右边依赖性（right side）。 例子 每个名字都有一个唯一的电话号码和专业，假设名字是唯一的 每个课程都有一个唯一的教授 每个名字和课程都有一个唯一的成绩 整理其关系为： {Name} →{Phone_no , Major}{Course} → {Prof}{Name , Course} → {Grade} 也可以用这样的图表来展示 请注意，其他字段遵循以下规则： {Name} → {Major}{Course , Grade} → {Prof , Grade} 设$F$是字段的集合 定义1：$X\\rightarrow Y$是从$F$推断出来的（或者$F$推断$X\\rightarrow Y$)，写成 F \\vDash X \\rightarrow Y如果满足$F$的任何关系实例也必须满足$X→Y$。 不可能列出每一个关系来验证X→Y是否从F推导而来。 需要一组推导规则$ρ$，如: 根据定义1，$F$可推倒出$X→Y$，当且仅当用$ρ$推导时。 符号：如果$X$和$Y$是属性的集合，我们用$XY$表示它们的并集。 属性依赖性运算规则例如，设$ X = \\{A, B\\}, Y = \\{B, C\\}, XY = \\{A, B, C\\} $，那么有： \\begin{array}{} F1 & (Reflexivity) & 如果 X ⊇ Y 那么 X →Y \\\\ F2 & (Augmentation) & \\{X → Y \\} \\vDash XZ → Y Z \\\\ F3 & (Transitivity) & \\{X → Y , Y → Z\\} \\vDash X → Z \\\\ F4 & (Additivity) & \\{X→ Y , X → Z\\} \\vDash X → Y Z \\\\ F5 & (Projectivity) & \\{X → Y Z\\} \\vDash X → Y \\\\ F6 & (Pseudotransitivity) & \\{X → Y , YZ → W\\} \\vDash XZ → W \\end{array}例子 给定$F = \\{A→B,A→C,BC→D\\}$，可推导出$A→D$ 实际上，F4、F5、F6可以从F1、F2、F3中推倒出来。 阿姆斯特朗原理（Armstrong’s axioms）我们可以证明阿姆斯特朗的公理是正确和完整的： 声明：如果$F$用阿姆斯特朗公理导出$A→B$，那么根据定义1，$F \\vDash A→B$。 完全：根据定义1，$F \\vDash M→N$，则$F$利用阿姆斯特朗公理导出$M→N$。 检查FD的算法已知$F$，如何检查$X→Y$是否在$F^+$中? $F^+$表示$FD$的最小集合 包含F 在阿姆斯特朗公理下是封闭的（closed ） $F^+$是$F$的闭包。 如果$F = \\{ A → B, B → C, A → C \\}$，那么 F^+ = \\{AB \\rightarrow A, AB \\rightarrow B, AB \\rightarrow C, AC \\rightarrow A, AC \\rightarrow B, \\\\ AC \\rightarrow C, ABC \\rightarrow A, ABC \\rightarrow B, ABC \\rightarrow C, AB \\rightarrow AB, \\\\ AB \\rightarrow BC, AB \\rightarrow AC, \\dots \\}$F^+$对于$|F|$总是有一个指数大小。 为了计算成员资格，计算$F^+$太过复杂。实际上，我们可以计算$X$在$F$下的闭包$X^+$， $X^+$是由$X$函数决定的最大的属性集。 这是因为： \\begin{array}{} S1: & X^+ = \\cup_{\\forall x \\rightarrow A \\in F^+}A \\\\ S2: & X\\rightarrow Y \\in F^+ 当且仅当 Y \\subseteq X^+ \\end{array}计算$X^+$的算法X+ := X; change := true; while change do begin change := false; for each FD W → Z in F do begin if (W ⊆ X+) and (Z X+) then do begin X+ := X+ ∪ Z; change := true; end end end 计算候选键的算法给定一个关系模式$R$和一组函数依赖$R$的$F$。 $R$的键$X$必须具有$X^+ = R$的性质。 计算候选键的算法 第一步：在$F$中给$X$赋一个超键 第二步：迭代地从$X$中移除属性，同时保留属性$X^+ = R$，直到$X$上没有裁减。 其余的$X$就是候选键。 计算所有候选键的算法给定关系模式$R$和函数依赖$R$的集合$F$，计算所有候选键的算法如下: T := ∅ Main: X := S where S is a super key which does not contain any candidate key in T remove := true While remove do For each attribute A ∈ X Compute {X-A}+ with respect to F If {X-A}+ contains all attributes of R then X := X – {A} Else remove := false T :=T ∪ X 重复Main直到找不到可用的S为止。最后，T包含所有候选键。 例子 $R = \\{A, B, C, D\\} $，且$ F = \\{ A → B, BC → D, A → C \\} $ $X = \\{A, B, C\\} $ 如果$F$的左边是一个超级键。 不能删除$A$，因为$ \\{BC\\}^+ = \\{B, C, D\\} ≠ R$ $B$ 可以移除，因为$\\{AC\\}^+ = \\{A, B, C, D\\} = R\\rightarrow X = \\{ A, C\\}$ $C$ 可以进一步移除，因为$ \\{A\\}^+ = \\{A, B, C, D\\} \\rightarrow X = \\{A\\}$","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"UNSW 课程笔记索引","slug":"UNSW/UNSW 课程笔记索引","date":"2021-03-07T12:54:12.000Z","updated":"2021-05-28T11:49:27.539Z","comments":true,"path":"2021/03/07/unsw/unsw-ke-cheng-bi-ji-suo-yin/","link":"","permalink":"http://szdf123.github.io/2021/03/07/unsw/unsw-ke-cheng-bi-ji-suo-yin/","excerpt":"","text":"课程标签COMP9020 Foundations of Computer Science 计算机科学基础/离散数学COMP9021 Principles of Programming 编程原理COMP9024 Data Structures and Algorithm 数据结构与算法COMP9311 Database Systems 数据库系统/数据库基础COMP9331 Computer Networks and Applications 计算机网络与应用COMP9414 Artificial Intelligence 人工智能课程链接COMP9024 Data Structures and Algorithm 数据结构与算法课程综合信息首页课程大纲课程手册 COMP9331 Computer Networks and Applications 计算机网络与应用课程大纲ED-9331 COMP9414 Artificial Intelligence 人工智能课程大纲","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"COMP9021","slug":"COMP9021","permalink":"http://szdf123.github.io/tags/COMP9021/"},{"name":"COMP9024","slug":"COMP9024","permalink":"http://szdf123.github.io/tags/COMP9024/"},{"name":"COMP9331","slug":"COMP9331","permalink":"http://szdf123.github.io/tags/COMP9331/"},{"name":"COMP9414","slug":"COMP9414","permalink":"http://szdf123.github.io/tags/COMP9414/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（4）","slug":"UNSW/COMP9020/离散数学课程笔记（4）","date":"2021-03-07T07:49:36.000Z","updated":"2021-04-28T16:02:09.974Z","comments":true,"path":"2021/03/07/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-4/","link":"","permalink":"http://szdf123.github.io/2021/03/07/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-4/","excerpt":"","text":"矩阵（Matrices）$m\\times n$矩阵是一个有m个水平行n个垂直列的数组 \\mathbf{A} = \\begin{bmatrix} a_{11} & a_{12} & \\cdots & a_{1n} \\\\ a_{21} & a_{22} & \\cdots & a_{2n} \\\\ \\vdots & \\vdots & & \\vdots \\\\ a_{m1} & a_{m2} & \\cdots & a_{mn} \\\\ \\end{bmatrix}对计算机科学来说，矩阵大有用处，如： 优化（optimisation） 图形和计算机视觉（graphics and computer vision） 密码学（cryptography） 信息检索和网络搜索（information retrieval and web search） 机器学习（machine learning） 基本矩阵运算（Basic Matrix Operations）转置矩阵（transpose） 对于$m\\times n$的矩阵$\\mathbf{A}=[a_{ij}]$，它的转置矩阵$\\mathbf{A^T}$就是一个$n\\times m$矩阵，其第$i$行第$j$列为$a_{ji}$ 例如， \\mathbf{A}=\\begin{bmatrix} 2 & -1 & 0 & 4 \\\\ 3 & 2 & -1 & 2 \\\\ 4 & 0 & 1 &3 \\end{bmatrix} \\quad \\mathbf{A^T}=\\begin{bmatrix} 2 & 3 & 4 \\\\ -1 & 2 & 0 \\\\ 0 & -1 & 1 \\\\ 4 & 2 & 3 \\end{bmatrix}如果$\\mathbf{M^T}=\\mathbf{M}$，那么这个矩阵$\\mathbf{M}$叫做对称矩阵（symmetric） 两个$m\\times n$矩阵$\\mathbf{A}=[a_{ij}]$和$\\mathbf{B}=[b_{ij}]$相加（sum）后，结果也是一个$m\\times n$矩阵，其第$i$行第$j$列的值为$a_{ij}+b_{ij}$ 事实上，$\\mathbf{A}+\\mathbf{B}=\\mathbf{B}+\\mathbf{A}$，且$(\\mathbf{A}+\\mathbf{B})+\\mathbf{C}=\\mathbf{A}+(\\mathbf{B}+\\mathbf{C})$ 给定$m \\times n$矩阵$\\mathbf{A}=[a_{ij}]$，且$c\\in \\mathbb{R}$，标量乘积（scalar product）$c\\mathbf{A}$是$m\\times n$矩阵，其第$i$行第$j$列的值为$c\\cdot a_{ij}$ $m \\times n$矩阵$\\mathbf{A}=[a_{ij}]$和$n \\times p$矩阵$\\mathbf{B}=[b_{jk}]$的积（product）为$m \\times p$矩阵$\\mathbf{C}=[c_{ik}]$ 定义为 c_{ik}=\\sum_{j=1}^{n}a_{ij}b_{jk}\\quad \\text{对于}1\\leq i \\leq m \\text{且} 1\\leq k \\leq p注意，$\\mathbf{A}$的列数和$\\mathbf{B}$的行数必须相同 $1\\times n$矩阵和$n\\times 1$矩阵相乘通常叫n维向量（n-dimensional vectors）内积 一般情况下，$\\mathbf{A}\\cdot\\mathbf{B}\\neq\\mathbf{B}\\cdot\\mathbf{A}$\u0001\u0001 例子：计算机图形旋转物体w.r.t. $x$轴旋转角度$\\alpha$ \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & \\cos{\\alpha} & -\\sin{\\alpha} \\\\ 0 & \\sin{\\alpha} & \\cos{\\alpha} \\end{bmatrix} \\cdot \\begin{bmatrix} 5 & 5 & 7 & 7 & 5 & 7 & 5 & 7 \\\\ 1 & 1 & 1 & 1 & 3 & 3 & 3 & 3 \\\\ 9 & 7 & 7 & 9 & 7 & 7 & 9 & 9 \\\\ \\end{bmatrix} 关系及其表达关系是一种抽象的概念，用于捕获特定领域(通常是多个对象的同一领域)的相关对象。这些对象可能是： 相互影响（彼此为二元关系；自我(?)一元） 共享一些共同的属性 当满足某些约束时，它们就会精确地对应起来 一般来说，关系形式化了来自不同领域的对象之间相互作用的概念；但是，对于每种类型的对象必须有一个指定的域。 一个n元关系是n个集合的笛卡尔积的子集。 \\mathcal{R}\\subseteq S_1 \\times S_2 \\times \\dots \\times S_n x \\in \\mathcal{R} \\Rightarrow x = (x_1,x_2,\\dots,x_n)\\text{其中，每个}x_i \\in S_i如果$n=2$，则有二元关系$\\mathcal{R}\\subseteq S \\times T$ 等价标记：$(x_1,x_2,\\dots x_n)\\in \\mathcal{R} \\Leftrightarrow \\mathcal{R}(x_1,x_2,\\dots x_n)$ 对二元关系：$(x,y)\\in \\mathcal{R} \\Leftrightarrow \\mathcal{R}(x,y) \\Leftrightarrow x\\mathcal{R}y$ 数据库实例若S为学生的一个子集，C是课程的一个子集，E为选课，则E可表示为$E=\\{(s,c):s\\ 选了\\ c\\}$ E \\subseteq S \\times C在实践中，在数据库关系上几乎总是存在各种各样的“onto”(非空性)和1-1(唯一性)约束。 若C为课程，T为开始时间，R为教室，S为课程安排，则 S=\\{(c,t,r):c 在t时间在r教室\\} \\subseteq C \\times T \\times R又比如，在运动状态里 \\mathcal{R}\\subseteq 比赛 \\times 成绩 \\times 年份 \\times 运动员应用关系在计算机科学中普遍存在 数据库是关系的集合 常见的数据结构（例如图）是关系 任何顺序都是一个关系 函数/程序/程序计算其输入和输出之间的关系 n元关系（n-ary Relations）关系可以定义同时连接$k≥1$个域$D_1,\\dots,D_k$。 在数据库中允许1元关系(n=1)。 更多的时候是二元关系(binary relations) \\mathcal{R} \\subseteq S \\times T; \\mathcal{R}=\\{(s,t):某些属性连接s,t\\}有关联的$s,t$可以写作$(s,t)\\in \\mathcal{R}$或$s\\mathcal{R}t$，没有关联的项目记作$(s,t)\\not\\in \\mathcal{R}$或$s\\not\\mathcal{R}t$ $\\mathcal{R}$可定义为 相关k元组的显式枚举(二元关系中的有序对)； 标识整个$D_1 \\times D_2 \\times \\dots D_k$相关元组的属性 从其他关系建立 函数和关系任何函数$f:S\\rightarrow T$可以被视为二元关系$\\{(s,f(s)):s\\in S\\}\\subseteq S \\times T$ 如果S × T的一个子集对应于一个函数，它必须满足一定的条件 二元关系（Binary Relations）一个二元关系$\\mathcal{R}\\subseteq S \\times T$，可以被表示为一个矩阵，行(元素)由S枚举，列为T 例如，设$S=\\{s_1,s_2,s_3\\}$，同时$T=\\{t_1,t_2,t_3,t_4\\}$，那么可能有 \\begin{bmatrix} \\bullet & \\circ & \\bullet & \\bullet \\\\ \\circ & \\bullet & \\bullet & \\bullet \\\\ \\bullet & \\bullet & \\circ & \\circ \\end{bmatrix}单个域上的关系（Relations on a Single Domain）特别重要的是同一集合的元素之间的二元关系。我们说’ R是S上的二元关系’，如果$\\mathcal{R}\\subseteq S \\times S$ 特殊（简单的）关系 （Special (Trivial) Relations）一致性（Identity）$E=\\{(x,x):x \\in S\\}$ 空（Empty）：$\\empty$ 普遍性（Universal）$U = S \\times S$ 二元关系的重要特性对于$\\mathcal{R}\\subseteq S \\times S$，可能有以下属性 \\begin{array}{1} (R) & \\text{自反性（reflexive）} & (x,x) \\in \\mathcal{R} & \\forall x \\in S \\\\ (AR) & \\text{反自反性（antireflexive）} & (x,x) \\not\\in \\mathcal{R} & \\forall x \\in S \\\\ (S) & \\text{对称性（symmetric）} & (x,y) \\in \\mathcal{R} \\Rightarrow (y,x) \\in \\mathcal{R} & \\forall x \\in S \\\\ (AS) & \\text{反对称性（antisymmetric）} & (x,y),(y,x)\\in \\mathcal{R} \\Rightarrow x =y & \\forall x,y \\in S \\\\ (T) & \\text{传递性（ transitive）} & (x,y),(y,z) \\in \\mathcal{R} \\Rightarrow (x,z) \\in \\mathcal{R} & \\forall x,y,z \\in S \\end{array}如果一个对象、概念等的任何实例都没有违反该属性的任何定义语句，那么它就被认为满足该属性。 属性的交互（Interaction of Properties）关系既可以是对称的（symmetric），也可以是反对称的（ antisymmetric）。即当$R$仅由某些对$(x, x)$组成时，$x∈S$。 一种关系不能同时是自反的（reflflexive ）和反自反的（antireflflexive），除非$S=\\empty$ 注意： nonrelexive $\\neq$ antireflexive/irreflexive nonsymmetric $\\neq$ antisymmetric 一个关系可以是 nonreflflexive但不是antireflflexive。一个关系可以是 nonsymmetric 而不是 antisymmetric。 S上的一些重要的关系 全序，如$\\leq 在数字上$ \\begin{bmatrix} \\bullet & \\bullet & \\bullet \\\\ \\circ & \\bullet & \\bullet \\\\ \\circ & \\circ & \\bullet \\end{bmatrix} 偏序，如$\\subseteq在集合$ \\begin{bmatrix} \\bullet & \\bullet & \\bullet \\\\ \\circ & \\bullet & \\circ \\\\ \\circ & \\circ & \\bullet \\end{bmatrix} , \\begin{bmatrix} \\bullet & \\bullet & \\circ \\\\ \\circ & \\bullet & \\circ \\\\ \\circ & \\circ & \\bullet \\end{bmatrix} 等价 \\begin{bmatrix} \\bullet & \\bullet & \\circ \\\\ \\bullet & \\bullet & \\circ \\\\ \\circ & \\circ & \\bullet \\end{bmatrix} 同一性 \\begin{bmatrix} \\bullet & \\circ & \\circ \\\\ \\circ & \\bullet & \\circ \\\\ \\circ & \\circ & \\bullet \\end{bmatrix}注意，其中一些是其他情况的特殊情况，如“”部分顺序”的“总顺序”，“等价”的“恒等”。 把$\\mathcal{R}$作为S和T的对应关系逆关系$\\mathcal{R}^{\\leftarrow}$: \\mathcal{R}^{\\leftarrow}=\\{(t,s)\\in T \\times S: (s,t)\\in \\mathcal{R}\\}记为$\\mathcal{R}^{\\leftarrow}\\subseteq T \\times S$ 很明显，$(\\mathcal{R}^{\\leftarrow})^{\\leftarrow}=\\mathcal{R}$ 对于子集： $\\mathcal{R}(A)\\overset{def}=\\{t\\in T:(s,t)\\in \\mathcal{R} \\text{对一些}s\\in A \\subseteq S\\}$ $\\mathcal{R}^{\\leftarrow}(B)\\overset{def}=\\{s\\in S:(s,t)\\in\\mathcal{R}对一些t\\in B \\subseteq T\\}$ 注意，$\\mathcal{R}$可以是$Pow(S)$到$Pow(T)$的关系，但是并不是所有的$Pow(S)\\rightarrow Pow(T)$都可以一一映射。 注意，$S$和$T$的轴的顺序是重要的。对于$\\mathcal{R}\\subseteq S \\times S$，它的逆矩阵$\\mathcal{R}^{\\leftarrow}$通常与$\\mathcal{R}$非常不同 结合关系 Combining Relations$\\mathcal{R}_1,\\mathcal{R}_2 \\in (R) \\Rightarrow \\mathcal{R}_1\\cup \\mathcal{R}_2 \\in (R)$ $\\mathcal{R}_1,\\mathcal{R}_2 \\in (S) \\Rightarrow \\mathcal{R}_1\\cup \\mathcal{R}_2 \\in (S)$ $\\mathcal{R}_1,\\mathcal{R}_2 \\in (T) \\not\\Rightarrow \\mathcal{R}_1\\cup \\mathcal{R}_2 \\in (R)$ 关系的合成 Composition of Relations定义 二元关系复合$R_1 \\subseteq S \\times T$且$R_2 \\subseteq T \\times U$ $R1;R2=\\{(s,u):(s,t)\\in R_1 \\land (t,u) \\in R_2 \\text{对于一些}t \\in T\\} \\subseteq S \\times U$ 小结函数：(co-)domain, image, composition $f\\circ q, f^{-1}, f^{\\leftarrow}$ 函数的属性：onto, 1-1 数组操作：transposition, sum, scalar product, product 二元关系特性：R, AR, S, AS, T","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"全部标签和分类","slug":"实用工具/全部标签和分类","date":"2021-03-05T08:10:21.000Z","updated":"2021-04-16T16:36:51.561Z","comments":true,"path":"2021/03/05/shi-yong-gong-ju/quan-bu-biao-qian-he-fen-lei/","link":"","permalink":"http://szdf123.github.io/2021/03/05/shi-yong-gong-ju/quan-bu-biao-qian-he-fen-lei/","excerpt":"","text":"快速复制全部标签- COMP9020 - COMP9021 - COMP9311 - 数据库 - 离散数学 - Python - SQL - Hexo - Java - Linux - 游戏 - 英语 - 监控系统 - 理财 - 工具 - 手册 - 教程 - 课程笔记 - 实践操作 - 生活感悟 - 编辑中 - 持续更新 - 已完稿 全部分类UNSW 实用工具 技术学习 最佳实践 学习笔记 生活纪实 标签UNSW课程 COMP9020：UNSW课程代码，课程名称为计算机基础（Foundations of Computer Science ） COMP9021：UNSW课程代码，课程名称为编程原理（Principles of Programming） COMP9311：UNSW课程代码，课程名称为数据库系统（Database Systems ） 内容与技术 数据库：数据库与其操作相关 离散数学：离散数学相关 Python：Python计算机语言相关 SQL：SQL语言相关 Hexo：Hexo技术相关 游戏：游戏开发相关 英语：英语学习相关 文档类型 工具：用于本站的记录与维护 手册：主要用户资料查询的文档 教程：用于介绍操作流程等性质的文档 课程笔记：记录课堂所学内容的文档 实践操作：记录实践操作相关的文档 文档状态 编辑中：当前文档正在编辑状态，即还未编写完成 持续更新：当前文档已包含一定信息，并将在未来持续更新其内容 已完稿：当前文档已编写完成，未来仅在疏漏、补遗时修改 分类 UNSW：澳大利亚新南威尔士大学课程相关 实用工具：可用于实际操作的内容 技术学习：用于计算机技术学习","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（3）","slug":"UNSW/COMP9020/离散数学课程笔记（3）","date":"2021-03-04T09:24:03.000Z","updated":"2021-04-28T15:37:28.222Z","comments":true,"path":"2021/03/04/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-3/","link":"","permalink":"http://szdf123.github.io/2021/03/04/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-3/","excerpt":"","text":"函数（Functions）我们把函数作为集合论的概念来处理，它是两个集合之间的一种特殊的对应。 $f: S→T$描述了集合的配对，即$f$给每个元素$s∈S$都赋一个唯一的元素$t∈T$。 $S$——$f$域（domain），符号$Dom(f)$ $T$——$f$上域（codomain），符号Codom(f) $\\{f(x):x \\in Dom(f)\\}$——$f$镜像(image)，符号$Im(f)$ Im(f)\\subseteq Codom(f)每个函数都把它的定义域映into射到它的上域，但只是映射onto到它的像上。 复合函数（Composition of Functions）$f:x \\mapsto y, f:A \\mapsto B$ 第一个式子表示x映射到y，第二个式子表示B是在f下A的映射，$f:B=\\{f(s):s \\in A\\}$ 定义：复合函数描述为$g\\circ f:x\\mapsto g(f(x))$，要求$Im(f)\\subseteq Dom(g)$ 如果一个函数将集合映射到自身，例如，当$Dom(f)=Codom(f)$，同时也因此$Im(f)\\subseteq Dom(f)$，那么该函数可以与自身组合，这被叫做迭代iterated f \\circ f, f\\circ f \\circ f, \\dots, \\text{也写做} f^2,f^3,\\dots组合是联合的associative h \\circ (g \\circ f) = (h \\circ g) \\circ f, \\text{可写作}h \\circ g \\circ fS函数的同一性identity Id_S(x)=x,x\\in S; Dom(i)=Codom(i)=Im(i)=S对于$g:s\\rightarrow T \\quad g\\circ Id_S = g, Id_T \\circ g =g$ gcd例子考虑gcd为高阶函数，定义为 gcd(f)(m,n)=\\begin{cases} m & \\text{if} \\quad m=n \\\\ f(m-n,n) & \\text{if} \\quad m>n \\\\ f(m,n-m) & \\text{if} \\quad m","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础实践记录（2）","slug":"UNSW/COMP9311/数据库基础实践记录（2）","date":"2021-03-03T16:48:25.000Z","updated":"2021-03-05T08:52:51.250Z","comments":true,"path":"2021/03/04/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-2/","link":"","permalink":"http://szdf123.github.io/2021/03/04/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-2/","excerpt":"","text":"实践目标 使用SQL数据定义语言指定模式 定义数据约束 将元组加载到数据库 背景PostgreSQL 用户手册 本次任务的目的是为有很多部门的公司建立一个简单的数据库。要求如下： 每个部门有一个管理者（manager） 每个部门有一条使命宣言（mission statement），其由一组关键词构成，如承诺、服务、创新等 公司使用数字标识各个部门 对每个员工，需要记录姓名及税务档案编号（tax file number），以及他们每周的工作时长，单位小时 每个员工可能任职于多个部门，需要记录他们在每个部门花费的时长占总时长的比例 每个员工最少就职于一个部门 部门的管理者任全职 据此，ER图可设计如下： 本次实验依据此图做数据库表结构设计 假设该公司的具体情况如下： 有三个部门：行政（Administration）、研发（Research）、销售（Sales） 行政部门编号为 #001 行政部门的使命是：创新（innovation）、可靠（reliability）、盈利（profit） 研发部门编号为 #003 研究的使命是：创新（innovation）、科技（technology） 销售部有编号为 #002 销售的使命是：以客户为中心（customer-focus），不断成长（growth） 行政管理工作由John Smith负责，他每周工作40小时 研发工作由Walter Wong负责，他每周工作50小时 销售经理是Pradeep Sharma，她每周工作30个小时 Tom Robbins每周工作35小时，一半时间做行政工作，一半时间做销售 Adam Spencer每周工作50小时，大部分时间(90%)在销售部门，其余时间在行政部门 Susan Ryan每周在行政部门工作60个小时 Steven Smooth是一名全职销售人员(每周45小时) Max Schmidt, Maria Orlowska和Yusif Budianto全职从事研发工作(每周40小时) 以下数据来自澳大利亚税务局，给出了上述每个雇员的税务档案号码: Employee Tax File # Yusif Budianto 777-654-321 Maria Orlowska 123-987-654 Tom Robbins 323-626-929 Susan Ryan 993-893-864 Max Schmidt 419-813-573 Pradeep Sharma 222-333-444 John Smith 123-234-456 Steven Smooth 632-647-973 Adam Spencer 747-400-123 Walter Wong 326-888-711 练习1. 下载3个SQL文件 其中: schema.sql：含上述ER设计的关系模式，只是它缺少图中建议的所有约束，也缺少一些常识或应用程序约束 data.sql：包含一组有效的元组，根据上面的描述填充这个模式，并满足所有的域约束 bad.sql：包含此模式的无效元组集合 以上文件位于/home/cs9311/web/21T1/lab/02中，复制这些文件到私有目录下，并查阅编辑。 2. 创建一个新数据库来保存公司信息登录grieg服务器，使用createdb命令创建company数据库 3. 将模式加载到数据库输入以下命令，载入模式文件 psql company -f schema.sql 执行此命令后，正常情况下，将会创建出4个表。 如果再次执行此命令，应该会得到一些ERROR级别信息。 在PostgreSQL控制台中通过文件载入SQL文件的方法为： psql company # 先进入到PostgreSQL控制台中，并指定company数据库 company=# \\i schema.sql # 通过\\i 命令，载入文件 输入以下命令，查看现有数据库表信息： company=# \\d # 查看所有表结构 company=# \\d Employees # 查看Employees表结构 company=# select * from Employees; # 查看Employees表数据 4. 将有效数据加载到模式中将data.sql加载到数据库中 psql company -f data.sql 此时，可通过PostgreSQL控制台查看表数据 select * from Employees; # 查询所有Employees表数据 select count(*) from Departments; # 统计部门总数 根据输出结果，试着回答以下问题： 哪位员工每周工作时间最长? 销售部经理姓什么? 每个员工每周在每个部门工作多少小时? 5. 将无效数据加载到模式中运行以下命令，将bad.sql加载到模式中 psql company -f bad.sql 查看数据库表，可知这些数据为垃圾数据，能够被加入到数据库中，是因为数据库中的各个主键、约束等都没有设置。 现在，使用drop命令，删除company数据库。 6. 向模式中添加约束原始的模式配置文件没有任何约束，仅做了如下的定义： Employees.hoursPweek属性必须是一个浮点数 Employees.givenName是一个长度不超过30个字符的字符串 员工税务文件编号为11个字符的字符串 现在，你自己考虑如何增加限制，使错误数据无法添加到数据库中 从ER图看，有一些缺失显而易见，比如缺少主键和外键约束。 现在，你需要实现的需求是： 所有的TFN都是’ddd-ddd-ddd’的形式，其中每个d代表一个数字 每个人都有名，但不一定有姓(如Prince)。 没有人可以每周工作超过一周的时间(每周有7*24 = 168小时) 每周工作负小时是没有意义的 所有部门代码都是由三位数字组成的 两个部门不能有相同的名称或相同的经理 员工在部门工作的时间百分比必须大于零 一个员工可能会在一个特定的部门中花费他们全部的时间 修改schema.sql文件，来实现上述要求。 可以使用以下命令，重复执行来检查/载入schema.sql文件 $ createdb company $ psql company -f schema.sql ... Produces error messages .... ... Fix schema definition using editor in other window ... $ dropdb company $ createdb company $ psql company -f schema.sql ... 由于PostgreSQL在创建和销毁数据库的时候花费时间太长，你可以运行drop.sql，直接清空数据库，而无需重新创建和销毁数据库。 $ createdb company ... You only need to do this once ... $ psql company ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... ... along with error messages if there are problems with your schema definition ... company=# \\i drop.sql ... Produces a bunch of DROP TABLE messages ... ... May also produce ERRORS if some tables weren't created above ... ... These ERRORS can obviously be ignored ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... ... along with error messages if there are problems with your schema definition ... company=# \\i drop.sql ... ... Continue like this until the schema loads successfully ... ... i.e. until \\i schema.sql produces no ERROR messages ... 注意，根据PostgreSQL的规则，有时其在提示错误信息时给出的行号不是实际问题的行号。因此当出现错误信息时，需要自行判断问题所在位置。 7. 将有效数据加载到新数据库中当成功载入schema后，运行以下命令，加载数据库数据 psql company ... company=# \\i data.sql 由于数据库增加了限制，在加载这些数据时可能会产生错误。思考如何修改这些数据，使他们能够加载成功。 实现这些功能的一种常规操作步骤如下： $ createdb company $ psql company -f schema.sql $ psql company -f data.sql ... Produces error messages ... ... Fix data.sql using editor in other window ... $ dropdb company $ createdb company $ psql company -f schema.sql $ psql company -f data.sql ... 由于这种操作方式太过繁琐，因此建议使用clean.sql脚本，直接清除数据库表中的全部数据 $ psql company ... company=# \\i data.sql ... If it produces error messages ... ... fix data.sql using editor in other window ... company=# \\i clean.sql ... Produces messages about deleting tuples ... company=# \\i data.sql ... Repeat until this step produces no errors ... ... 当成功载入数据后，接下来就该准备载入bad.sql中的数据。 注意，你可以试着修改clean.sql中的语句顺序，执行后看看会有什么区别。 drop.sql的作用是删除全部数据库表，clean.sql的作用是删除全部表中的数据。 8. 拒绝插入无效数据当完整插入data数据后，尝试插入bad数据： $ psql company ... company=# \\i bad.sql 所有bad中的数据在插入数据库时均应出现ERROR错误提示。如果有数据被插入到数据库，说明schema中限制条件不足。 重复以下操作，直到数据库拒绝全部bad.sql中的数据 $ psql company ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... company=# \\i data.sql ... Produces INSERT messages; loads valid data ... company=# \\i bad.sql ... If it produces any INSERT messages, your schema is incorrect, so you should use a text editor to change schema.sql ... company=# \\i drop.sql ... Produces DROP TABLE messages; leaves empty database ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... company=# \\i data.sql ... Produces INSERT messages; loads valid data... company=# \\i bad.sql ... ... Continue like this until your schema is correct i.e. until you receive only ERROR messages from \\i bad.sql ... 9. 挑战:复杂的约束1练习: 考虑如何实现以下约束: 没有一个工人可以有超过100%的时间分配 可以使用以下语句，作为测试SQL，插入非法数据： insert into WorksFor values ('747-400-123','003',10); 提示:你将需要使用PLpgSQL和 triggers，我们将在几周的课程中讨论。 10. 挑战:复杂的约束2考虑上述ER设计的一个变体，其中每个员工只为一个部门工作: 这可能会对关系模式造成的改变如下： 现在员工和部门之间的关系是n:1而不是n:m WorksFor表将被Employees表中的一个非空外键所取代(非空，因为每个员工都必须为一个部门工作) 属性“fraction”可以被删除，因为该分数总是100% 修改现有模式，使其正确地实现新的ER模型，然后尝试插入一些数据。 正确修改后，可能会出现这样的问题：如果想要增加新员工，比如已经存在一个部门才能与这个员工关联；；但是，在没有可以作为部门经理的员工前，不能插入任何部门元组。 如何解决这个问题呢? 有两种应对策略： 移除一些与Employees.worksFor属性或Departments.manager属性相关联的约束 好处： 1）这将允许在插入employee元组或Departments元组时，另一个元组非必须存在 缺点： 1） 这样做意味着ER模型所隐含的一些语义，如员工必须为某些部门工作，而部门必须有一个经理被删除了 2）在填充数据库之后，可以通过alter table命令添加约束，但是此时，如果已经存在无效数据的话，这些数据将被保留。 3）如果需要添加由新员工管理的新部门，则需要再次删除约束，将添加的内容添加到数据库，然后恢复约束。 更好的方法是，同时插入一个新雇员和一个新部门，这两个操作合并为一组操作进行处理。延迟约束检查到两个元组都插入完成之后。如果两个元组都满足coinstaints，那么操作是成功的。如果约束不满足，那么两个元组都应该被删除。将多个更新作为一个操作处理的方法称为事务。 PostgreSQL有一个方法可以指定约束检查延迟到事务结束时进行。在create table语句的文档中有关于可延迟约束的描述，在set constraints文档中有更多的解释。现在可以开始阅读这些文档，然后找出实现方法。 练习: 尝试实现这两种方案来处理“相互依赖的”外键约束。 本练习需要用到的技术总结Shell及数据库命令：createdb company # 创建company数据库 dropdb company # 删除company数据库 psql company # 进入company数据库 psql company -f schema.sql # 数据库company载入schema.sql文件 PostgreSQL命令：company=# \\d // 查看所有表结构 company=# \\d Employees // 查看Employees表结构 company=# \\i schema.sql // 在PostgreSQL控制台中载入SQL文件 SQL语句select * from Employees; # 查询所有Employees表数据 select count(*) from Departments; # 统计部门总数 create table tablename(attributes) # 建表语句 insert into WorksFor values ('747-400-123','003',10); # 向表中插入数据 delete from WorksFor; # 删除表数据 drop table WorksFor; # 删除表定义 SQL表定义及约束// 属性定义相关 char(11) // 字符，长度11 varchar(30) // 变长字符，长度30 float // 浮点类型 // 属性约束相关 PRIMARY KEY // 增加主键约束 NOT NULL // 非空约束 UNIQUE // 唯一性约束 REFERENCE tablename(keyname) // 外键约束 CHECK(condition) // 内容约束，其中condition是约束条件 // CHECK约束条件表达式相关 key LIKE 'express' // 按SQL表达式约束 key SIMILAR TO 'express' // 按正则表达式约束 key &gt;= and or &lt;= value // 键的值在数值范围内的约束 SQL样例// 建表语句 create table Employees ( tfn char(11) PRIMARY KEY check(tfn SIMILAR TO '\\d{3}-\\d{3}-\\d{3}'), givenName varchar(30) NOT NULL, familyName varchar(30), hoursPweek float check(hoursPweek &gt;=0 and hoursPweek &lt;=168) ); create table Departments ( id char(3) PRIMARY KEY check( id SIMILAR TO '\\d{3}'), name varchar(100) UNIQUE, manager char(11) UNIQUE references Employees(tfn) ); create table DeptMissions ( department char(3) REFERENCES Departments(id), keyword varchar(20) not null ); create table WorksFor ( employee char(11) REFERENCES Employees(tfn) not null, department char(3) REFERENCES Departments(id) not null, percentage float check(percentage&gt;=0 and percentage&lt;=100) ); // 清空表数据 delete from WorksFor; delete from DeptMissions; delete from Departments; delete from Employees; // 删除表定义 drop table WorksFor; drop table DeptMissions; drop table Departments; drop table Employees;","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"数据库基础实践记录（1）","slug":"UNSW/COMP9311/数据库基础实践记录（1）","date":"2021-03-03T11:34:13.000Z","updated":"2021-03-05T08:52:41.490Z","comments":true,"path":"2021/03/03/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-1/","link":"","permalink":"http://szdf123.github.io/2021/03/03/unsw/comp9311/shu-ju-ku-ji-chu-shi-jian-ji-lu-1/","excerpt":"","text":"实践目标 设置虚拟主机 在虚拟主机上安装PostgreSQL数据库服务器 创建、填充和检查一个非常小的数据库 背景学校的CSE服务器名字为grieg，使用它可以创建私有数据库PostgreSQL 练习场景一：建立一个虚拟机登录虚拟机ssh grieg # 使用学校网络登录 ssh CSEUsername@grieg.cse.unsw.edu.au # 使用外网登录 CSEUsername为 z学号 hostname # 查看主机名称 priv srvr # 创建私有目录 # 创建完成后，私有目录位置在/srvr/YOU/ 场景二：建立PostgreSQL服务运行已编写完成的脚本，安装PostgreSQL服务 ~cs9311/bin/pginit # 初始化PostgreSQL服务，仅运行一次即可 运行此命令后，将在/srvr/YOU/目录下创建一个名为pgsql的子目录，同时在/srvr/YOU/目录下生成一个名为env的文件。 pginit脚本已经检查了一些可能的错误，一般情况下能够正确安装服务。如果安装时出现警告提示，忽略即可。但如果有错误ERROR，一定要关注并解决。 安装完成后，根据脚本提示，运行以下命令，启动或关闭PostgreSQL服务 source /srvr/YOU/env # 载入环境变量 pgs start # 启动PostSQL服务 pgs stop # 停止PostSQL服务 PostgreSQL的日志文件在 pgsql/pg_xlog 注意，此目录和pgsql/base目录文件下的内容切勿手动修改，否则可能导致PostgreSQL无法正常运行。 如果想重新安装PostgreSQL，可使用以下方法 rm -rf /srvr/*YOU*/pgsql # 删除pgsql目录下的全部内容 pginit # 重新安装pgsql服务 以后每次进入grieg，都应先载入env环境变量。因此，可以将以下代码粘贴到.bash_profile 或 .bashrc 或 .profile 文件中，使登录系统后，自动载入。 if [ `hostname` = \"grieg\" ] then source /srvr/YOU/env fi 场景三：使用PostgreSQL服务器一般地，每次使用PostgreSQL服务器，应按照以下流程操作： 登录Grieg 启动PostgreSQL服务器 进行工作 停止PostgreSQL服务器 退出Grieg 注意，不要离开之前，使PostgreSQL服务始终运行！ 操作PostgreSQL的命令有： source /srvr/YOU/env # 载入环境变量 pgs start # 启动pgs服务 pgs status # 查看pgs运行状态 pgs stop # 关闭pgs服务 进入PostgreSQL的命令为： psql MyDatabase # 进入指定数据库中，其中，MyDatabase名字为要进入的数据库名称 psql -l # 查看已有数据库 小练习输入以下命令，可查看PostsqlSQL当前是否正在运行 psql -l 进入到PostgreSQL中的某个数据库后，命令提示符为 dbName=# # 管理员命令提示符 dbName=&gt; # 其他用户命令提示符 此处为PostgreSQL的官网使用手册 PostgreSQL的运行日志文件在 /srvr/YOU/pgsql/Log 小练习尝试启动和停止服务器几次，并在服务器运行和不运行时运行psql，然后分别查看屏幕显示的消息，查看内容有和区别。 小结典型的操作虚拟主机和PostgreSQL服务器的会话是这样的: ... on any CSE workstation ... $ ssh grieg ... grieg login stuff ... ... the following are all on grieg ... $ source /srvr/YOU/env $ pgs start $ psql MyDatabase ... use another xterm for editting ... $ pgs stop $ logout ... back to your original workstation ... 练习1：创建一个数据库登录服务器并启动PostgreSQL服务后，输入以下命令，创建数据库 createdb mydb # 创建指定名称的数据库，mydb为要创建的数据库命令 psql mydb # 进入到mydb数据库中 在PostgreSQL控制台，输入以下命令，控制数据库 mydb=# \\d # 查看已有关系（数据库表） mydb=# \\q # 退出数据库控制台 练习2：填充数据库使用现有SQL创建数据库表及数据 psql mydb -f ~cs9311/public_html/21T1/lab/01/mydb.sql # 使用现有SQL文件向数据库导入数据 psql mydb -f -q 文件名 # 开启静默模式 ( psql mydb -f ~cs9311/public_html/21T1/lab/01/mydb.sql 2&gt;&amp;1 ) | grep ERROR # 导入数据时仅显示ERROR信息 练习3：检查数据库在SQL标准中，标识符将忽略大小写。 mydb=# \\d Staff # 查看指定数据库表定义 mydb=# \\q # 退出数据库控制台 mydb=# select * from Staff; # 查看指定数据库表中的全部数据 小练习select * from Students where degree=3978; # 查询degree为3978的全部学生 select count(*) from Students where degree=3978; # 查询degree为3978的学生总数 select * from Staff where position like '%Professor%'; # 查询全部教授数据 select course,count(*) from Enrolment group by course; # 查询每种课程的选课人数 select c.code, c.title # 查询指定姓名教师的授课名称 from Courses c, Staff s where s.name='Andrew Taylor' and c.lecturer=s.userid; 可能遇到的问题无法重启PostgreSQL服务器pgs stop # 正常关闭PostgreSQL服务器的命令 解决思路 tail -2 /srvr/YOU/logfile # 查看日志 psql -l # 查看当前服务状态 PostgreSQL运行时生成的PID为位置在/srvr/YOU/pgsql/postmaster.pid 正常关闭时，PostgreSQL将自动删除此文件。若上次PostgreSQL未正常关闭，需要手动删除此文件 rm /srvr/YOU/pgsql/postmaster.pid # 手动删除pid文件 rm /srvr/YOU/pgsql/.s* # 删除socket文件","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"pygame游戏开发查询手册","slug":"技术学习/Python/pygame游戏开发查询手册","date":"2021-03-02T12:35:57.000Z","updated":"2021-03-10T17:27:35.495Z","comments":true,"path":"2021/03/02/ji-zhu-xue-xi/python/pygame-you-xi-kai-fa-cha-xun-shou-ce/","link":"","permalink":"http://szdf123.github.io/2021/03/02/ji-zhu-xue-xi/python/pygame-you-xi-kai-fa-cha-xun-shou-ce/","excerpt":"","text":"参考教程：https://eyehere.net/2011/python-pygame-novice-professional-index/ pygame模块pygame模块一览表 模块名 功能 pygame.cdrom 访问光驱 pygame.cursors 加载光标 pygame.display 访问显示设备 pygame.draw 绘制形状、线和点 pygame.event 管理事件 pygame.font 使用字体 pygame.image 加载和存储图片 pygame.joystick 使用游戏手柄或者 类似的东西 pygame.key 读取键盘按键 pygame.mixer 声音 pygame.mouse 鼠标 pygame.movie 播放视频 pygame.music 播放音频 pygame.overlay 访问高级视频叠加 pygame 就是我们在学的这个东西了…… pygame.rect 管理矩形区域 pygame.sndarray 操作声音数据 pygame.sprite 操作移动图像 pygame.surface 管理图像和屏幕 pygame.surfarray 管理点阵图像数据 pygame.time 管理时间和帧信息 pygame.transform 缩放和移动图像 注：有些模块在一些平台上可能不存在 pygame模块及函数根模块相关init()初始化pygame pygame.init() Surface()设置或获取pygame的surface all_colors = pygame.Surface((4096,4096), depth=24) bland_surface = pygame.Surface((256, 256)) bland_alpha_surface = pygame.Surface((256, 256), flags=SRCALPHA, depth=32) display模块blit()在屏幕上绘制图像 screen = pygame.display.set_mode((640, 480), 0, 32) screen.blit(background, (0,0)) screen.blit(ogre, (300, 200), (100 * frame_no, 0, 100, 100)) flip()交替显示画面 pygame.display.flip() fill()为Surface填充颜色 screen = pygame.display.set_mode((640, 480), 0, 32) screen.fill((255, 255, 255)) get_at()获取Surface指定位置颜色 screen.set_at(rand_pos) 注：全屏/硬件模式下，该方法调用速度很慢！ get_clip()获取剪裁区域 screen.get_clip() list_modes()显示当前主机支持的显示模式 pygame.display.list_modes() lock()锁住Surface screen.lock() set_at()设置Surface指定位置颜色 screen.set_at(rand_pos, rand_col) set_caption()设置标题 pygame.display.set_caption(“Pygame”) set_clip设置剪裁区域 screen.set_clip(0, 400, 200, 600) set_mode()pygame.display.set_mode((640, 480), 0, 32) screen = pygame.display.set_mode((640, 480), FULLSCREEN, 32) set_mode可选模式 标志位 功能 FULLSCREEN 创建一个全屏窗口 DOUBLEBUF 创建一个“双缓冲”窗口，建议在HWSURFACE或者OPENGL时使用 HWSURFACE 创建一个硬件加速的窗口，必须和FULLSCREEN同时使用 OPENGL 创建一个OPENGL渲染的窗口 RESIZABLE 创建一个可以改变大小的窗口 NOFRAME 创建一个没有边框的窗口 subsurface()设置子Surface my_font_image = Pygame.load(“font.png”)letters = []letters[“a”] = my_font_image.subsurface((0,0), (80,80))letters[“b”] = my_font_image.subsurface((80,0), (80,80)) unlock()解锁Surface screen.unlock() update()更新画面 pygame.display.update() draw模块aaline()绘制平滑直线 aalines()绘制多条平滑直线 arc()绘制弧 pygame.draw.arc(Surface, color, Rect, start_angle, stop_angle, width=1) circle()绘制圆形 pygame.draw.circle(Surface, color, pos, radius, width=0) pygame.draw.circle(screen, (0, 0, 0), (int(factor * 639.0), 120), 10) ellipse()绘制椭圆 pygame.draw.ellipse(Surface, color, Rect, width=0) line()绘制直线 pygame.draw.line(Surface, color, start_pos, end_pos, width=1) lines()绘制多条直线 pygame.draw.lines(Surface, color, closed, pointlist, width=1) rect()绘制矩形 pygame.draw.rect(Surface, color, Rect, width=0) polygon()绘制多边形 tri = [ (0, 120), (639, 100), (639, 140) ] pygame.draw.polygon(Surface, color, pointlist, width=0) pygame.draw.polygon(screen, (0, 255, 0), tri) 函数 作用 rect 绘制矩形 polygon 绘制多边形（三个及三个以上的边） circle 绘制圆 ellipse 绘制椭圆 arc 绘制圆弧 line 绘制线 lines 绘制一系列的线 aaline 绘制一根平滑的线 aalines 绘制一系列平滑的线 event 模块get()获取全部事件 pygame.event.get() set_allowed()设置允许事件 pygame.event.set_allowed() set_blocked()设置阻止事件 pygame.event.set_blocked(事件名) poll()返回真实事件 pygame.event.poll() 事件 产生途径 参数 QUIT 用户按下关闭按钮 none ATIVEEVENT Pygame被激活或者隐藏 gain, state KEYDOWN 键盘被按下 unicode, key, mod KEYUP 键盘被放开 key, mod MOUSEMOTION 鼠标移动 pos, rel, buttons MOUSEBUTTONDOWN 鼠标按下 pos, button MOUSEBUTTONUP 鼠标放开 pos, button JOYAXISMOTION 游戏手柄(Joystick or pad)移动 joy, axis, value JOYBALLMOTION 游戏球(Joy ball)?移动 joy, axis, value JOYHATMOTION 游戏手柄(Joystick)?移动 joy, axis, value JOYBUTTONDOWN 游戏手柄按下 joy, button JOYBUTTONUP 游戏手柄放开 joy, button VIDEORESIZE Pygame窗口缩放 size, w, h VIDEOEXPOSE Pygame窗口部分公开(expose)? none USEREVENT 触发了一个用户事件 code 鼠标及键盘事件：MOUSEMOTION、MOUSEBUTTONDOWN、MOUSEBUTTONUP、KEYDOWN、KEYUP 键盘值：K_xxx，如K_A、K_SPACE、K_RETURN 控制按键：KMOD_CTRL、KMOD_SHIFT、KMOD_ALT post()发送事件给pygame my_event = pygame.event.Event(KEYDOWN, key=K_SPACE, mod=0, unicode=u’ ‘) my_event = pygame.event.Event(KEYDOWN, {“key”:K_SPACE, “mod”:0, “unicode”:u’ ‘}) CATONKEYBOARD = USEREVENT+1 my_event = pygame.event.Event(CATONKEYBOARD, message=”Bad cat!”) pgame.event.post(my_event) wait()等待事件 pygame.event.wait() font模块Font()使用自定义字体 my_font = pygame.font.Font(“my_font.ttf”, 16) get_fonts()获取系统现有字体 pygame.font.get_fonts() get_linesize()获取字体高度 font = pygame.font.SysFont(“arial”, 16); font_height = font.get_linesize() SysFont()设置字体 font = pygame.font.SysFont(“arial”, 16); image模块convert()/convert_alpha()将图像数据都转化为Surface对象 background = pygame.image.load(background_image_filename).convert() render()显示文字 font.render(text, True, (0, 0, 0)), (0, y) text_surface = my_font.render(“Pygame!”, True, (0,0,0), (255, 255, 255)) save()保存图片 pygame.image.save(name_surface, “name.png”) mouse模块get_pos()获取鼠标位置 pygame.mouse.get_pos() Locals模块Rect()定义矩形 rect1 = Rect(100, 100, 200, 150) rect2 = Rect((100, 100), (200, 150)) pygame基础使用规则关于初始化import pygame # 引入pygame模块 pygame.init() # 初始化pygame pygame.quit() # 退出pygame screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # 创建游戏窗口 pygame.display.update() # 更新窗口显示 关于时钟与刷新帧率clock = pygame.time.Clock() # 获取pygame时钟 clock.tick(60) # 数字为刷新帧率 关于绘制图像bg = pygame.image.load(\"background.png\") # 加载背景图像 screen.blit(bg, (0, 0)) # 绘制图像到窗口 rect = pygame.Rect(200, 800, 140, 178) # 定义元素矩形，参数依次为X，Y，width，height 关于事件pygame.event.get() # 获取pygame的全部事件 pygame定义的事件常量pygame.QUIT # 退出事件 精灵和精灵组pygame.sprite.Sprite # 精灵类 pygame.sprite.Group # 精灵组类 继承精灵类import pygame class MySprite(pygame.sprite.Sprite): \"\"\"自定义游戏精灵\"\"\" def __init__(self, image_name, speed=1): super().__init__() self.image = pygame.image.load(image_name) self.rect = self.image.get_rect() self.speed = speed # speed为自定义的精灵属性 def update(self): self.rect.y += self.speed 使用精灵类和精灵组from sprites.my_sprites import * # 引用自定义精灵组类 my_sprite = PlaneSprite(\"sprite.png\") # 实例化精灵 sprite_group = pygame.sprite.Group(my_sprite) # 实例化精灵组 enemy_group.update() # 调用精灵组中的精灵的全部update方法 enemy_group.draw(screen) # 绘制精灵组到屏幕 游戏循环graph TD H[游戏初始化] H --&gt; I[设置游戏窗口] I --&gt; J[创建游戏时钟] J --&gt; K[创建精灵/精灵组] F[游戏循环] F --&gt; A[设置刷新帧率] A --&gt; B[事件监听] B --&gt; C[碰撞检测] C --&gt; D[更新/绘制精灵组] D --&gt; E[更新屏幕显示]","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"游戏","slug":"游戏","permalink":"http://szdf123.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"}],"author":"Benjamin"},{"title":"计算机技术英语生词本","slug":"技术学习/计算机技术英语生词本","date":"2021-03-01T09:23:15.000Z","updated":"2021-04-08T10:15:54.997Z","comments":true,"path":"2021/03/01/ji-zhu-xue-xi/ji-suan-ji-ji-zhu-ying-yu-sheng-ci-ben/","link":"","permalink":"http://szdf123.github.io/2021/03/01/ji-zhu-xue-xi/ji-suan-ji-ji-zhu-ying-yu-sheng-ci-ben/","excerpt":"","text":"2021-03-01数据库anomaly n. 异常；不规则；反常事物 update anomalies 更新异常 insertion anomalies 插入异常 deletion anomalies 删除异常 semantic adj. 语义的；语义学的 modification n. 修改，修正；改变 inconsistent adj. 不一致的；前后矛盾的 insertion n. 插入；嵌入；插入物 deletion n. 删除 generalization n. 概括；普遍化；一般化 FD (Functional Dependency) 函数依赖 derivation n. 概括；普遍化；一般化 augmentation n. 增加，增大；增加物 transitivity n. 传递性；动词的及物性；转移性 additivity n. 添加；相加性 projectivity n. 投射心理；射影对应性；投射倾向 pseudotransitivity 伪递移法则 denote vt. 表示，指示 closure n. 关闭；终止，结束 relational schema 关系模式 2021-03-04离散数学argument n.论点 declarative sentences 陈述句 permises n.前提：包含一些论点的陈述句 conclusion n. 结论 entail vt. 使需要，必需；承担；遗传给；蕴含 n. 引起；需要；继承 propositional logic 命题逻辑 formulae n.公式 formalised vi. 使形式化，使正式 implementation n. 实施，履行 valid a. 有效的，合理的 tautology n.同意反复 detote vt. 表示 evaluate vt. 评价；估价 tautology n. 同义反复；无谓的重复 irrational adj. 不合理的；无理性的；荒谬的 n. [数] 无理数 Contradiction n. 矛盾；否认；反驳 substitution n. 代替；[数] 置换；代替物 valuation n. 评价，估价；计算 parenthese n. 括号；圆括号 complementation n. 互补；互补作用 isomorphic adj. [物] 同构的；同形的 cartesian adj. 笛卡尔的；笛卡尔哲学的 auxiliary adj. 辅助的；副的；附加的；（发动机、设备等）备用的 composition n. 作文，作曲，作品；[材] 构成；合成物；成分 associative adj. 联想的；联合的；组合的 identity n. 身份；同一性，一致；特性；恒等式 partial function 偏函数 least fixpoint 最小定点 surjective adj. 满射的 injective adj. [数] 内射的；[数] 单射的 equivalent adj. （在价值、数量等方面）相等的；等价的；等效的；等量的；同意义的 invertible adj. 可逆的；倒转的 substituting n. 取代；[数] 代入 optimisation 最优化 transpose vt. 调换；移项；颠倒顺序 symmetric adj. 对称的；匀称的 scalar product 标量乘积 n-dimensional vectors n维向量 nonemptiness 非空性 ubiquitous adj. 普遍存在的；无所不在的 trivial adj. 不重要的，琐碎的；琐细的 diagonal adj. 斜的；对角线的；斜纹的 reflexive adj. （词或词形）反身的；反射性的，本能反应的； antireflective adj. 增透的；减反射的；[物] 抗反射的 symmetric adj. 对称的；匀称的 antisymmetric adj. 反对称的 transitive adj. 及物的；过渡的；可迁的 n. 传递；及物动词 equivalence n. 等价；相等；等值 2021-03-07~2021-03-09数据库基础axioms n. [数] 公理；公设；原理 generalization n. 概括；普遍化；一般化 derivation n. 起源；推导；词源，派生词；导数 derived adj. 导出的；衍生的，派生的 v. 从……衍生出，源于； model n. 模型；典型；模范；模特儿；样式 vt. 建模 singleton n. 单独的人（或物体）；单生子女，单生幼畜；单身的人； deletion n. 删除；[遗] 缺失；删除部分 modifications n. 修改；修饰；变型； 2021-03-12divisibility n. 可分性；[数] 可除性 equivalence n. 等价；相等；等值 partition vt. [数] 分割；分隔；区分 lexicographic adj. 词典编辑的；字典式的 congruent adj. 适合的，一致的；全等的；和谐的 isomorphic adj. [物] 同构的；同形的 vertex n. 顶点；[昆] 头顶；[天] 天顶 lemma n. 引理；辅助定理；论点；膜 conversely adv. 相反地 illuminating adj. 照亮的，照明的；启蒙的，有启发性的 corollary n. 推论；必然的结果 pointwise adj. [数] 逐点的 factorization n. [数] 因子分解；[数] 因式分解 isomorphic adj. [物] 同构的；同形的 subassembly n. 组件，部件 affiliation n. 友好关系；加入；联盟；从属关系 depict vt. 描述；描画 vertex n. 顶点 isomorphism n. 类质同像；同构 nonisomorphic adj. [数] 单一同态的；[生物] 单型的 automorphism n. [数] 自同构；自守 bipartite adj. 双边的；由两部分构成的；一式两份的；双方的 chromatic adj. 彩色的；色品的；易染色的 clique n. 派系；阀；私党；小圈子 inequalities n. [数] 不等式；不均等，不平衡； partitioned adj. 分割的；分区的；分段的 planarity n. [数] 平面性；平面化 deficiency n. 缺陷，缺点；缺乏；不足的数额 encompass vt. 包含；包围，环绕；完成 2021-03-28hierarchy n. 层级；等级制度 decrement n. 渐减；减缩；衰减率 fragmented adj. 片断的；成碎片的 Induction n.归纳法 orthogonal adj. [数] 正交的","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"英语","slug":"英语","permalink":"http://szdf123.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"数据库基础SQL","slug":"UNSW/COMP9311/数据库基础SQL","date":"2021-02-28T17:06:01.000Z","updated":"2021-03-15T09:28:41.197Z","comments":true,"path":"2021/03/01/unsw/comp9311/shu-ju-ku-ji-chu-sql/","link":"","permalink":"http://szdf123.github.io/2021/03/01/unsw/comp9311/shu-ju-ku-ji-chu-sql/","excerpt":"","text":"SQL（Structured Query Language）SQL即结构化查询语言，是关系数据库的标准语言 SQL 的动词 SQL功能 动词 数据查询 Select 数据定义 Create,Drop,Alter 数据操纵 Insert, Update, Delete 数据控制 Grant, Revoke SQL 的数据定义语句 操作对象 创建 删除 修改 模式 Create Schema Drop Schema 表 Create Table Drop Table Alter Table 视图 Create View Drop View 索引 Create Index Drop Index Alter Index 定义模式CREATE SCHEMA [&lt;模式名&gt;] AUTHORIZATION &lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;] CREATE SCHEMA “S-T” AUTHORIZATION WANG; 其中，模式名可隐藏，默认为&lt;用户名&gt; 本案例使用的数据本教程使用如下数据库表： Beers( name, manf ), Bars( name, addr, license )Drinkers( name, addr, phone ), Likes( drinker, beer )Sells( bar, beer, price ), Frequents( drinker, bar ) 其中，斜体加下划线内容为主键 Bars： Name Addr License Australia Hotel The Rocks 123456 Coogee Bay Hotel Coogee 966500 Lord Nelson The Rocks 123888 Marble Bar Sydney 122123 Regent Hotel Kingsford 987654 Royal Hotel Randwick 938500 Drinkers： Name Addr Phone Adam Randwick 9385-4444 Gernot Newtown 9415-3378 John Clovelly 9665-1234 Justin Mosman 9845-4321 Beers： Name Manf 80/- Caledonian Bigfoot Barley Wine Sierra Nevada Burragorang Bock George IV Inn Crown Lager Carlton Fosters Lager Carlton Invalid Stout Carlton Melbourne Bitter Carlton New Toohey’s Old Toohey’s Old Admiral Lord Nelson Pale Ale Sierra Nevada Premium Lager Cascade Red Toohey’s Sheaf Stout Toohey’s Sparkling Ale Cooper’s Stout Cooper’s Three Sheets Lord Nelson Victoria Bitter Carlton Frequents： Drinker Bar Adam Coogee Bay Hotel Gernot Lord Nelson John Coogee Bay Hotel John Lord Nelson John Australia Hotel Justin Regent Hotel Justin Marble Bar Likes: Drinker Beer Adam Crown Lager Adam Fosters Lager Adam New Gernot Premium Lager Gernot Sparkling Ale John 80/- John Bigfoot Barley Wine John Pale Ale John Three Sheets Justin Sparkling Ale Justin Victoria Bitter Sells: Bar Beer Price Australia Hotel Burragorang Bock 3.5 Coogee Bay Hotel New 2.25 Coogee Bay Hotel Old 2.5 Coogee Bay Hotel Sparkling Ale 2.8 Coogee Bay Hotel Victoria Bitter 2.3 Lord Nelson Three Sheets 3.75 Lord Nelson Old Admiral 3.75 Marble Bar New 2.8 Marble Bar Old 2.8 Marble Bar Victoria Bitter 2.8 Regent Hotel New 2.2 Regent Hotel Victoria Bitter 2.2 Royal Hotel New 2.3 Royal Hotel Old 2.3 Royal Hotel Victoria Bitter 2.3 SQL语法及样例SQL SELECT语法：π{attributes}(σCondition(Relations)) SELECT attributes FROM relations WHERE condition 例：哪个啤酒是Toohey制造的？ -- 指定where语句查询条件的方法 SELECT Name FROM Beers WHERE Manf = 'Toohey''s'; 例：查询Drinkers的名字和地址：πName,Addr(Drinkers) -- 查询结果筛选字段名的方法 SELECT Name, Addr FROM Drinkers; 例：查询Drinkers的所有信息 -- 显示所有字段的方法 SELECT * FROM Drinkers; 例：查询Beers的所有品牌和制造商 -- 显示结果为字段名重命名的方法 SELECT name AS Brand, manf AS Brewer FROM Beers; 例：查询各个酒吧售卖啤酒的售价，价格用Yen表示 -- 修改查询结果数值，并修改显示字段名的方法 SELECT bar, beer, price*120 AS PriceInYen FROM Sells; 例：查询喜欢Sparkling Ale啤酒的人，并修改显示结果为likes Cooper’s -- 修改查询结果显示内容的方法 SELECT drinker, 'likes Cooper''s' AS WhoLikes FROM Likes WHERE beer = 'Sparkling Ale'; 例：查询John喜欢的啤酒的酿酒商：πmanf (σdrinker=’John′ Likes ⋈ Beers) -- 多表联查的方法 SELECT Manf FROM Likes, Beers WHERE drinker = 'John' AND beer = name; 例：查询哪个酒吧的名字和啤酒的名字相同 -- 解决字段名冲突的方法 SELECT Bars.name FROM Bars, Beers WHERE Bars.name = Beers.name; 例：查询售价大于3.00的啤酒 -- 查询时指定表名的用法 SELECT Sells.beer FROM Sells WHERE Sells.price &gt; 3.00; 例：查询售卖New啤酒价格与Coogee Bay酒吧售卖Victoria Bitter价格相同的酒吧 -- 使用子句查询 SELECT bar FROM Sells WHERE beer = 'New' AND price = (SELECT price FROM Sells WHERE bar = 'Coogee Bay Hotel' AND beer = 'Victoria Bitter' ); -- 不使用子句查询 SELECT b2.bar FROM Sells b1, Sells b2 WHERE b1.beer = 'Victoria Bitter' and b1.bar = 'Coogee Bay Hotel' and b1.price = b2.price and b2.beer = 'New'; 例：查询John喜欢的啤酒品牌及其制造商 -- IN的使用方法 SELECT * FROM Beers WHERE name IN (SELECT beer FROM Likes WHERE drinker = 'John' ); -- 不使用IN的查询方法 SELECT Beers.* FROM Beers, Likes Where Beers.name = Likes.beer and Likes.drinker = 'John'; 例：查询只生产一种啤酒品牌的制造商 -- EXISTS的用法 SELECT name FROM Beers b1 WHERE NOT EXISTS (SELECT * FROM Beers WHERE manf = b1.manf AND name != b1.name ); 例：查询售价最高的啤酒 -- ALL的使用方法 SELECT beer FROM Sells WHERE price &gt;= ALL( SELECT price FROM sells ); 例：查询喜欢喝某品牌啤酒的人，同时他经常去的还售卖此种酒的酒吧 -- 交集INTERSECT的用法 (SELECT * FROM Likes ) INTERSECT (SELECT drinker,beer FROM Sells, Frequents WHERE Frequents.bar = Sells.bar ); 例：找到售卖Justin喜欢的所有啤酒的酒吧：πbar,beerSells ÷ (πbeer(σdrinker=′Justin′ Likes)) -- 除EXCEPT的使用 select distinct a.bar from sells a where not exists ( (select b.beer from likes b where b.drinker = 'Justin') except (select c.beer from sells c where c.bar = a.bar ) ); 例：查询New啤酒的平均售价 -- 平局值AVG的用法 SELECT AVG(price) FROM Sells WHERE beer = 'New'; 例：查询有多少酒吧售卖啤酒 -- DISTINCT的用法 SELECT COUNT(DISTINCT bar) FROM Sells; 类似的聚类函数有SUM AVG MIN MAX COUNT SQL GROUP BY语法： SELECT attributes/aggregations FROM relations WHERE condition GROUP BY attribute 例：查询有多少种不同的啤酒 -- COUNT的使用方法 SELECT COUNT(*) FROM Beers; 例：查询每种啤酒制造商制造啤酒的数量 -- GROUP BY的用法 SELECT manf, COUNT(beer) FROM Beers GROUP BY manf; 例：查询每个人其经常去的酒吧New啤酒的平均售价 -- GROUP BY的用法二 SELECT drinker, AVG(price) FROM Frequents, Sells WHERE beer = 'New' AND Frequents.bar = Sells.bar GROUP BY drinker; 例：查询每个酒吧最便宜的啤酒价格 -- GROUP BY和MIN的用法 SELECT bar, MIN(price) FROM Sells GROUP BY BAR 例：查询郊区的啤酒平均价格，不包括Rock区的酒吧 -- GROUP BY和AVG的用法 SELECT Bars.addr, AVG(Sells.price) FROM Sells, Bars WHERE Bars.addr != 'The Rocks' AND Sells.bar = Bars.name GROUP BY Bars.addr; SQL HAVING语法 SELECT attributes/aggregations FROM relations WHERE condition (on tuples) GROUP BY attribute HAVING condition (on group); 例：查询流行啤酒的均价 -- HAVING的用法 SELECT beer, AVG(price) FROM Sells GROUP BY beer HAVING COUNT(bar) &gt; 1; SQL CREATE TABLE 定义表结构语法 CREATE TABLE RelName ( attribute1 ˜ domain1 ˜ properties attribute2 ˜ domain2 ˜ properties attribute3 ˜ domain3 ˜ properties ... ) 例： CREATE TABLE Beers ( name VARCHAR(20) PRIMARY KEY, manf VARCHAR(20), ); CREATE TABLE Bars ( name VARCHAR(30) PRIMARY KEY, addr VARCHAR(30), license INTEGER ); 例： -- 定义一个主键 CREATE TABLE Beers ( name VARCHAR(20) PRIMARY KEY, manf VARCHAR(20), ); -- 定义多个主键 CREATE TABLE Beers ( name VARCHAR(20), manf VARCHAR(20), PRIMARY KEY(name, manf) ); 例： -- 指定必须具有唯一值 attribute domain UNIQUE 例： -- 定制默认值 CREATE TABLE Likes ( drinker VARCHAR(20) DEFAULT 'Joe', beer VARCHAR(30) DEFAULT 'New', PRIMARY KEY(drinker, beer) ); 例： -- NOT NULL非空约束 CREATE TABLE Likes ( drinker VARCHAR(20) PRIMARY KEY, beer VARCHAR(30) NOT NULL ); 例： -- CHECK约束 CREATE TABLE Example ( gender CHAR(1) CHECK (gender IN ('M','F')), Xvalue INT NOT NULL, Yvalue INT CHECK (Yvalue &gt; Xvalue), Zvalue FLOAT CHECK (Zvalue &gt; ( SELECT MAX(price) FROM Sells)) ); SQL INSERT 插入数据语法： -- 插入具体数据 INSERT INTO Relation VALUES (val1, val2, val3, ...) -- 按查询结果插入数据 INSERT INTO Relation ( Subquery ); 例： -- 插入一条数据 INSERT INTO Likes VALUES ('Justin', 'Old'); 例： -- 按指定字段顺序插入数据 INSERT INTO Sells(price,bar,beer) VALUES (2.50, 'Coogee Bay Hotel', 'Pale Ale'); 例： CREATE TABLE DrinkingBuddies ( name varchar(20) ); INSERT INTO DrinkingBuddies ( SELECT DISTINCT f2.drinker FROM Frequents f1, Frequents f2 WHERE f1.drinker = 'John' AND f2.drinker != 'John' AND f1.bar = f2.bar ); SQL DELETE 删除数据语法 DELETE FROM Relation WHERE Condition 例： -- 按指定条件删除表数据 DELETE FROM Likes WHERE drinker = 'Justin' AND beer = 'Sparkling Ale'; 例： -- 清空表数据 DELETE FROM R; 例：删除所有与同一制造商生产的啤酒相同的啤酒 DELETE FROM Beers b WHERE EXISTS ( SELECT name FROM Beers WHERE manf = b.manf AND name != b.name); SQL UPDTE 更新表数据语法： UPDATE R SET list of assignments WHERE Condition 例： -- 更新一条数据 UPDATE Drinkers SET addr = 'Coogee' , phone = '9665-4321' WHERE name = 'John'; 例： -- 更新多条数据 UPDATE Sells SET price = 3.00 WHERE price &gt; 3.00; 例： -- 每种啤酒的售价提升10% UPDATE Sells SET price = price * 1.10; ALTER TABLE 修改表结构语句语法： ALTER TABLE Relation Modifications 例： -- 增加表字段 ALTER TABLE Bars ADD phone char(10) DEFAULT 'Unlisted'; 例： -- 增加多个表字段 ALTER TABLE Bars Add opens NUMERIC(4,2) DEFAULT 10.00 , Add closes NUMERIC(4,2) DEFAULT 23.00 , Add manager VARCHAR(20) ; SQL VIEWS语法： -- 创建View CREATE VIEW ViewName AS Query -- 删除View DROP VIEW ViewName 例： CREATE VIEW MyBeers AS SELECT name, manf FROM Beers WHERE manf = 'Carlton'; SELECT * FROM MyBeers; 例： CREATE VIEW InnerCityHotels AS SELECT name, license FROM Bars WHERE addr = 'The Rocks' OR addr = 'Sydney'; SELECT * FROM InnerCityHotels; 例： CREATE VIEW InnerCityPubs AS SELECT name AS pub, license AS lic FROM Bars WHERE addr IN ('The Rocks', 'Sydney'); CREATE VIEW InnerCityPubs(pub,lic) AS SELECT name, license FROM Bars WHERE addr IN ('The Rocks', 'Sydney'); CREATE VIEW InnerCityHotels AS SELECT name, license FROM Bars WHERE addr IN ('The Rocks', 'Sydney'); SELECT pub FROM InnerCityHotels WHERE lic = '123456'; 例： -- 通过VIEW添加数据 CREATE VIEW CityHotels AS SELECT name,addr FROM Bars WHERE addr IN ('The Rocks', 'Sydney'); INSERT INTO CityHotels VALUES ('Jackson''s on George', 'Sydney'); SELECT * FROM CityHotels; SQL DROP TABLE删除表语法 DROP TABLE RelName; SQL的详细规则SQL查询语法： SELECT attributes FROM relations WHERE condition 例：哪个啤酒是Toohey制造的？ 答：**SELECT Name FROM Beers WHERE** Manf = ‘Toohey’’s’; 结果： Name New Old Red Sheaf Stout 注意： 字符中含有’符号时，需要双写为’’ SELECT功能可以使用关系代数中的选择（Select）、投影（Project）、连接（Join） SQL标示符标示符名称用于标识对象，如表、属性、视图等 SQL中的标识符使用与普通编程语言类似的约定，如： 必须以字母开头的字母数字序列 不区分大小写 不允使用许保留单词 SQL关键字SQL经常使用的关键字有： ALTER AND CREATEFROM INSERT NOT ORSELECT TABLE WHERE 注： 对于PostgreSQL的关键字，请参阅相关文档。 SQL数据类型SQL关系中的所有属性都指定了域 SQL支持一小部分有用的内置数据类型：字符串、数字、日期、位字符串 在PostgreSQL中允许自定义数据类型 各种类型的转换均可用，例如：日期到字符串，字符串到日期，整数为实数……以“使其有意义的方法”自动适应 自动执行基本域（类型）检查 约束可以用来“强制”更复杂的域成员条件 空值（NULL）是所有数据类型的成员 所有类型均可以使用比较操作符：&lt; &gt; &lt;= &gt;= = != 在WHERE表达式中可用布尔操作符AND、OR、NOT来组合比较结果 与NULL的比较结果为FALSE 可以使用以下命令显式测试NULL： attr IS NULL attr IS NOT NULL 大多数数据类型也有特定类型的操作可用（例如数字的算术）。实际应用哪些操作取决于实现。 SQL字符串可以使用两种字符串： CHAR(n)…使用n个字节，左对齐，填充空白 VARCHAR(n)…使用0到n个字节，没有填充 字符串类型可以通过空白填充或截断来强制转换。 字符串字面值使用单引号写入。’John’ = “John” = “John “ != “JOHN” str1 &lt; str2…使用字典顺序进行比较 str LIKE模式…匹配字符串到模式 两种模式匹配： %匹配任何字符（如 *）_匹配任何单个字符（如 .） 例如：Name LIKE ‘Ja%’ 以“Ja”开头Name LIKE ‘_i%’ 名称以“i”作为第二个字母Name LIKE ‘%o%o%’ 名称包含两个“o” 字符串操作string || string … 连接两个字符串 例如：‘Post’|| ‘greSQL’ -&gt; PostgreSQL LENGTH(str) … 返回字符串长度 SUBSTR (str,开始,长度)……从字符串中提取字符 substring(‘Thomas’, 2, 3) -&gt; hom SQL日期日期只是特殊格式的字符串，通过一系列操作来实现日期语义。 经典的格式为 DD-Mon-YYYY，如：’18-Aug-1998’ 接受其他格式 可使用比较运算符&lt;和&gt;进行比较 (start1, end1) OVERLAPS (start2, end2) 如果第一段日期与第二段日期有重叠，则返回True，否则返回False 例如： SELECT (DATE ‘2001-02-16’, DATE ‘2001-12-21’) OVERLAPS (DATE ‘2001-10-30’, DATE ‘2002-10-30’); -&gt; 结果: True SQL数字可以使用各种类型的数字：smallint, int, bigint…2字节，4字节和8字节的整数real, double precision…4字节8字节的浮点数numeric(precision, scale)scale是小数点右侧的小数部分的数。precision是整个数字中所有有效数字的总数 算数运算符：+ - * / abs ceil floor power sqrt sin … 一些运算适用于关系中的一列数字： AVG (attr)… 属性值的平均值COUNT(attr)… 属性列的行数MIN/MAX(attr)… 最小/最大的attr值SUM(attr)… attr的值的总和 NULL 在算术操作生成结果为NULL，但参与列操作时被忽略 SQL元组和集合Tuple和set常量都写成(val1, val2, val3, … ) 正确的解释是从上下文中得出的 例如： Tuple含义： Student(stude#, name, course) ( 2177364, ’Jack Smith’, ’BSc’) Set含义 SELECT name FROM Employees WHERE job IN (’Lecturer’, ’Tutor’, ’Professor’); 查询单个关系格式（关系代数）： 从关系R FROM子句 在 WHERE 子句中使用 Condition 实现 σ 在 SELECT 子句中使用 Attributes 实现 π SELECT Attributes FROM R WHERE Conditions 从操作上来说，我们考虑的是一个元组变量，其范围涵盖了关系的所有元组。 操作的语义： FOR EACH tuple T in R DO check whether T satisfies the condition in the WHERE clause IF it does THEN print the attributes of T that are specified in the SELECT clause END END SQL投影假设一个关系R和属性 X ⊆ R. πX (R) 在SQL中实现如下: SELECT X FROM R 例子： 投影drinkers的名字：πName(Drinkers) SELECT Name FROM Drinkers; 结果为： Name Adam Gernot John Justin 例子： drinkers的名字和地址 πName,Addr(Drinkers) SELECT Name, Addr FROM Drinkers; 结果为： NAME ADDR Adam Randwick Gernot Newtown John Clovelly Justin Mosman 符号∗表示所有属性的列表。 例如： drinkers的所有信息： SELECT * FROM Drinkers; 结果： ame Addr Phone Adam Randwick 9385-4444 Gernot Newtown 9415-3378 John Clovelly 9665-1234 Justin Mosman 9845-4321 SQL选择σCond(Rel) 在SQL中实现如下: SELECT * FROM Rel WHERE Cond 例如：找出Regent Hotel对新产品的价格 SELECT price FROM Sells WHERE bar = ’Regent Hotel’ AND beer = ’New’; 结果：| PRICE || ——- || 22 | 条件可以是任意复杂的布尔值表达式，使用前面提到的操作符。 典型的SELECT查询格式为： SELECT a1, a2, a3 FROM Rel WHERE Cond 这对应于select后面跟着project： π{a1,a2,a3}(σCond(Rel)) 使用AS重命名Ullman/Widom定义了一个重命名操作符ρ，以避免名称冲突。 例如，“学术”和“学生”的地址栏 例子：ρBeers(Brand,Brewer)(Beers) 给出一个新的关系，使用与Beers相同的数据，但是属性名称改变了。 SQL提供AS来解决这个问题，它用于SELECT部分。 例子 SELECT name AS Brand, manf AS Brewer FROM Beers; 结果：| BRAND| BREWER|| ————————————-| ——————————|| 80/- | Caledonian|| Bigfoot Barley Wine| Sierra Nevada|| Burragorang Bock | George IV Inn|| Crown Lager| Carlton|| Fosters Lager | Carlton|| Invalid Stout| Carlton| 表达式作为列中的值AS还可以用于引入计算值 SELECT bar, beer, price*120 AS PriceInYen 结果： BAR BEER PRICEINYEN Australia Hotel Burragorang Bock 420 Coogee Bay Hotel New 270 Coogee Bay Hotel Old 300 Coogee Bay Hotel Sparkling Ale 336 Coogee Bay Hotel Victoria Bitter 276 这只是显示数据库数据，但没有对数据库进行更改 在结果表中插入文本技巧：要将文本放入输出列，请使用带有AS的常量表达式。 SELECT drinker, ‘likes Cooper’’s’ AS WhoLikes FROM Likes WHERE beer = ‘Sparkling Ale’; 结果：|DRINKER|WHOLIKES||———————|———————||Gernot|likes Cooper’s||Justin |likes Cooper’s| 查询多关系找到约翰喜欢的啤酒酿造商。 SELECT Manf FROM Likes, Beers WHERE drinker = ‘John’ AND beer = name; 结果：| MANF||——————————||Caledonian||Sierra Nevada||Sierra Nevada||Lord Nelson| 注意：可以使用DISTINCT来消除重复项。 关系代数：πmanf (σdrinker=‘John′ Likes ⋈ Beers). 语法： SELECT Attributes FROM R1, R2, ... WHERE Condition FROM clause contains a list of relations. SQL SELECT语句的几个关系： SELECT Attributes FROM R1, R2, ... WHERE Condition 形式语义（关系代数）： 从乘积R1 × R2 ×…在FROM子句应用σ使用条件在WHERE子句应用π使用属性在SELECT子句 SELECT的操作语义: FOR EACH tuple T1 in R1 DO FOR EACH tuple T2 in R2 DO ... check WHERE condition for current assignment of T1, T2, ... vars IF holds THEN print attributes of T1, T2, ... specified in SELECT END END ... END 由于效率的原因，它不以这种方式实现！ 属性名称冲突如果选择条件引用两个关系，或关系具有相同名称的属性，则可以使用关系名称来消除歧义。 例子： 哪些酒店的名字和啤酒相同? SELECT Bars.name FROM Bars, Beers WHERE Bars.name = Beers.name; 结果： 它们都没有，所以结果是空的。 可以使用这样的限定名，即使没有歧义: SELECT Sells.beer FROM Sells WHERE Sells.price &gt; 3.00; 建议:只有在绝对必要时才对属性名进行限定。不能使用SQL的AS操作符来解析名称冲突。 表名称冲突如果我们在SELECT中使用同一个关系两次，那么relationship-dot-attribute约定将不起作用。 要处理这个问题，我们需要在FROM子句中为关系的每个“实例”定义新的名称。 举例：找几双同一厂商生产的啤酒。 注意：我们应该避免：将啤酒与自身搭配如(New,New)相同的配对如 (New,Old) (Old,New) SELECT b1.name, b2.name FROM Beers b1, Beers b2 WHERE b1.manf = b2.manf AND b1.name &lt; b2.name; 子查询SELECT-FROM-WHERE查询的结果可以在另一个查询的WHERE子句中使用。 最简单的例子:子查询返回一个元组。可以将结果视为常数值并使用=。","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"数据库基础课程笔记（3）","slug":"UNSW/COMP9311/数据库基础课程笔记（3）","date":"2021-02-28T15:20:47.000Z","updated":"2021-05-04T15:47:23.176Z","comments":true,"path":"2021/02/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-3/","link":"","permalink":"http://szdf123.github.io/2021/02/28/unsw/comp9311/shu-ju-ku-ji-chu-ke-cheng-bi-ji-3/","excerpt":"","text":"关系代数关系数据库语言的分类关系代数语言：用对关系的运算来表达查询要求 关系演算语言：用谓词来表达查询要求 元组关系演算语言谓词变元的基本对象是元组变量代表：APLHA, QUEL 域关系演算语言谓词变元的基本对象是域变量代表：QBE 具有关系代数和关系演算双重特点的语言代表：SQL（Structured Query Language） 关系代数定义关系代数是一种抽象的查询语言，它用对关系的运算来表达查询。 关系代数是一种过程性DML。 关系代数的特点 运算对象是关系 运算结果亦为关系 关系代数的运算符有两类：集合运算符和专门的关系运算符 运算符 含义 集合运算符 $\\cup $ 并（Union） $- $ 差（Difference） $\\cap $ 交（Intersection） $\\times$ 笛卡尔积（Cartesian Product） 专门的关系运算符 $\\sigma$ 选择（Select） $ \\pi$ 投影（Project） $\\Join$ 连接（Join） $\\div$ 除（Divide） 一些基本概念（1）$R,t\\in R,t[A_i]$设关系模式为$R(A_1,A_2,\\dots , A_n)$它的一个关系设为$R$$t \\in R $表示$t$是$R$的一个元组$t[A_i]$则表示元组$t$中相应于属性$A_i$的一个分量 （2）$A,t[A], \\bar{A}$若$A={A_{i1}, A_{i2}, \\dots, A_{ik}}$ ，其中$A_{i1}, A_{i2}, \\dots, A_{ik}$ 是$A_{1}, A_{2}, \\dots, A_{n}$ 中的一部分，则$A$称为属性列或属性组。$t[A]=(t[A_{i1}],t[A_{i2}],\\dots,t[A_{ik}])$表示元组$t$在属性列$A$上诸分量的集合。$\\bar{A}$则表示${A_{1}, A_{2}, \\dots, A_{n}}$中去掉${A_{i1}, A_{i2}, \\dots, A_{ik}}$后剩余的属性组。 (3)$\\overset{\\frown}{t_rt_s}$$R$为$n$目关系，$S$为$m$目关系。$t_r\\in R,t_s \\in S, \\overset{\\frown}{t_rt_s}$称为元组的连接。$\\overset{\\frown}{t_rt_s}$是一个$n+m$列的元组，前$n$个分量为$R$中的一个$n$元组，后$m$个分量为$S$中的一个$m$元组。 (4)象集$Z_x$给定一个关系$R（X，Z），X$和$Z$为属性组。 当$t[X]=x$时，$x$在$R$中的象集（Images Set）为：$Zx={t[Z]|,t ∈R,t[X]=x}$它表示$R$中属性组$X$上值为$x$的诸元组在$Z$上分量的集合 本篇例题所使用数据库表STUDENT表： Person# Name 1 Dr.C.C.Chen 3 Ms.K.Juliff 4 Ms.J.Gledill 5 Ms.B.K.Lee RESEARCHER表： Person# Name 1 Dr.C.C.Chen 2 Dr.R.G.Wilkinson COURSE表： Department Name Psychology Ph.D. Comp.Sci. Ph.D. Comp.Sci. M.Sc. Psychology M.Sc. ENROLMENT表： Enrolment# Supervisee Supervisor Department Name 1 1 2 Psychology Ph.D. 2 3 1 Comp.Sci. Ph.D. 3 4 1 Comp.Sci. M.Sc. 4 5 1 Comp.Sci. M.Sc. 例：选择学生为1的选课记录： \\sigma_{(Supervisor=1)}(ENROLMENT)结果为： Enrolment# Supervisee Supervisor Department Name 2 3 1 Comp.Sci. Ph.D. 3 4 1 Comp.Sci. M.Sc. 4 5 1 Comp.Sci. M.Sc. 传统的集合运算1. 并（Union）求并集是两个关系元组的集合理论并集。 r\\cup s=\\{t:t∈r 或 t∈s\\}注意，求并集要求$R$和$S$是兼容的，具体要求如下： $R$和$S$ 具有相同的目$n$（即两个关系都有$n$个属性） ，两者的属性之间有1-1的对应关系 相应的属性取自同一个域$R\\cup S$ 仍为$n$目关系，由属于$R$或属于$S$的元组组成$R\\cup S = \\{ t|t ∈ R\\lor t \\in S\\}$ 例子 设$R_1 ← σ _{(Supervisor=2)} (ENROLMENT)$， $R_2 ← σ_{(Name=”M.Sc”)} (ENROLMENT)$ 那么，$R_1 \\cup R_2=$ Enrolment# Supervisee Supervisor Department Name 1 1 2 Psych. Ph.D. 3 4 1 Comp.Sci. M.Sc. 4 5 1 Comp.Sci. M.Sc. 例子 $\\text{STUDENT} \\cup \\text{RESEARCHER}=$ Person# Name 1 Dr.C.C.Chen 3 Ms.K.Juliff 4 Ms.J.Gledill 5 Ms.B.K.Lee 2 Dr.R.G.Wilkinson 2. 差（Difference）求差集即为求两个关系的元组的集合差。 r−s=\\{t:t∈r 且 t∉s\\} $R$和$S$ 具有相同的目$n$ 相应的属性取自同一个域$R - S $ 仍为$n$目关系，由属于$R$而不属于$S$的所有元组组成$R -S = \\{ t|t∈R∧t∉S \\}$ 例子： $\\text{STUDENT} − \\text{RESEARCHER} =$ Person# Name 3 Ms K. Juliff 4 Ms J. Gledhill 5 Ms B.K. Lee 3.交（Intersection）求交即求两个关系元组的集合理论交集。 r\\cap s=\\{t:t∈r and t∈s\\} $R$和$S$具有相同的目$n$ 相应的属性取自同一个域 $R∩S$ 仍为$n$目关系，由既属于$R$又属于$S$的元组组成 $R∩S = \\{ t|t ∈ R∧t ∈S \\}\\\\ R∩S = R –(R-S）$ 例子 设$R_1 ← σ_{(Supervisor=1)} (ENROLMENT)\\quad R_2 ← σ_{ (Name=“Ph.D.′′)} (ENROLMENT)$ 则$R_1 \\cap R_2=$ Enrolment# Supervisee Supervisor Department Name 2 3 1 Comp.Sci. Ph.D. 例子： $\\text{STUDENT} ∩ \\text{RESEARCHER} =$ Person# Name 1 Dr C.C. Chen 4.笛卡尔积（Cartesian Product） r×s=\\{t_1||t_2:t_1∈r 且 t_2∈s\\}其中$t_1||t_2$表示元组的拼接。 $R: n$目关系，$k_1$个元组； $S: m$目关系，$k_2$个元组对于$R×S$，有 列：$（n+m）$列元组的集合元组的前$n$列是关系$R$的一个元组后$m$列是关系$S$的一个元组 行：$k_1×k_2$个元组$R×S = \\{\\overset{\\frown}{t_rt_s}|t_r ∈R ∧ t_s∈S \\}$ 例子： $\\text{ENROLMENT} × \\text{RESEARCHER}=$ E’ment# S’ee S’or D’ment E’ment. Name Person# R’cher. Name 1 1 2 Psych. Ph.D. 1 Dr C.C. Chen 1 1 2 Psych. Ph.D. 2 Dr R.G.Wilkinson 2 3 1 Comp.Sci Ph.D. 1 Dr C.C. Chen 2 3 1 Comp.Sci Ph.D. 2 Dr R.G.Wilkinson 3 4 1 Comp.Sci M.Sc. 1 Dr C.C. Chen 3 4 1 Comp.Sci M.Sc. 2 Dr R.G.Wilkinson 4 5 1 Comp.Sci M.Sc. 1 Dr C.C. Chen 4 5 1 Comp.Sci M.Sc. 2 Dr R.G.Wilkinson 更有用的是$R_1←\\text{ENROLLMENT} × \\text{RESEARCHER}$ σ_{(Supervisor=Person\\#)}(R_1)= E’ment# S’ee S’or D’ment E’ment. Name Person# R’cher. Name 1 1 2 Psych. Ph.D. 2 Dr R.G.Wilkinson 2 3 1 Comp.Sci. Ph.D. 1 Dr C.C. Chen 3 4 1 Comp.Sci. M.Sc. 1 Dr C.C. Chen 4 5 1 Comp.Sci. M.Sc. 1 Dr C.C. Chen 或者更好是：$R_1 ← \\text{ENROLMENT} × \\text{RESEARCHER}$ $R_2 ← σ_{(Supervisor=Person#)}(R1) =π\\{E′ment#,S′ee,S′or,R′cher.Name,D′ment,E′ment.Name\\}(R2) =$ E’ment# S’ee S’or R’cher. Name D’ment E’ment. Name 1 1 2 Dr R.G.Wilkinson Psych. Ph.D. 2 3 1 Dr C.C. Chen Comp.Sci. Ph.D. 3 4 1 Dr C.C. Chen Comp.Sci. M.Sc. 4 5 1 Dr C.C. Chen Comp.Sci. M.Sc. 最后一种连接也称为自然连接，倒数第二种是等距连接。 数据库特有的运算5. 选择 Select选择一个关系$r$元组的子集，满足某些条件。 \\sigma_B(r)= {r \\in r:B(t)}B是选择条件，由使用AND、OR和NOT组合的选择子句组成。 选择子句有这样的形式： &lt;attribute name&gt; &lt;op&gt; &lt;constant&gt; 或 &lt;attribute name&gt; &lt;op&gt; &lt;attribute name&gt; 其中 ，为$=, &lt;, ≤, &gt;, ≥ , ≠$之一 例：请选择选课记录为1且不是Ph.D头衔的学生： \\sigma_{(Supervisor=1) AND\\ NOT (Name \\neq \"Ph.D.\")}(ENROLMENT)结果为：| Enrolment# | Supervisee | Supervisor | Department | Name || ————— | ————— | ————— | ————— | ——- || 3 | 4 | 1 | Comp.Sci. | M.Sc. || 4 | 5 | 1 | Comp.Sci. | M.Sc. | 选择操作具有的属性交换性（Commutative）： σ_{ } (σ_{ } (R)) = σ_{ } (σ_{ } (R))连续的选择可以组合起来： σ_{} (σ_{ } (R)) = σ_{ AND } (R)6. 投影 PROJECT投影即映射到一个关系属性的子集$X$上。 π_X(r)=\\{t[X]:t∈r\\}注意，元组$t$是从属性到它们域的元素的映射。$t[X]$是映射到属性$X$集合的限制。 例：学生们都选哪些课程? π_{Department,Name}(ENROLMENT)=结果为：| Department|Name || —— | —— ||Psych.|Ph.D.||Comp.Sci.|Ph.D.|| Comp.Sci.|M.Sc.| 投影操作具有的属性如果包含中的所有属性，那么 π_{} (π_{} (R)) = π_{ } (R)否则，这个操作没有正确定义 选择交换（commute），注意，$B$的范围不能在$X$之外 π_{X} (σ_{B}(R)) = σ_{B} (π_{X}(R))练习：用以下方法验证上述结论 π_{\\{Department\\}} (σ_{(Department=“Psychology”)}(ENROLMENT))注意，$π(R \\cup S)) = π(R)\\cup π(S)$是正确的，而$π(R\\cap S)) = π(R)\\cap π(S)$是不正确的 7. 连接 Join用于组合两个关系中的相关元组。 $\\theta$连接（theta join） r⋈B s=\\{t_1||t_2:t_1∈r 且 t_2∈s 且 B\\}$B$由$A_iθ b_j$形式的条件组成，其中$A_i$是$R$的属性，$B_j$是$S$的属性，$θ$是比较运算符。 等值连接（Equi-join）是一个$\\theta$连接，其中每个比较操作符都是“=”。 例子： {\\text{ENROLEMENT} \\\\ \\text{RESEARCHER}}⋈(Supervisor=Person\\#)自然连接（Natural join）是一种每次比较只保留一个属性的等值连接。 例子： {\\text{ENROLEMENT} \\\\ \\text{RESEARCHER}}⋈(Supervisor),(Person\\#)问：如果两个关系没有联接属性，如何定义联接结果？为什么？ $R (A, B) ⋈ S (B, C) ⋈ T (C, D)$ 注意： 在自然连接中，可能有几对连接属性 例子： COURSE Department Name By Comp.Sci Ph.D. Research Comp.Sci. M.Sc. Research Psychology M.Sc. Coursework {\\text{ENROLEMENT} \\\\ \\text{COURSE}}⋈(Department,Name),(Department,Name) 如果连接属性对恰好是命名相同的那些，我们可以这样写 \\text{ENROLMENT}⋈\\text{COURSE}3.8 除 Divide假设$R$是$Z$上的一个关系式，$S$在$X$上，且$X\\subseteq Z$，令$Y = Z−X$，则$R ÷ S$也是在$Y$上的关系 R ÷ S = \\{t: t × S\\subseteq R\\}例子： P| A | B || —— | —— || a1 | b1 || a1 | b2 || a2 | b1 || a3 | b2 || a4 | b1 || a5 | b1 || a5 | b2 | Q B b1 b2 $P÷Q=$ A a1 a5","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"Python3教程笔记（1）","slug":"技术学习/Python/Python3教程笔记（1）","date":"2021-02-26T14:18:55.000Z","updated":"2021-03-08T05:53:37.640Z","comments":true,"path":"2021/02/26/ji-zhu-xue-xi/python/python3-jiao-cheng-bi-ji-1/","link":"","permalink":"http://szdf123.github.io/2021/02/26/ji-zhu-xue-xi/python/python3-jiao-cheng-bi-ji-1/","excerpt":"","text":"本文根据菜鸟教程整理 语法基础语法编码 默认编码：UTF-8 # -*- coding: cp-1252 -*- 标示符需要符合以下正则表达式： [_A-Za-z]+[_A-Za-z0-9]* （变量名也支持中文） python保留字&gt;&gt;&gt; import keyword &gt;&gt;&gt; keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释单行注释 #，多行注释 ‘’’和 “”” 行与缩进python使用行与缩进表示代码块，不使用{}等符号 多行语句使用== \\\\==实现多行语句 在 [], {}, 或 () 中，不需要使用多行语句 数字(Number)类型整数int、布尔型bool、浮点数float和复数complex 字符串(String) 单引号’’及双引号””语义完全相同 使用三引号定义多行字符串 转义字符为\\\\ 使用r’内容’，使字符串中的内容不转义 使用+号拼接，使用*号重复 索引左侧数从0开始，右侧数从-1开始 没有单独的字符类型 字符串截取：变量[头下标:尾下标:步长] 空行用于分割函数或类，不是Python语法，仅用于便于日后维护 等待用户输入#!/usr/bin/python3 input(\"\\n\\n按下 enter 键后退出。\") 同一行显示多条语句语句见使用;分割 多个语句构成代码组即缩进相同的一组语句构成一个代码块 print 输出 print 默认输出后换行 不换行需要在尾部加上 end=”” import 与 from…import 导入整个模块：import somemodule 从模块中导入函数： from somemodule import firstfunc, secondfunc, thirdfunc 导入模块中的全部函数： from somemodule import * 命令行参数可使用python -h命令查看python帮助 Python3 基本数据类型变量声明及赋值 定义变量时不需要声明类型 使用=给变量赋值 使用del删除变量 多个变量赋值允许同时为多个变量赋值，格式为 a = b = c = 1 # a,b,c均赋值为1 a, b, c = 1, 2, \"runoob\" # a,b,c分别赋值 标准数据类型 Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组） 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合） Number（数字）支持 int、float、bool、complex（复数） Python3 没有Long，Python2有Long类型 type(a) # 查询对象类型，不会认为子类是一种父类类型 isinstance(a, int) # 判断对象是否为指定类型，认为子类是一种父类类型 基本数学运算&gt;&gt;&gt; 5 + 4 # 加法 &gt;&gt;&gt; 4.3 - 2 # 减法 &gt;&gt;&gt; 3 * 7 # 乘法 &gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数 &gt;&gt;&gt; 2 // 4 # 除法，得到一个整数 &gt;&gt;&gt; 17 % 3 # 取余 &gt;&gt;&gt; 2 ** 5 # 乘方 String（字符串） 使用’’或“”定义，或使用 “””…””” ‘’’…’’’ 跨越多行定义 使用\\转义 截取字符串方法 变量名[头下标:尾下标] 使用+连接字符串，使用*重复字符串 使用r’’定义原始不转义字符串 索引从左往右以0开始，从右往左以-1开始 List（列表） 使用[]符号定义，元素间使用,符号分割 列表中的数据类型可以不相同 可以被截取，截取方式为：变量名[头下标:尾下标] 或 变量名[头下标:尾下标:步长] 可以被索引和切片，索引值以 0 为开始值，-1 为从末尾的开始位置 加号 + 是列表连接运算符，星号 * 是重复操作 列表中的元素可以改变 a[0] = 9 # 改变列表单个值 a[2:5] = [13, 14, 15] # 改变列表多个值 a[2:4] = [] # 删除列表中的指定项数据 Tuple（元组） 使用()符号定义，元素之间用逗号隔开 元组的元素不能修改 可以被索引且下标索引从0开始，-1 为从末尾开始的位置 可以被截取，截取方式为：变量名[头下标:尾下标] 或 变量名[头下标:尾下标:步长] 元组的元素可以是可变的对象，比如list列表 string、list 和 tuple 都属于 sequence（序列） Set（集合） 使用大括号 { } 或者 set() 函数创建集合 # 集合的运算 a - b # a 和 b 的差集 a | b # a 和 b 的并集 a &amp; b # a 和 b 的交集 a ^ b # a 和 b 中不同时存在的元素 Dictionary（字典） 使用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合 列表是有序的对象集合，字典是无序的对象集合 键(key)必须使用不可变类型 在同一个字典中，键(key)必须是唯一的，不能重复 字典类型也有一些内置的函数，例如clear()、keys()、values() 创建空字典使用 { } 字典是一种映射类型，它的元素是键值对 # 字典的基本使用方法 dict['one'] # 输出键为 'one' 的值 dict[2] # 输出键为 2 的值 print (tinydict) # 输出完整的字典到控制台 tinydict.keys() # 输出所有键 tinydict.values() # 输出所有值 # 构造函数 dict() 可以直接从键值对序列中构建字典 dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)]) {x: x**2 for x in (2, 4, 6)} dict(Runoob=1, Google=2, Taobao=3) Python数据类型转换 函数 描述 int(x [,base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 运算符Python算术运算符 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 31 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -11 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 210 / 除 - x 除以 y b / a 输出结果 2.1 % 取模 - 返回除法的余数 b % a 输出结果 1 ** 幂 - 返回x的y次幂 a**b 为10的21次方 // 取整除 - 向下取接近商的整数 &gt;&gt;&gt; 9//2 # 4&gt;&gt;&gt; -9//2 # -5 Python比较运算符 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。 (a &lt; b) 返回 True。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 True。 Python赋值运算符 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c = a 等效于 c = c a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a := 海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。 在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) &gt; 10: print(f\"List is too long ({n} elements, expected &lt;= 10)\") Python位运算符 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 $#124; 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a \\ b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 Python逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False Python成员运算符 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 Python身份运算符 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 id() 函数用于获取对象内存地址 is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。 Python运算符优先级 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，求余数和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 逻辑比较中，顺序 not&gt;and&gt;or Python3不再支持 &lt;&gt; 运算符 数字(Number) 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。 浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250） 复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 Python 数字类型转换 int(x) 将x转换为一个整数。 float(x) 将x转换到一个浮点数。 complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。 complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。 Python 数字运算加+, 减-,乘 * ,除/,取整除//,幂** 在交互模式中，最后被输出的表达式结果被赋值给变量 _ 数学函数 函数 返回值 ( 描述 ) abs(x) 返回数字的绝对值，如abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如math.ceil(4.1) 返回 5 cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换。 exp(x) 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045 fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0 floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4 log(x) 如math.log(math.e)返回1.0,math.log(100,10)返回2.0 log10(x) 返回以10为基数的x的对数，如math.log10(100)返回 2.0 max(x1, x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。其实准确的说是保留值将保留到离上一位更近的一端。 sqrt(x) 返回数字x的平方根。 随机数函数 函数 描述 choice(seq) 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。 randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1 random() 随机生成下一个实数，它在[0,1)范围内。 seed([x]) 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。 shuffle(lst) 将序列的所有元素随机排序 uniform(x, y) 随机生成下一个实数，它在[x,y]范围内。 三角函数 函数 描述 acos(x) 返回x的反余弦弧度值。 asin(x) 返回x的反正弦弧度值。 atan(x) 返回x的反正切弧度值。 atan2(y, x) 返回给定的 X 及 Y 坐标值的反正切值。 cos(x) 返回x的弧度的余弦值。 hypot(x, y) 返回欧几里德范数 sqrt(xx + yy)。 sin(x) 返回的x弧度的正弦值。 tan(x) 返回x弧度的正切值。 degrees(x) 将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0 radians(x) 将角度转换为弧度 数学常量 常量 描述 pi 数学常量 pi（圆周率，一般以π来表示） e 数学常量 e，e即自然常数（自然常数）。 Python3 字符串 使用引号( ' 或 \" )来创建字符串。 Python 访问字符串中的值 不支持单字符类型 使用方括号 [] 来截取字符串 Python转义字符 转义字符 描述 实例 \\(在行尾时) 续行符 &gt;&gt;&gt; print(\"line1 \\ ... line2 \\ ... line3\") line1 line2 line3 &gt;&gt;&gt; \\\\ 反斜杠符号 &gt;&gt;&gt; print(\"\\\\\") \\ \\’ 单引号 &gt;&gt;&gt; print('\\'') ' \\” 双引号 &gt;&gt;&gt; print(\"\\\"\") \" \\a 响铃 &gt;&gt;&gt; print(\"\\a\")执行后电脑有响声。 \\b 退格(Backspace) &gt;&gt;&gt; print(\"Hello \\b World!\") Hello World! \\000 空 &gt;&gt;&gt; print(\"\\000\") &gt;&gt;&gt; \\n 换行 &gt;&gt;&gt; print(\"\\n\") &gt;&gt;&gt; \\v 纵向制表符 &gt;&gt;&gt; print(\"Hello \\v World!\") Hello World! &gt;&gt;&gt; \\t 横向制表符 &gt;&gt;&gt; print(\"Hello \\t World!\") Hello World! &gt;&gt;&gt; \\r 回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。 &gt;&gt;&gt; print(\"Hello\\rWorld!\") World! &gt;&gt;&gt; print('google runoob taobao\\r123456') 123456 runoob taobao \\f 换页 &gt;&gt;&gt; print(\"Hello \\f World!\") Hello World! &gt;&gt;&gt; \\yyy 八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。 &gt;&gt;&gt; print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\") Hello World! \\xyy 十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行 &gt;&gt;&gt; print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\") Hello World! \\other 其它的字符以普通格式输出 Python字符串运算符下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”： 操作符 描述 实例 + 字符串连接 a + b 输出结果： HelloPython * 重复输出字符串 a*2 输出结果：HelloHello [] 通过索引获取字符串中字符 a[1] 输出结果 e [ : ] 截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。 a[1:4] 输出结果 ell in 成员运算符 - 如果字符串中包含给定的字符返回 True ‘H’ in a 输出结果 True not in 成员运算符 - 如果字符串中不包含给定的字符返回 True ‘M’ not in a 输出结果 True r/R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。 print( r'\\n' ) print( R'\\n' ) % 格式字符串 请看下一节内容。 Python字符串格式化 符 号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 格式化操作符辅助指令: 符号 功能 * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + ) 在正数前面显示空格 # 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) 0 显示的数字前面填充’0’而不是默认的空格 % ‘%%’输出一个单一的’%’ (var) 映射变量(字典参数) m.n. m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) Python三引号 允许一个字符串跨多行 f-string python3.6 之后版本新增功能 &gt;&gt;&gt; name = 'Runoob' &gt;&gt;&gt; f'Hello {name}' # 替换变量 'Hello Runoob' &gt;&gt;&gt; f'{1+2}' # 使用表达式n'3' &gt;&gt;&gt; w = {'name': 'Runoob', 'url': 'www.runoob.com'} &gt;&gt;&gt; f'{w[\"name\"]}: {w[\"url\"]}' 在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; print(f'{x+1}') # Python 3.6 2 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; print(f'{x+1=}') # Python 3.8 'x+1=2' Unicode 字符串在Python3中，所有的字符串都是Unicode字符串 Python 的字符串内建函数 序号 方法及描述 1 capitalize() 将字符串的第一个字符转换为大写 2 center(width, fillchar) 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。 3 count(str, beg= 0,end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数 4 bytes.decode(encoding=”utf-8”, errors=”strict”) Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 5 encode(encoding=’UTF-8’,errors=’strict’) 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’ 6 endswith(suffix, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False. 7 expandtabs(tabsize=8) 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。 8 find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1 9 index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在字符串中会报一个异常。 10 isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False 11 isalpha() 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False 12 isdigit() 如果字符串只包含数字则返回 True 否则返回 False.. 13 islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False 14 isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False 15 isspace() 如果字符串中只包含空白，则返回 True，否则返回 False. 16 istitle() 如果字符串是标题化的(见 title())则返回 True，否则返回 False 17 isupper() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False 18 join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串 19 len(string) 返回字符串长度 20 ljust(width[, fillchar]) 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。 21 lower() 转换字符串中所有大写字符为小写. 22 lstrip() 截掉字符串左边的空格或指定字符。 23 maketrans() 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 24 max(str) 返回字符串 str 中最大的字母。 25 min(str) 返回字符串 str 中最小的字母。 26 replace(old, new [, max]) 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。 27 rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找. 28 rindex( str, beg=0, end=len(string)) 类似于 index()，不过是从右边开始. 29 rjust(width,[, fillchar]) 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串 30 rstrip() 删除字符串字符串末尾的空格. 31 split(str=””, num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串 32 splitlines([keepends]) 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 33 startswith(substr, beg=0,end=len(string)) 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。 34 strip([chars]) 在字符串上执行 lstrip()和 rstrip() 35 swapcase() 将字符串中大写转换为小写，小写转换为大写 36 title() 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle()) 37 translate(table, deletechars=””) 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中 38 upper() 转换字符串中的小写字母为大写 39 zfill (width) 返回长度为 width 的字符串，原字符串右对齐，前面填充0 40 isdecimal() 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。 Python3 列表 列表都可以进行的操作包括索引，切片，加，乘，检查成员。 访问列表中的值 列表索引从 0 开始，第二个索引是 1，依此类推 使用方括号 [] 的形式截取字符，左闭右开 更新列表list[2] = 2001 list.append(100) 删除列表元素del list[2] Python列表脚本操作符 Python 表达式 结果 描述 len([1, 2, 3]) 3 长度 [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6] 组合 [‘Hi!’] * 4 [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] 重复 3 in [1, 2, 3] True 元素是否存在于列表中 for x in [1, 2, 3]: print(x, end=” “) 1 2 3 迭代 Python列表截取与拼接 Python 表达式 结果 描述 L[2] ‘Taobao’ 读取第三个元素 L[-2] ‘Runoob’ 从右侧开始读取倒数第二个元素: count from the right L[1:] [‘Runoob’, ‘Taobao’] 输出从第二个元素开始后的所有元素 嵌套列表使用嵌套列表即在列表里创建其它列表 Python列表函数&amp;方法Python包含以下函数: 序号 函数 1 len(list) 列表元素个数 2 max(list) 返回列表元素最大值 3 min(list) 返回列表元素最小值 4 list(seq) 将元组转换为列表 Python包含以下方法: 号 方法 1 list.append(obj) 在列表末尾添加新的对象 2 list.count(obj) 统计某个元素在列表中出现的次数 3 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表） 4 list.index(obj) 从列表中找出某个值第一个匹配项的索引位置 5 list.insert(index, obj) 将对象插入列表 6 list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值 7 list.remove(obj) 移除列表中某个值的第一个匹配项 8 list.reverse() 反向列表中元素 9 list.sort( key=None, reverse=False) 对原列表进行排序 10 list.clear() 清空列表 11 list.copy() 复制列表","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"}],"author":"Benjamin"},{"title":"Hexo个人博客搭建教程","slug":"实用工具/hexo搭建教程","date":"2021-02-24T07:33:43.000Z","updated":"2021-03-04T07:56:15.993Z","comments":true,"path":"2021/02/24/shi-yong-gong-ju/hexo-da-jian-jiao-cheng/","link":"","permalink":"http://szdf123.github.io/2021/02/24/shi-yong-gong-ju/hexo-da-jian-jiao-cheng/","excerpt":"","text":"本教程为使用Mac搭建Hexo个人博客 Hexo官方安装部署文档 Hexo官方中文安装部署文档 1. 下载安装Nodejs在Nodejs官网，下载最新版Node.js，并安装至/usr/local/bin/node 安装npm至/usr/local/bin/npm 2. 启动iterm，安装cnpm，安装进入Mac 命令行中，输入 node -v # 查看node版本 查看node npm -v # 查看npm版本 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org # 安装cnpm cnpm -v # 查看cnpm版本版本 3.安装hexocnpm install -g hexo-cli # 安装hexo hexo -v # 查看hexo的版本 4. 在本地创建博客目录cd 【本地目录】 # 该目录用于存放未来全部的博客内容 mkdir blog cd blog hexo init # 初始化博客 hexo s # 启动hexo 默认启动本地4000端口 http://localhost:4000 在blog目录下hexo n \"我的第一篇博客\" # 创建博客 hexo clean 清空缓存 hexo g 自动创建静态文件 5. 创建github的repository进入github，创建与登录账号同名的repository xxx.github.io 并生成token：【Token】 Token极其私密，请牢记，勿分享！ 6. 本地安装hexo-git插件cnpm install --save hexo-deployer-git 在blog目录下，修改_config.yml文件 Deployment下，修改为以下内容 deploy:type: gitrepo: https://github.com/xxx/xxx.github.io.gitbranch: mastertoken: * hexo d # 部署Hexo服务到远端 7. 访问在线博客 xxx.github.io 8. 定制主题Hexo的主题有很多，如 github.com/litten/hexo-theme-yiliagithub.com/cendeal/hexo-theme-aomorigithub.com/jangdelong/hexo-theme-xupsgithub.com/blinkfox/hexo-theme-matery 将主题克隆至本地git clone http://github.com/litten/hexo-theme-yilia.git themes/yilia git clone https://github.com/cendeal/hexo-theme-aomori.git themes/aomori git clone https://github.com/jangdelong/hexo-theme-xups.git themes/xups git clone https://github.com/blinkfox/hexo-theme-matery.git themes/matery vim _config.yml将 theme: landscape 修改为 theme: yilia或aomori在本地编译，部署服务hexo clean hexo g hexo d或hexo d -g 9. 修复模板缺失问题npm i hexo-generator-json-content --save 修改_config.yml，增加以下配置 jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 10. 使用LaTeX可参考 Hexo博客中使用Latex","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（2）","slug":"UNSW/COMP9020/离散数学课程笔记（2）","date":"2021-02-24T07:33:43.000Z","updated":"2021-04-26T17:13:22.813Z","comments":true,"path":"2021/02/24/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-2/","link":"","permalink":"http://szdf123.github.io/2021/02/24/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-2/","excerpt":"","text":"Logical 逻辑逻辑等价 Logical Equivalence \\begin{align} \\mbox{Excluded Middle} \\qquad p\\lor \\lnot p & \\equiv \\top \\\\ \\mbox{Contradiction} \\qquad p\\wedge \\lnot p & \\equiv \\bot \\\\ \\mbox{Idempotence} \\qquad \\quad p\\lor p & \\equiv p \\\\ p \\wedge p & \\equiv p \\\\ \\mbox{Double Negation} \\qquad \\quad \\lnot \\lnot p & \\equiv p \\\\ \\mbox{Identity} \\qquad \\quad p \\lor \\bot & \\equiv p \\\\ p \\wedge \\top & \\equiv p \\\\ p \\lor \\top & \\equiv \\top \\\\ p \\wedge \\bot & \\equiv \\bot \\\\ \\mbox {Commutativity} \\qquad \\quad p \\lor q & \\equiv q \\lor v \\\\ p\\land q & \\equiv q \\land p \\\\ \\mbox {Associativity}\\qquad (p \\lor q ) \\lor r & \\equiv p \\lor (q \\lor r ) \\\\ (p \\land q ) \\land r & \\equiv p \\land ( q \\land r ) \\\\ \\mbox {Distribution}\\qquad p \\lor (q \\land r) & \\equiv (p \\lor q) \\land ( p \\lor r) \\\\ p \\land (q \\lor r) & \\equiv (p \\land q)\\lor (p \\land r) \\\\ \\mbox {De Morgan's laws}\\qquad \\lnot (p \\land q) & \\equiv \\lnot p \\lor \\lnot q \\\\ \\lnot (p \\lor q) & \\equiv \\lnot p \\land \\lnot q \\\\ \\mbox {Implication} \\qquad \\qquad p \\Rightarrow q & \\equiv \\lnot p \\lor q \\\\ p \\Leftrightarrow q & \\equiv (p \\Rightarrow q) \\land (q \\Rightarrow p) \\end{align}例 \\begin{array} ((r \\land \\lnot p ) \\lor (r \\land q)) \\lor (( \\lnot r \\land \\lnot p ) \\lor (\\lnot r \\land q)) \\\\ \\qquad \\equiv (r \\land ( \\lnot p \\lor q )) \\lor (\\lnot r \\land ( \\lnot p \\lor q )) \\qquad \\mbox {Distrib.} \\\\ \\qquad \\equiv (r \\lor \\lnot r) \\land (\\lnot p \\lor q) \\qquad \\qquad \\qquad \\quad \\mbox {Distrib.} \\\\ \\qquad \\equiv \\top \\land (\\lnot p \\lor q ) \\qquad \\qquad \\qquad \\qquad \\quad \\mbox {Excl. Mid.} \\\\ \\qquad \\equiv \\lnot p \\lor q \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad \\mbox {Ident.} \\end{array} \\color {Green} \\checkmark p \\Rightarrow ( q \\Rightarrow r) \\equiv ( p \\Rightarrow q) \\Rightarrow (p \\Rightarrow r) \\\\ \\color {Red} \\times (p \\Rightarrow q ) \\Rightarrow r \\equiv p \\Rightarrow (q \\Rightarrow r ) p q r $(p \\Rightarrow q ) \\Rightarrow r$ $p \\Rightarrow (q \\Rightarrow r )$ F T F $ \\color{Red}{\\mbox{F}}$ $ \\color {Green} {\\mbox{T}}$ 公式的可满足性 Satisfifiability of Formulas如果在某种情况下，其值可为真值，则这个个公式是可满足的satisfiable。 A B $ A \\Rightarrow B $ $\\lnot ( A \\Rightarrow B )$ FFTT FTFT $ \\color{Green}{\\mbox{T}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$ $ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$ 例:若： $J \\Rightarrow \\lnot S$ $S \\Rightarrow K$ $K \\Rightarrow J$ 求$\\phi = (J\\Rightarrow \\lnot S) \\land (S\\Rightarrow K) \\land (K\\Rightarrow J)$为真的情形。 解析真值表为： J K S $J\\Rightarrow \\lnot S$ $S \\Rightarrow K$ $K \\Rightarrow J$ $\\phi$ FFFFTTTT FFTTFFTT FTFTFTFT FF FF FF $ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$ 练习下列哪个公式总为真？ (a) $(p \\land (p \\Rightarrow q)) \\Rightarrow q \\color{Green}{\\checkmark}$ (b) $((p \\lor q) \\land \\lnot p) \\Rightarrow \\lnot q\\color{Red}{\\times}$ (c) $((p\\Rightarrow q) \\lor (q \\Rightarrow r)) \\Rightarrow (p \\Rightarrow r)\\color{Red}{\\times}$ (d) $(p \\land q) \\Rightarrow q\\color{Green}{\\checkmark}$ 有效性、蕴涵、参数 Validity, Entailment, Arguments 前提permises：包含一些论点的陈述句 结论从前提逻辑地推导出来 结论是前提的逻辑推论 前提蕴含entail结论 定义： $\\phi_1,\\dots,\\phi_n \\vDash \\phi $ 公式的有效性 Validity of Formulas如果公式$\\phi$对其基本命题的所有真值赋值为T，那么它就是有效的valid，或者重言式tautology，记为$\\vDash \\phi$。 Validity, Equivalence and Entailment 有效性，等价性和蕴含性定理 Theorem以下等价 $\\phi_1,\\dots,\\phi_n\\vDash\\psi$ $\\vDash(\\phi_1\\land\\dots\\land\\phi_n)\\Rightarrow \\psi$ $\\vDash \\phi_1 \\Rightarrow (\\phi_2\\Rightarrow \\dots (\\phi_n \\Rightarrow \\psi )\\dots)$ $\\phi \\equiv \\psi \\ \\mbox{if and only if} \\vDash \\phi \\Leftrightarrow \\psi$ 证明规则与方法 Proof Roles and Methods按案例证明 Proof Roles and Methods: Proof by Cases为了证明A，我们有 $B_1 \\lor \\dots \\lor B_n$ $B_i \\Rightarrow A \\ \\mbox{for each } i = 1 \\dots n$ $\\forall$ 意思是“所有” $ \\exists$ 意思是“存在” 哥德巴赫猜想 Goldbach’s conjecture $\\forall n \\in 2 \\mathbb {N} ( n &gt; 2 \\Rightarrow \\exists p, q \\in \\mathbb {N} (p,q \\in PRIMES \\land n=p+1))$ 练习下列哪项是同义重述? $\\forall x(\\exists y( P(x,y))) \\Rightarrow \\exists y(\\forall x (P(x,y)))\\color {Red} \\times$ $ \\exists y(\\forall x (P(x,y))) \\Rightarrow \\forall x(\\exists y( P(x,y))) \\color {Green} \\checkmark$ 证明逆否命题 Proof of the Contrapositive我们想证明 $ A \\Rightarrow B$ 为了证明这个表达式，我们转换为 $ \\lnot B \\Rightarrow \\lnot A$ 然后使用用等价性 $(A \\Rightarrow B) \\equiv (\\lnot B \\Rightarrow \\lnot A)$ 练习 无理数的平方根是无理数： $\\forall x \\in \\mathbb {R}(x\\notin \\mathbb {Q} \\Rightarrow \\sqrt {x} \\notin \\mathbb {Q})$ 为了证明这一点，我们可以证明： $\\sqrt x \\in \\mathbb {Q} \\Rightarrow x \\in \\mathbb {Q}$ $\\sqrt x = \\frac {p}{q} \\ $对于一些$p,q \\in \\mathbb {Z} $ $\\Rightarrow x = \\frac {p^2}{q^2}$ 反证法 Proof by Contradiction我们想证明$A$。为了证明这一点，我们假设 $\\lnot A$ ，并为某些命题$B$派生$B$和$\\lnot B$。 （难点是：计算出$B$应该是多少。） 例子 $\\sqrt{2}$ 是无理数 存在无数个质数 $\\sqrt{2}=\\frac{p}{q}$ $\\Rightarrow 2q^2 = p^2$ $\\Rightarrow p^2 \\mbox{ 为偶数 } \\Rightarrow p \\mbox{ 为偶数 } \\Rightarrow p=2\\cdot r$ $\\Rightarrow 2q^2 = 4 r^2$ $\\Rightarrow q^2 = 2 r^2$ $\\Rightarrow q^2 \\mbox{ 为偶数 } \\Rightarrow q \\mbox{ 为偶数 }$ 但是$p,q$一定互为质数，产生矛盾 替换 substitution替换是用表达式替换每一个符号的过程。 我们可以用逻辑表达式代替逻辑变量。 替换规则 Substitution Rules(a) 如果 $\\vDash \\phi(P)$ 那么 $\\vDash \\phi ( \\alpha)$ (b) 如果 $\\alpha \\equiv \\beta$ 那么 $\\phi(\\alpha) \\equiv \\phi(\\beta)$ 布尔函数 Boolean Functions只有一个变量的布尔函数也被称为 unary(一元的). 有两个变量的函数被称为 binary(二元的). 有n个输入变量的函数被称为 n-ary(n元的). 布尔运算 Boolean Arithmetic考虑带操作的真值 $\\land \\lor \\lnot $ 代数结构 algebraic structure： $\\mathbb{B}=\\{0,1\\}$ 的布尔运算： $a\\cdot b, a+b,a^\\prime = 1-a$ $pq$ 表示 $p \\cdot q$ $\\bar{p}$ 表示方法比 $p^\\prime$ 更频繁 $\\bar{(\\cdot )}$ 省去了一些括号的需要 应用四:数字电路 Applications IV: Digital Circuits 布尔代数的定义 Definition Boolean Algebracommutative: $ x + y = y + x$ $ x \\cdot y = y \\cdot x$ associative: $(x + y) + z = x + (y + z)$ $(x \\cdot y) \\cdot z = x \\cdot ( y\\cdot z)$ distributive: $x + (y\\cdot z)=(x+y)\\cdot (x+z)$ $x \\cdot (y+x) = (x\\cdot y) + (x \\cdot z)$ identity: $x + 0 = x, \\ x \\cdot 1 = x$ complementation: $x + x^\\prime = 1, \\ x\\cdot x^\\prime =0$ 2-bit vectors $\\mathbb{B}^2$: 0 \\overset {def}{=}(0,0) \\\\ 1 \\overset {def}{=}(1,1) \\\\ \\mbox{join: } (a_1,a_2)+(b_1,b_2) \\mapsto (a_1 = b_1, a_2 + b_2) \\\\ \\mbox{join: } (a_1,a_2)\\cdot(b_1,b_2) \\mapsto (a_1 \\cdot b_1, a_2 \\cdot b_2) \\\\ \\mbox{complementation: } (a_1,a_2)^\\prime \\mapsto(a_1^\\prime,a_2^\\prime)$T={(0,0),(0,1),(1,0),(1,1)}$ 布尔表达式 Boolean Expressions PL BA(Boolean algebra) 原子命题 propositional atoms $p,q,\\dots$ $p,q,\\dots$ 结合 conjunction $p\\land q$ $p\\cdot q$ or $pq$ 析取 disjunction $p\\lor q$ $p + q$ 否定 negation $\\lnot p$ $p^\\prime$ 术语和规则 Terminology and Rules 一个文字literal是一个表达式$p$或$p’$素数，其中$p$是一个命题原子 一个表达式为CNF（合取范式conjunctive normal form），如果它的形式为 \\prod_{i} C_i 其中每个子句clause $C_i$是字面量的分离 如. $p+q+r^\\prime$. 如果一个表达式具有这种形式，那么它就是DNF（析取范式disjunctive normal form） \\sum_{i}C_i 其中每个子句$C_i$是一个合取字面值 如$pqr^\\prime$ CNF和DNF以它们的顶级操作符命名；$\\cdot$或$+$不允许更深的嵌套。 任何给定的变量在一个子句中只出现一次 x + x =x,\\ xx=x \\\\ xx^\\prime = 0,\\ x + x^\\prime = 1 \\\\ x \\cdot 0 = 0,\\ x \\cdot 1 = x,\\ x + 0 = x,\\ x +1 =1 DNF优先 \\begin{array} xx + xy & = x \\quad \\mbox{(absorption)} \\\\ xy + xy^\\prime & = x \\quad \\mbox{(combining the opposites)} \\end{array} 每个布尔表达式$\\phi$在CNF或DNF中有一个等价的表达式 德摩根定律 De morgan’s laws (x+y)^\\prime = x^\\prime \\cdot y^\\prime \\\\ (x \\cdot y )^\\prime = x^\\prime + y^\\prime \\\\ (x^\\prime)^\\prime = x规范形式DNF Canonical Form DNF \\mathcal{l}=\\begin{cases} X_i \\quad if\\ \\pi(x_i)=1 \\\\ x_i^\\prime \\quad if \\ \\pi(x_i)=0 \\end{cases} \\\\ \\mbox{product}\\ t_\\pi = \\mathcal{l}_1\\cdot\\mathcal{l}_2\\cdot \\ \\dots \\ \\cdot \\mathcal{l}_n例 如果 $\\pi(x_1)=1 $ 且 $\\pi(x_2)=0$ ，那么 $t_\\pi=x_1\\cdot x_2^\\prime$ $E$的规范DNF是 E^{dnf}=\\sum_{E(\\pi)=1}t_\\pi例 如果E是由此定义 x y E 0 0 1 0 1 0 1 0 1 1 1 1 那么 $E^{dnf} = {x}’{y}’+x{y}’+xy$ 可以简化为 $x+{y}’$ 卡诺图 Karnaugh Maps 矩形可以绕着角落移动，即实际的卡诺图应该被视为一个环面。 矩形的边必须是1、2或4个正方形(三个相邻的单元格是无用的)。 本图由freakyuito整理 计算机科学中的布尔代数 Boolean Algebras in Computer Science 一些数据结构有类似自然法则的运算符，如$\\land \\lor \\lnot$ 只包含0和1的n元布尔运算规则：加（join）：$(1,0,0,1) + (1,1,0,0) = (1,1,0,1)$ 乘（meet）：$(1,0,0,1)\\cdot (1,1,0,0) = (1,0,0,0)$ 补集（complementation）：${(1,0,0,1)}’=(0,1,1,0)$ $Pow(S)$ ——$S$的子集加（join）：$A\\cup B$ 乘（meet）：$A \\cap B$ 补集（complement）：$A^C = S \\setminus A$ 对于S的布尔代数，$Pow(S)$，$s=\\{a,b,c\\}$，有： $0 \\overset{def}=\\empty$ $1 \\overset{def}=\\{a,b,c\\}$ 加（join）：$X,Y \\mapsto X \\cup Y $ 乘（meet）：$X,Y \\mapsto X \\cap Y$ 补（complementation）：$X \\mapsto \\{a,b,c\\} \\setminus X$ 更多计算机科学中布尔代数的例子对于任意集合$S$到$\\mathbb{B}$的函数，它们的集合记为$Map(S, \\mathbb{B})$ 如果$f,g: S \\rightarrow \\mathbb{B}$，那么： $(f+g):S \\rightarrow \\mathbb(B) $定义为$s \\mapsto f(s) + g(s)$ $(f\\cdot g):S\\rightarrow \\mathbb{B}$定义为$s \\mapsto f(s)\\cdot g(s)$ $f’:S\\rightarrow \\mathbb{B}$定义为$s\\mapsto {(f(s))}’$ 对于$|S|=n$，一共有$2^n$个 对于所有n个变量的布尔函数，如$(p_1,p_2,p_3)\\mapsto (p_1+p_2’)\\cdot (p_1+p_3)\\cdot p_2 + p_3’$ 它们一共有$2^{2^n}$个，它们的集合表示为$BOOL(n)$ 事实上，每个具有有限元素集T的布尔代数满足: $|T|=2^k$ 定义 考虑 布尔代数$B_1$在集合$S$上有不同的元素$0_S$和$1_S$ 布尔代数$B_2$在集合$T$上有不同的元素$0_T$和$1_T$ 它们是同构体（isomorphic），写作$B_1\\simeq B_2$，当且仅当存在一一对应关系时，$\\iota:S\\mapsto T$，这样 $\\iota(0_S)=0_T$ $\\iota(1_S)=1_T$ $\\iota(s_1+s_2)=\\iota(S_1)+\\iota(S_2)$ 对于所有的$s_1,s_2\\in S$ $\\iota(s_1 \\cdot s_2)=\\iota(S_1)\\cdot \\iota(S_2)$ 对于所有的$s_1,s_2\\in S$ $\\iota(s’)=\\iota(s)’$ 对于所有的$s\\in S$ 事实上，所有元素数相同的代数都是同构的，即“结构上相似”。因此，研究一个这样的代数就可以描述所有的性质。 布尔代数的笛卡尔积也是布尔代数。写作： \\mathbb{B}^k = \\mathbb{B} \\times \\dots \\mathbb{B}上面提到的代数都是这种形式： $n元\\simeq \\mathbb{B}^n$ $Pow(S)\\simeq \\mathbb{B}^{|S|}$ $Map(S,\\mathbb{B})\\simeq \\mathbb{B}^{|S|}$ $BOOL(n)\\simeq \\mathbb{B}^{2^n}$ 小结$\\equiv$等价 可满足的公式（satisfiable formulae），有效公式（valid formulae）、重复式（tautologies） 逻辑蕴涵$\\vDash$ 证明方法：反证法，证明逆否命题，按案例证明 布尔代数，CNF，DNF，规范形式，卡诺图（Karnaugh maps） 参考资料 Textbook (R &amp; W) - Ch. 2, Sec. 2.2-2.5; Ch. 10. Sec. 10.1-10.5","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"},{"title":"LaTeX 符号命令大全","slug":"实用工具/LaTeX 符号命令大全","date":"2021-02-24T04:31:07.000Z","updated":"2021-04-25T15:33:40.797Z","comments":true,"path":"2021/02/24/shi-yong-gong-ju/latex-fu-hao-ming-ling-da-quan/","link":"","permalink":"http://szdf123.github.io/2021/02/24/shi-yong-gong-ju/latex-fu-hao-ming-ling-da-quan/","excerpt":"","text":"参考资料 http://blog.sina.com.cn/s/blog_bad174440102z1t7.html https://www.cnblogs.com/yalphait/articles/8685586.html Latex大全https://blog.csdn.net/weixin_42468475/article/details/106015495 编写Matrix矩阵方法 函数、符号及特殊字符声调 语法 效果 语法 效果 语法 效果 \\bar{x} $\\bar{x}$ \\acute{\\eta} $\\acute{\\eta}$ \\check{\\alpha} $\\check{\\alpha}$ \\grave{\\eta} $\\grave{\\eta}$ \\breve{a} $\\breve{a}$ \\ddot{y} $\\ddot{y}$ \\dot{x} $\\dot{x}$ \\hat{\\alpha} $\\hat{\\alpha}$ \\tilde{\\iota} $\\tilde{\\iota}$ 函数 语法 效果 语法 效果 语法 效果 \\sin\\theta $\\sin\\theta$ \\cos\\theta $\\cos\\theta$ $\\tan\\theta$ $\\tan\\theta$ \\arcsin\\frac{L}{r} $\\arcsin\\frac{L}{r}$ \\arccos\\frac{T}{r} $\\arccos\\frac{T}{r}$ $\\arctan\\frac{L}{T}$ $\\arctan\\frac{L}{T}$ \\sinh g $\\sinh g$ \\cosh h $\\cosh h$ $\\tanh i$ \\tanh i \\operatorname{sh}j $\\operatorname{sh}j$ \\operatorname{argsh}k $\\operatorname{argsh}k$ \\operatorname{ch}h $\\operatorname{ch}h$ \\operatorname{argch}l $\\operatorname{argch}l$ \\operatorname{th}i $\\operatorname{th}i$ \\operatorname{argth}m $\\operatorname{argth}m$ k’(x)=\\lim_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Deltax} k’(x)=$m_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Deltax}$ \\limsup S $\\limsup S$ \\liminf I $\\liminf I$ \\max H $\\max H$ \\min L $\\min L$ \\inf s $\\inf s$ \\sup t $\\sup t$ \\exp!t $\\exp!t$ \\ln X $\\ln X$ \\lg X $\\lg X$ \\log X $\\log X$ \\log_\\alpha X $\\log_\\alpha X$ \\ker x $\\ker x$ \\deg x $\\deg x$ \\gcd(T,U,V,W,X) $\\gcd(T,U,V,W,X)$ \\Pr x $\\Pr x$ \\det x $\\det x$ \\hom x $\\hom x$ \\arg x $\\arg x$ \\dim x $\\dim x$ \\lim_{t\\to n}T $\\lim_{t\\to n}T$ 同余 语法 效果 语法 效果 \\pmod{m} $\\pmod{m}$ a \\bmod b $a \\bmod b$ 微分 语法 效果 语法 效果 语法 效果 \\nabla $\\nabla$ \\partial x $\\partial x$ \\mathrm{d}x $\\mathrm{d}x$ \\dot x $\\dot x$ \\ddot y $\\ddot y$ 集合 语法 效果 语法 效果 语法 效果 语法 效果 语法 效果 \\forall $\\forall$ \\exists $\\exists$ \\empty $\\empty$ \\emptyset $\\emptyset$ \\varnothing $\\varnothing$ \\in $\\in$ \\ni $\\ni$ \\not\\in $\\not\\in$ \\notin $\\notin$ \\subset $\\subset$ \\subseteq $\\subseteq$ \\supset $\\supset$ \\supseteq $\\supseteq$ \\cap $\\cap$ \\bigcap $\\bigcap$ \\cup $\\cup$ \\bigcup $\\bigcup$ \\biguplus $\\biguplus$ \\sqsubset $\\sqsubset$ \\sqsubseteq $\\sqsubseteq$ \\sqsupset $\\sqsupset$ \\sqsupseteq $\\sqsupseteq$ \\sqcap $\\sqcap$ \\sqcup $\\sqcup$ \\bigsqcup $\\bigsqcup$ 逻辑 语法 效果 语法 效果 语法 效果 语法 效果 p $P$ \\land $\\land$ \\wedge $\\wedge$ \\bigwedge $\\bigwedge$ \\bar{q} \\to p $\\bar{q} \\to p$ \\lor $\\lor$ \\vee $\\vee$ \\bigvee $\\bigvee$ \\lnot $\\lnot$ \\neg q $\\neg q$ \\setminus $\\setminus$ \\smallsetminus $\\smallsetminus$ 根号 语法 效果 语法 效果 \\sqrt{3} $\\sqrt{3}$ \\sqrt[n]{3} $\\sqrt[n]{3}$ 关系符号 语法 效果 \\Delta ABC\\sim\\Delta XYZ $1 $ \\sqrt{3}\\approx1.732050808\\ldots $1$ \\simeq $\\simeq$ \\cong $\\cong$ \\dot= $\\dot=$ \\ggg $1$ \\gg $1$ &gt; $1$ \\ge $1$ \\geqq $1$ = $1$ \\leq $1$ \\leqq $1$ &lt; $1$ \\ll $1$ \\lll $1$ (x-y)^2\\equiv(-x+y)^2\\equiv x^2-2xy+y^2 $1$ \\begin{align}``\\because\\begin{cases}``\\acute{a}x^2+bx^2+c\\gtrless0\\gtrless\\grave{a}x^2+bx^2+c\\\\``\\acute{a}&gt;0&gt;\\grave{a}``\\end{cases}\\\\``\\therefore\\frac{-b\\pm\\sqrt{b^2-4\\acute{a}c}}{2\\acute{a}}{}_\\lessgtr^\\gtrlessx_\\lessgtr^\\gtrless\\frac{-b\\pm\\sqrt{b^2-4\\grave{a}c}}{2\\grave{a}}``\\end{align} $1$ x\\not\\equiv N $x\\not\\equiv N$ x\\ne A $x\\ne A$ x\\neq C $x\\neq C$ t\\propto v $t\\propto v$ \\pm $\\pm$ \\mp $\\mp$ 几何符号 特征 语法 效果 菱形 \\Diamond $\\Diamond$ 正方形 \\Box $\\Box$ 三角形 Delta \\Delta $\\Delta$ 三角形 图型 \\triangle $\\triangle$ 角名 \\angle\\Alpha\\Beta\\Gamma $\\angle\\Alpha\\Beta\\Gamma$ 角度 \\sin\\!\\frac{\\pi}{3}=\\sin60^\\operatorname{\\omicron}=\\frac{\\sqrt{3}}{2} $\\sin!\\frac{\\pi}{3}=\\sin60^{\\operatorname{\\omicron}}=\\frac{\\sqrt{3}}{2}$ 垂直 \\perp $\\perp$ 箭头符号 语法 效果 语法 效果 语法 效果 \\leftarrow $\\leftarrow$ \\gets $\\gets$ \\rightarrow $\\rightarrow$ \\to $\\to$ \\leftrightarrow $\\leftrightarrow$ \\longleftarrow $\\longleftarrow$ \\longrightarrow $\\longrightarrow$ \\mapsto $\\mapsto$ \\longmapsto $\\longmapsto$ \\hookrightarrow $\\hookrightarrow$ \\hookleftarrow $\\hookleftarrow$ \\nearrow $\\nearrow$ \\searrow $\\searrow$ \\swarrow $\\swarrow$ \\nwarrow $\\nwarrow$ \\uparrow $\\uparrow $ \\downarrow $\\downarrow$ \\updownarrow $\\updownarrow$ 语法 效果 语法 效果 语法 效果 语法 效果 \\rightharpoonup $\\rightharpoonup $ \\rightharpoondown $\\rightharpoondown$ \\leftharpoonup $\\leftharpoonup$ \\leftharpoondown $\\leftharpoondown$ \\upharpoonleft $\\upharpoonleft$ \\upharpoonright $\\upharpoonright$ \\downharpoonleft $\\downharpoonleft$ \\downharpoonright $\\downharpoonright$ 语法 效果 语法 效果 语法 效果 \\Leftarrow $\\Leftarrow$ \\Rightarrow $\\Rightarrow$ \\Leftrightarrow $\\Leftrightarrow$ \\Longleftarrow $\\Longleftarrow$ \\Longrightarrow $\\Longrightarrow$ \\Longleftrightarrow (or \\iff) $\\Longleftrightarrow (or \\iff)$ \\Uparrow $\\Uparrow$ \\Downarrow $\\Downarrow$ \\Updownarrow $\\Updownarrow$","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"博客配置及图片引用方法","slug":"实用工具/博客配置及图片引用方法","date":"2021-02-24T04:31:07.000Z","updated":"2021-03-05T08:51:08.574Z","comments":true,"path":"2021/02/24/shi-yong-gong-ju/bo-ke-pei-zhi-ji-tu-pian-yin-yong-fang-fa/","link":"","permalink":"http://szdf123.github.io/2021/02/24/shi-yong-gong-ju/bo-ke-pei-zhi-ji-tu-pian-yin-yong-fang-fa/","excerpt":"","text":"引用content [author[source]] [link] [source_link_title] 普通的 blockquoteLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块{% codeblock [title] [lang:language] [url] [link text] [additional options] %} code snippet {% endcodeblock %} 普通的代码块alert(\"Hello World!\"); 指定语言print(\"This is my python code!\") 附加说明Array.maparray.map(callback[, thisArg]) 附加说明和网址_.compactUnderscore.js_.compact([0, 1, false, 2, '', 3]); =&gt; [1, 2, 3] println(\"This is my Java code!\"); 网址matery-github","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"Hexo","slug":"Hexo","permalink":"http://szdf123.github.io/tags/Hexo/"}],"author":"Benjamin"},{"title":"离散数学课程笔记（1）","slug":"UNSW/COMP9020/离散数学课程笔记（1）","date":"2021-02-20T07:19:32.000Z","updated":"2021-04-27T08:44:56.673Z","comments":true,"path":"2021/02/20/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-1/","link":"","permalink":"http://szdf123.github.io/2021/02/20/unsw/comp9020/chi-san-shu-xue-ke-cheng-bi-ji-1/","excerpt":"","text":"数字符号 Notation for Numbers定义： 整数Integers $\\mathbb{Z}=\\{\\dots, -2,-1,0,1,2\\}$ 实数Reals $\\mathbb{R}$ $\\lfloor.\\rfloor:\\mathbb{R}\\rightarrow\\mathbb{Z}$ x的底，最大整数$\\leq x$ $\\lceil.\\rceil:\\mathbb{R}\\rightarrow\\mathbb{Z}$ x的天花板，最小整数$\\geq x$ 例如： $\\lfloor \\pi \\rfloor = 3 = \\lfloor e \\rfloor\\quad \\pi,e\\in \\mathbb{R}; \\lfloor \\pi \\rfloor , \\lfloor e \\rfloor \\in \\mathbb{Z}$ 一些特性： $\\lfloor -x \\rfloor = -\\lceil x \\rceil$，因此$\\lceil x \\rceil = - \\lfloor -x \\rfloor$ $\\lfloor -x + t \\rfloor = \\lfloor x \\rfloor + t$，且$\\lceil x + t \\rceil = \\lceil x \\rceil + t$ ，对于所有的$t\\in \\mathbb{Z}$ 如果$k&gt;0$且$m\\leq n$，那么$k$在$[m,n]$中的次数为： \\lfloor \\frac{n}{k} \\rfloor - \\lfloor \\frac{m-1}{k} \\rfloor对任意非整数$n$，有：$\\lceil n \\rceil - \\lfloor n \\rfloor = 1$ 可除性 Divisibility定义： 令$m,n \\in \\mathbb{Z}$，则$m|n$表示$m$是$n$的一个除数divisor，定义为$n=k\\cdot m$，其中$k\\in \\mathbb{Z}$。也可以表述为$n$可被$m$整除，$n$是$m$的倍数等。 $m\\not | n$，即$m|n$的否定式 整除的概念适用于所有整数（正整数、负整数、零） 对于$m$，有$1|m，-1|m，m|m，m|-m$ 对任意$n$，有$n|0$；除$n=0$以外，$0\\not | n$ 定义： $r=n \\mod m$ 当$n$除以$m$时，$r$为余数remainder。对$0 \\leq r &lt; m$，定义为$n=k\\cdot m + r$ 当且仅当$m|n$时，$n \\mod m=0$ 当一个数大于1，且只能被1和它自身整除时，这个数被称为质数prime 最大公约数Greatest common divisor $gcd(m, n)$ 当$gcd(m,n)=1$时，称为$m$和$n$互质relatively prime $gcd(0,n)=|n|$ 最小公倍数Least common multiple $lcm(m,n)$ 注：即使$m$或$n$是负数，$gcd(m, n)$ 和 $lcm(m,n)$总是取正数 绝对值 Absolute Value |x| = \\begin{cases} x & x \\geq 0 \\\\ -x & x n \\\\ gcd(m,n-m) & m < n \\end{cases}另一种算法 gcd(m,n)= \\begin{cases} m & n=0 \\\\ gcd(n,m \\mod n) & n > 0 \\end{cases}集合 Sets集合由其元素的集合定义。 $x\\in S$ 表示x是集合S中的一个元素 子集 Subsets$S\\subseteq T$，表示S是T的子集。 $S\\subset T$，表示S是T的真子集。 空集{}，记作$\\emptyset$ 基数，幂集 Cardinality, Powerset基数$|X|=#(X)=card(X)$ $|A\\cup B | = |A| + |B| - |A \\cap B|$ $|A\\cup B| + |A\\cap B| = |A| + |B|$ $|A\\setminus B| = |A| - |A \\cap B|$ $|A \\oplus B| = |A| + |B| - 2|A\\cup B|$ 幂集$Pow(X)=\\{A:A\\subseteq X\\}$ $|Pow(X)|=2^{|X|}$ 一般地，以下表达式成立： $|B| &lt; | Pow(B)| \\\\ A \\cap B \\in Pow(B)$ 注意，一般以下表达式不成立： $A \\subseteq Pow(A)$ 数的集合 Sets of Numbers$\\mathbb{P}\\subset \\mathbb{N}\\subset \\mathbb{Z} \\subset \\mathbb{Q}\\subset \\mathbb{R}$ 间隔 Intervals[a,b] (a,b) [a,b) (a,b] $|[m,n]|=n-m+1$ 集合操作符 Set Operations并集Union $A\\cup B$ 交集Intersection $A\\cap B$ 如果$A∩B =∅$，那么$A, B$是不相交disjoint 差集difference $A\\setminus B$ 对称差symmetric difference $A\\oplus B \\overset{def}{=} (A\\setminus B)\\cup (B \\setminus A)$ $A\\oplus A = \\emptyset$，$A\\oplus \\emptyset = A$ 补集complement $A^C$ 文氏图 集合操作符运算规则 笛卡儿积 Cartesian Product$S \\times T$，$S^2=S \\times S$，$S^3 = S \\times S \\times S$ $\\emptyset\\times S = \\emptyset$ $|S \\times T|=|S|\\cdot |T|$ 函数$S \\mapsto T$的映射$f$ $f(x) = y$ 标准语言$\\Sigma$ 字母表，有限非空集 单词word 从$\\Sigma$生成的任意有限字符串符号 空单词empty word $\\lambda$ $λω = ω = ωλ$ length($νω$) = length($ν$) + length($ω$) $\\Sigma^k$长度为k的单词集合 $\\Sigma ^0=\\{\\lambda\\}\\quad \\Sigma ^1=\\{\\Sigma\\}$ $\\Sigma^*$ 所有单词 $\\Sigma ^+$非空单词 基本逻辑 Elementary Logic命题proposition 命题逻辑 Propositional Logic $\\land$ 和，且，并，与 $\\lor$或，或者 $\\lnot$非 真值表 A B $A\\land B$ $A\\lor B$ $\\lnot$ A $A\\Rightarrow B$ $A\\Leftrightarrow B$ F F F F T T T F T F T T T F T F F T F F F T T T T F T T 命题逻辑公式 formulae of propositional logic 一般情况下，$(A\\backslash B )\\backslash C\\neq A\\backslash(B\\backslash C)$，当 $A \\cap C = \\emptyset$时等式成立 Week 1 小结数字符号 notation for numbers$\\lfloor m \\rfloor , \\lceil m \\rceil , m | n , n\\mod m, |a|, [a, b], (a,b),gcd,lcn$ 集合操作符 Sets and set operations $|A|,\\in , \\cup , \\cap , \\setminus , \\oplus , A^c , Pow(A) , \\subseteq , \\subset , \\times$ 正式语言:字母和文字 Formal languages: alphabets and words$\\lambda , \\sum ^*, \\sum ^+, \\sum ^1, \\sum ^2, \\dots ,\\sum ^{\\leq k}$ 命题逻辑的语言 Language of propositional logic$\\land , \\lor , \\lnot , \\Rightarrow , \\Leftrightarrow , \\top , \\bot , \\mbox {truth tables}$ 参考资料 Textbook (R &amp; W) - Ch. 1, Sec. 1.1-1.4; Ch. 2. Sec. 2.1","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"author":"Benjamin"}],"categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"},{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"},{"name":"最佳实践","slug":"最佳实践","permalink":"http://szdf123.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"name":"生活纪实","slug":"生活纪实","permalink":"http://szdf123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%BA%AA%E5%AE%9E/"},{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"Maven","slug":"Maven","permalink":"http://szdf123.github.io/tags/Maven/"},{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"课程笔记","slug":"课程笔记","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"Linux","slug":"Linux","permalink":"http://szdf123.github.io/tags/Linux/"},{"name":"MacOS","slug":"MacOS","permalink":"http://szdf123.github.io/tags/MacOS/"},{"name":"理财","slug":"理财","permalink":"http://szdf123.github.io/tags/%E7%90%86%E8%B4%A2/"},{"name":"监控技术","slug":"监控技术","permalink":"http://szdf123.github.io/tags/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"},{"name":"CentOS","slug":"CentOS","permalink":"http://szdf123.github.io/tags/CentOS/"},{"name":"Nginx","slug":"Nginx","permalink":"http://szdf123.github.io/tags/Nginx/"},{"name":"Zookeeper","slug":"Zookeeper","permalink":"http://szdf123.github.io/tags/Zookeeper/"},{"name":"MySQL","slug":"MySQL","permalink":"http://szdf123.github.io/tags/MySQL/"},{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"生活","slug":"生活","permalink":"http://szdf123.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Java","slug":"Java","permalink":"http://szdf123.github.io/tags/Java/"},{"name":"Windows","slug":"Windows","permalink":"http://szdf123.github.io/tags/Windows/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"COMP9021","slug":"COMP9021","permalink":"http://szdf123.github.io/tags/COMP9021/"},{"name":"COMP9024","slug":"COMP9024","permalink":"http://szdf123.github.io/tags/COMP9024/"},{"name":"COMP9331","slug":"COMP9331","permalink":"http://szdf123.github.io/tags/COMP9331/"},{"name":"COMP9414","slug":"COMP9414","permalink":"http://szdf123.github.io/tags/COMP9414/"},{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"游戏","slug":"游戏","permalink":"http://szdf123.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"英语","slug":"英语","permalink":"http://szdf123.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"Hexo","permalink":"http://szdf123.github.io/tags/Hexo/"}]}