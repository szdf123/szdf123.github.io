{"meta":{"title":"本杰明技术栈","subtitle":"致力于成为技术大佬","description":"超龄程序员，UNSW计算机专业就读中","author":"Benjamin","url":"http://szdf123.github.io","root":"/"},"pages":[{"title":"404","date":"2021-02-24T10:34:32.000Z","updated":"2021-02-24T10:34:47.194Z","comments":true,"path":"404/index.html","permalink":"http://szdf123.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-02-24T10:30:28.000Z","updated":"2021-02-24T10:30:43.118Z","comments":true,"path":"about/index.html","permalink":"http://szdf123.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2021-02-24T13:38:08.000Z","updated":"2021-02-26T14:15:55.145Z","comments":true,"path":"archives/index.html","permalink":"http://szdf123.github.io/archives/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-02-24T10:30:58.000Z","updated":"2021-02-24T10:31:12.888Z","comments":true,"path":"contact/index.html","permalink":"http://szdf123.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-24T10:28:55.000Z","updated":"2021-02-24T10:29:41.745Z","comments":true,"path":"categories/index.html","permalink":"http://szdf123.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-02-24T10:32:22.000Z","updated":"2021-02-24T10:32:47.488Z","comments":true,"path":"friends/index.html","permalink":"http://szdf123.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-24T10:29:56.000Z","updated":"2021-02-24T10:30:13.312Z","comments":true,"path":"tags/index.html","permalink":"http://szdf123.github.io/tags/index.html","excerpt":"","text":""},{"title":"常用链接","date":"2021-02-24T14:37:58.000Z","updated":"2021-02-28T14:47:40.693Z","comments":true,"path":"usefullinks/index.html","permalink":"http://szdf123.github.io/usefullinks/index.html","excerpt":"","text":"UNSW学校官网学校官网myUNSWeLearningMoodlewebcms3IT专业课程说明我的学校邮箱Outlook校园地图Lab地图ELISE 专业我的课程表全部课程列表COMP课程列表各课程时间表handbook 8543 总体要求programs/2021/8543 handbook 8543 详细选课列表等handbook 8543 AI方向handbook 8543 详细选课列表等programs/2018/8543.html handbook 8543 AI方向handbook 8543 AI方向 课程COMP9020 课程主页及练习COMP9021 discussionCOMP9021 workspaceCOMP9311 课程主页及练习 公共学习慕课网菜鸟教程 实用网站注册激活zID"}],"posts":[{"title":"COMP9020课程笔记（Week3）","slug":"COMP9020课程笔记（Week3）","date":"2021-03-04T09:24:03.000Z","updated":"2021-03-04T16:21:23.665Z","comments":true,"path":"2021/03/04/comp9020-ke-cheng-bi-ji-week3/","link":"","permalink":"http://szdf123.github.io/2021/03/04/comp9020-ke-cheng-bi-ji-week3/","excerpt":"","text":"函数（Functions）我们把函数作为集合论的概念来处理，它是两个集合之间的一种特殊的对应。 $f: S→T$描述了集合的配对，即$f$给每个元素$s∈S$都赋一个唯一的元素$t∈T$。 $S$——$f$域（domain），符号$Dom(f)$ $T$——$f$上域（codomain），符号Codom(f) $\\{f(x):x \\in Dom(f)\\}$——f镜像(image)，符号Im(f) Im(f)\\subseteq Condom(f)每个函数都把它的定义域映射到它的上域，但只是映射到它的像上。 复合函数（Composition of Functions）$f:x \\mapsto y, f:A \\mapsto B$ 第一个式子表示x映射到y，第二个式子表示B是在f下A的映射，$f:B=\\{f(s):s \\in A\\}$ 定义：复合函数描述为$g\\circ f:x\\mapsto g(f(x))$，要求$Im(f)\\subseteq Dom(g)$","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"}],"author":"Benjamin"},{"title":"COMP9311 Lab笔记（Week 3）","slug":"COMP9311-Lab笔记（Week3）","date":"2021-03-03T16:48:25.000Z","updated":"2021-03-04T07:56:04.392Z","comments":true,"path":"2021/03/04/comp9311-lab-bi-ji-week3/","link":"","permalink":"http://szdf123.github.io/2021/03/04/comp9311-lab-bi-ji-week3/","excerpt":"","text":"实践目标 使用SQL数据定义语言指定模式 定义数据约束 将元组加载到数据库 背景PostgreSQL 用户手册 本次任务的目的是为有很多部门的公司建立一个简单的数据库。要求如下： 每个部门有一个管理者（manager） 每个部门有一条使命宣言（mission statement），其由一组关键词构成，如承诺、服务、创新等 公司使用数字标识各个部门 对每个员工，需要记录姓名及税务档案编号（tax file number），以及他们每周的工作时长，单位小时 每个员工可能任职于多个部门，需要记录他们在每个部门花费的时长占总时长的比例 每个员工最少就职于一个部门 部门的管理者任全职 据此，ER图可设计如下： 本次实验依据此图做数据库表结构设计 假设该公司的具体情况如下： 有三个部门：行政（Administration）、研发（Research）、销售（Sales） 行政部门编号为 #001 行政部门的使命是：创新（innovation）、可靠（reliability）、盈利（profit） 研发部门编号为 #003 研究的使命是：创新（innovation）、科技（technology） 销售部有编号为 #002 销售的使命是：以客户为中心（customer-focus），不断成长（growth） 行政管理工作由John Smith负责，他每周工作40小时 研发工作由Walter Wong负责，他每周工作50小时 销售经理是Pradeep Sharma，她每周工作30个小时 Tom Robbins每周工作35小时，一半时间做行政工作，一半时间做销售 Adam Spencer每周工作50小时，大部分时间(90%)在销售部门，其余时间在行政部门 Susan Ryan每周在行政部门工作60个小时 Steven Smooth是一名全职销售人员(每周45小时) Max Schmidt, Maria Orlowska和Yusif Budianto全职从事研发工作(每周40小时) 以下数据来自澳大利亚税务局，给出了上述每个雇员的税务档案号码: Employee Tax File # Yusif Budianto 777-654-321 Maria Orlowska 123-987-654 Tom Robbins 323-626-929 Susan Ryan 993-893-864 Max Schmidt 419-813-573 Pradeep Sharma 222-333-444 John Smith 123-234-456 Steven Smooth 632-647-973 Adam Spencer 747-400-123 Walter Wong 326-888-711 练习1. 下载3个SQL文件 其中: schema.sql：含上述ER设计的关系模式，只是它缺少图中建议的所有约束，也缺少一些常识或应用程序约束 data.sql：包含一组有效的元组，根据上面的描述填充这个模式，并满足所有的域约束 bad.sql：包含此模式的无效元组集合 以上文件位于/home/cs9311/web/21T1/lab/02中，复制这些文件到私有目录下，并查阅编辑。 2. 创建一个新数据库来保存公司信息登录grieg服务器，使用createdb命令创建company数据库 3. 将模式加载到数据库输入以下命令，载入模式文件 psql company -f schema.sql 执行此命令后，正常情况下，将会创建出4个表。 如果再次执行此命令，应该会得到一些ERROR级别信息。 在PostgreSQL控制台中通过文件载入SQL文件的方法为： psql company # 先进入到PostgreSQL控制台中，并指定company数据库 company=# \\i schema.sql # 通过\\i 命令，载入文件 输入以下命令，查看现有数据库表信息： company=# \\d # 查看所有表结构 company=# \\d Employees # 查看Employees表结构 company=# select * from Employees; # 查看Employees表数据 4. 将有效数据加载到模式中将data.sql加载到数据库中 psql company -f data.sql 此时，可通过PostgreSQL控制台查看表数据 select * from Employees; # 查询所有Employees表数据 select count(*) from Departments; # 统计部门总数 根据输出结果，试着回答以下问题： 哪位员工每周工作时间最长? 销售部经理姓什么? 每个员工每周在每个部门工作多少小时? 5. 将无效数据加载到模式中运行以下命令，将bad.sql加载到模式中 psql company -f bad.sql 查看数据库表，可知这些数据为垃圾数据，能够被加入到数据库中，是因为数据库中的各个主键、约束等都没有设置。 现在，使用drop命令，删除company数据库。 6. 向模式中添加约束原始的模式配置文件没有任何约束，仅做了如下的定义： Employees.hoursPweek属性必须是一个浮点数 Employees.givenName是一个长度不超过30个字符的字符串 员工税务文件编号为11个字符的字符串 现在，你自己考虑如何增加限制，使错误数据无法添加到数据库中 从ER图看，有一些缺失显而易见，比如缺少主键和外键约束。 现在，你需要实现的需求是： 所有的TFN都是’ddd-ddd-ddd’的形式，其中每个d代表一个数字 每个人都有名，但不一定有姓(如Prince)。 没有人可以每周工作超过一周的时间(每周有7*24 = 168小时) 每周工作负小时是没有意义的 所有部门代码都是由三位数字组成的 两个部门不能有相同的名称或相同的经理 员工在部门工作的时间百分比必须大于零 一个员工可能会在一个特定的部门中花费他们全部的时间 修改schema.sql文件，来实现上述要求。 可以使用以下命令，重复执行来检查/载入schema.sql文件 $ createdb company $ psql company -f schema.sql ... Produces error messages .... ... Fix schema definition using editor in other window ... $ dropdb company $ createdb company $ psql company -f schema.sql ... 由于PostgreSQL在创建和销毁数据库的时候花费时间太长，你可以运行drop.sql，直接清空数据库，而无需重新创建和销毁数据库。 $ createdb company ... You only need to do this once ... $ psql company ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... ... along with error messages if there are problems with your schema definition ... company=# \\i drop.sql ... Produces a bunch of DROP TABLE messages ... ... May also produce ERRORS if some tables weren't created above ... ... These ERRORS can obviously be ignored ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... ... along with error messages if there are problems with your schema definition ... company=# \\i drop.sql ... ... Continue like this until the schema loads successfully ... ... i.e. until \\i schema.sql produces no ERROR messages ... 注意，根据PostgreSQL的规则，有时其在提示错误信息时给出的行号不是实际问题的行号。因此当出现错误信息时，需要自行判断问题所在位置。 7. 将有效数据加载到新数据库中当成功载入schema后，运行以下命令，加载数据库数据 psql company ... company=# \\i data.sql 由于数据库增加了限制，在加载这些数据时可能会产生错误。思考如何修改这些数据，使他们能够加载成功。 实现这些功能的一种常规操作步骤如下： $ createdb company $ psql company -f schema.sql $ psql company -f data.sql ... Produces error messages ... ... Fix data.sql using editor in other window ... $ dropdb company $ createdb company $ psql company -f schema.sql $ psql company -f data.sql ... 由于这种操作方式太过繁琐，因此建议使用clean.sql脚本，直接清除数据库表中的全部数据 $ psql company ... company=# \\i data.sql ... If it produces error messages ... ... fix data.sql using editor in other window ... company=# \\i clean.sql ... Produces messages about deleting tuples ... company=# \\i data.sql ... Repeat until this step produces no errors ... ... 当成功载入数据后，接下来就该准备载入bad.sql中的数据。 注意，你可以试着修改clean.sql中的语句顺序，执行后看看会有什么区别。 drop.sql的作用是删除全部数据库表，clean.sql的作用是删除全部表中的数据。 8. 拒绝插入无效数据当完整插入data数据后，尝试插入bad数据： $ psql company ... company=# \\i bad.sql 所有bad中的数据在插入数据库时均应出现ERROR错误提示。如果有数据被插入到数据库，说明schema中限制条件不足。 重复以下操作，直到数据库拒绝全部bad.sql中的数据 $ psql company ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... company=# \\i data.sql ... Produces INSERT messages; loads valid data ... company=# \\i bad.sql ... If it produces any INSERT messages, your schema is incorrect, so you should use a text editor to change schema.sql ... company=# \\i drop.sql ... Produces DROP TABLE messages; leaves empty database ... company=# \\i schema.sql ... Produces notices about creating tables, etc ... company=# \\i data.sql ... Produces INSERT messages; loads valid data... company=# \\i bad.sql ... ... Continue like this until your schema is correct i.e. until you receive only ERROR messages from \\i bad.sql ... 9. 挑战:复杂的约束1练习: 考虑如何实现以下约束: 没有一个工人可以有超过100%的时间分配 可以使用以下语句，作为测试SQL，插入非法数据： insert into WorksFor values ('747-400-123','003',10); 提示:你将需要使用PLpgSQL和 triggers，我们将在几周的课程中讨论。 10. 挑战:复杂的约束2考虑上述ER设计的一个变体，其中每个员工只为一个部门工作: 这可能会对关系模式造成的改变如下： 现在员工和部门之间的关系是n:1而不是n:m WorksFor表将被Employees表中的一个非空外键所取代(非空，因为每个员工都必须为一个部门工作) 属性“fraction”可以被删除，因为该分数总是100% 修改现有模式，使其正确地实现新的ER模型，然后尝试插入一些数据。 正确修改后，可能会出现这样的问题：如果想要增加新员工，比如已经存在一个部门才能与这个员工关联；；但是，在没有可以作为部门经理的员工前，不能插入任何部门元组。 如何解决这个问题呢? 有两种应对策略： 移除一些与Employees.worksFor属性或Departments.manager属性相关联的约束 好处： 1）这将允许在插入employee元组或Departments元组时，另一个元组非必须存在 缺点： 1） 这样做意味着ER模型所隐含的一些语义，如员工必须为某些部门工作，而部门必须有一个经理被删除了 2）在填充数据库之后，可以通过alter table命令添加约束，但是此时，如果已经存在无效数据的话，这些数据将被保留。 3）如果需要添加由新员工管理的新部门，则需要再次删除约束，将添加的内容添加到数据库，然后恢复约束。 更好的方法是，同时插入一个新雇员和一个新部门，这两个操作合并为一组操作进行处理。延迟约束检查到两个元组都插入完成之后。如果两个元组都满足coinstaints，那么操作是成功的。如果约束不满足，那么两个元组都应该被删除。将多个更新作为一个操作处理的方法称为事务。 PostgreSQL有一个方法可以指定约束检查延迟到事务结束时进行。在create table语句的文档中有关于可延迟约束的描述，在set constraints文档中有更多的解释。现在可以开始阅读这些文档，然后找出实现方法。 练习: 尝试实现这两种方案来处理“相互依赖的”外键约束。 本练习需要用到的技术总结Shell及数据库命令：createdb company # 创建company数据库 dropdb company # 删除company数据库 psql company # 进入company数据库 psql company -f schema.sql # 数据库company载入schema.sql文件 PostgreSQL命令：company=# \\d // 查看所有表结构 company=# \\d Employees // 查看Employees表结构 company=# \\i schema.sql // 在PostgreSQL控制台中载入SQL文件 SQL语句select * from Employees; # 查询所有Employees表数据 select count(*) from Departments; # 统计部门总数 create table tablename(attributes) # 建表语句 insert into WorksFor values ('747-400-123','003',10); # 向表中插入数据 delete from WorksFor; # 删除表数据 drop table WorksFor; # 删除表定义 SQL表定义及约束// 属性定义相关 char(11) // 字符，长度11 varchar(30) // 变长字符，长度30 float // 浮点类型 // 属性约束相关 PRIMARY KEY // 增加主键约束 NOT NULL // 非空约束 UNIQUE // 唯一性约束 REFERENCE tablename(keyname) // 外键约束 CHECK(condition) // 内容约束，其中condition是约束条件 // CHECK约束条件表达式相关 key LIKE 'express' // 按SQL表达式约束 key SIMILAR TO 'express' // 按正则表达式约束 key &gt;= and or &lt;= value // 键的值在数值范围内的约束 SQL样例// 建表语句 create table Employees ( tfn char(11) PRIMARY KEY check(tfn SIMILAR TO '\\d{3}-\\d{3}-\\d{3}'), givenName varchar(30) NOT NULL, familyName varchar(30), hoursPweek float check(hoursPweek &gt;=0 and hoursPweek &lt;=168) ); create table Departments ( id char(3) PRIMARY KEY check( id SIMILAR TO '\\d{3}'), name varchar(100) UNIQUE, manager char(11) UNIQUE references Employees(tfn) ); create table DeptMissions ( department char(3) REFERENCES Departments(id), keyword varchar(20) not null ); create table WorksFor ( employee char(11) REFERENCES Employees(tfn) not null, department char(3) REFERENCES Departments(id) not null, percentage float check(percentage&gt;=0 and percentage&lt;=100) ); // 清空表数据 delete from WorksFor; delete from DeptMissions; delete from Departments; delete from Employees; // 删除表定义 drop table WorksFor; drop table DeptMissions; drop table Departments; drop table Employees;","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"COMP9311 Lab笔记（Week 3）","slug":"COMP9311-Lab笔记（Week2）","date":"2021-03-03T11:34:13.000Z","updated":"2021-03-04T07:55:56.169Z","comments":true,"path":"2021/03/03/comp9311-lab-bi-ji-week2/","link":"","permalink":"http://szdf123.github.io/2021/03/03/comp9311-lab-bi-ji-week2/","excerpt":"","text":"实践目标 设置虚拟主机 在虚拟主机上安装PostgreSQL数据库服务器 创建、填充和检查一个非常小的数据库 背景学校的CSE服务器名字为grieg，使用它可以创建私有数据库PostgreSQL 练习场景一：建立一个虚拟机登录虚拟机ssh grieg # 使用学校网络登录 ssh CSEUsername@grieg.cse.unsw.edu.au # 使用外网登录 CSEUsername为 z学号 hostname # 查看主机名称 priv srvr # 创建私有目录 # 创建完成后，私有目录位置在/srvr/YOU/ 场景二：建立PostgreSQL服务运行已编写完成的脚本，安装PostgreSQL服务 ~cs9311/bin/pginit # 初始化PostgreSQL服务，仅运行一次即可 运行此命令后，将在/srvr/YOU/目录下创建一个名为pgsql的子目录，同时在/srvr/YOU/目录下生成一个名为env的文件。 pginit脚本已经检查了一些可能的错误，一般情况下能够正确安装服务。如果安装时出现警告提示，忽略即可。但如果有错误ERROR，一定要关注并解决。 安装完成后，根据脚本提示，运行以下命令，启动或关闭PostgreSQL服务 source /srvr/YOU/env # 载入环境变量 pgs start # 启动PostSQL服务 pgs stop # 停止PostSQL服务 PostgreSQL的日志文件在 pgsql/pg_xlog 注意，此目录和pgsql/base目录文件下的内容切勿手动修改，否则可能导致PostgreSQL无法正常运行。 如果想重新安装PostgreSQL，可使用以下方法 rm -rf /srvr/*YOU*/pgsql # 删除pgsql目录下的全部内容 pginit # 重新安装pgsql服务 以后每次进入grieg，都应先载入env环境变量。因此，可以将以下代码粘贴到.bash_profile 或 .bashrc 或 .profile 文件中，使登录系统后，自动载入。 if [ `hostname` = \"grieg\" ] then source /srvr/YOU/env fi 场景三：使用PostgreSQL服务器一般地，每次使用PostgreSQL服务器，应按照以下流程操作： 登录Grieg 启动PostgreSQL服务器 进行工作 停止PostgreSQL服务器 退出Grieg 注意，不要离开之前，使PostgreSQL服务始终运行！ 操作PostgreSQL的命令有： source /srvr/YOU/env # 载入环境变量 pgs start # 启动pgs服务 pgs status # 查看pgs运行状态 pgs stop # 关闭pgs服务 进入PostgreSQL的命令为： psql MyDatabase # 进入指定数据库中，其中，MyDatabase名字为要进入的数据库名称 psql -l # 查看已有数据库 小练习输入以下命令，可查看PostsqlSQL当前是否正在运行 psql -l 进入到PostgreSQL中的某个数据库后，命令提示符为 dbName=# # 管理员命令提示符 dbName=&gt; # 其他用户命令提示符 此处为PostgreSQL的官网使用手册 PostgreSQL的运行日志文件在 /srvr/YOU/pgsql/Log 小练习尝试启动和停止服务器几次，并在服务器运行和不运行时运行psql，然后分别查看屏幕显示的消息，查看内容有和区别。 小结典型的操作虚拟主机和PostgreSQL服务器的会话是这样的: ... on any CSE workstation ... $ ssh grieg ... grieg login stuff ... ... the following are all on grieg ... $ source /srvr/YOU/env $ pgs start $ psql MyDatabase ... use another xterm for editting ... $ pgs stop $ logout ... back to your original workstation ... 练习1：创建一个数据库登录服务器并启动PostgreSQL服务后，输入以下命令，创建数据库 createdb mydb # 创建指定名称的数据库，mydb为要创建的数据库命令 psql mydb # 进入到mydb数据库中 在PostgreSQL控制台，输入以下命令，控制数据库 mydb=# \\d # 查看已有关系（数据库表） mydb=# \\q # 退出数据库控制台 练习2：填充数据库使用现有SQL创建数据库表及数据 psql mydb -f ~cs9311/public_html/21T1/lab/01/mydb.sql # 使用现有SQL文件向数据库导入数据 psql mydb -f -q 文件名 # 开启静默模式 ( psql mydb -f ~cs9311/public_html/21T1/lab/01/mydb.sql 2&gt;&amp;1 ) | grep ERROR # 导入数据时仅显示ERROR信息 练习3：检查数据库在SQL标准中，标识符将忽略大小写。 mydb=# \\d Staff # 查看指定数据库表定义 mydb=# \\q # 退出数据库控制台 mydb=# select * from Staff; # 查看指定数据库表中的全部数据 小练习select * from Students where degree=3978; # 查询degree为3978的全部学生 select count(*) from Students where degree=3978; # 查询degree为3978的学生总数 select * from Staff where position like '%Professor%'; # 查询全部教授数据 select course,count(*) from Enrolment group by course; # 查询每种课程的选课人数 select c.code, c.title # 查询指定姓名教师的授课名称 from Courses c, Staff s where s.name='Andrew Taylor' and c.lecturer=s.userid; 可能遇到的问题无法重启PostgreSQL服务器pgs stop # 正常关闭PostgreSQL服务器的命令 解决思路 tail -2 /srvr/YOU/logfile # 查看日志 psql -l # 查看当前服务状态 PostgreSQL运行时生成的PID为位置在/srvr/YOU/pgsql/postmaster.pid 正常关闭时，PostgreSQL将自动删除此文件。若上次PostgreSQL未正常关闭，需要手动删除此文件 rm /srvr/YOU/pgsql/postmaster.pid # 手动删除pid文件 rm /srvr/YOU/pgsql/.s* # 删除socket文件","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"pygame游戏开发查询手册","slug":"pygame游戏开发查询手册","date":"2021-03-02T12:35:57.000Z","updated":"2021-03-04T07:53:51.456Z","comments":true,"path":"2021/03/02/pygame-you-xi-kai-fa-cha-xun-shou-ce/","link":"","permalink":"http://szdf123.github.io/2021/03/02/pygame-you-xi-kai-fa-cha-xun-shou-ce/","excerpt":"","text":"pygame基础使用规则关于初始化import pygame # 引入pygame模块 pygame.init() # 初始化pygame pygame.quit() # 退出pygame screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) # 创建游戏窗口 pygame.display.update() # 更新窗口显示 关于时钟与刷新帧率clock = pygame.time.Clock() # 获取pygame时钟 clock.tick(60) # 数字为刷新帧率 关于绘制图像bg = pygame.image.load(\"background.png\") # 加载背景图像 screen.blit(bg, (0, 0)) # 绘制图像到窗口 rect = pygame.Rect(200, 800, 140, 178) # 定义元素矩形，参数依次为X，Y，width，height 关于事件pygame.event.get() # 获取pygame的全部事件 pygame定义的事件常量pygame.QUIT # 退出事件 精灵和精灵组pygame.sprite.Sprite # 精灵类 pygame.sprite.Group # 精灵组类 继承精灵类import pygame class MySprite(pygame.sprite.Sprite): \"\"\"自定义游戏精灵\"\"\" def __init__(self, image_name, speed=1): super().__init__() self.image = pygame.image.load(image_name) self.rect = self.image.get_rect() self.speed = speed # speed为自定义的精灵属性 def update(self): self.rect.y += self.speed 使用精灵类和精灵组from sprites.my_sprites import * # 引用自定义精灵组类 my_sprite = PlaneSprite(\"sprite.png\") # 实例化精灵 sprite_group = pygame.sprite.Group(my_sprite) # 实例化精灵组 enemy_group.update() # 调用精灵组中的精灵的全部update方法 enemy_group.draw(screen) # 绘制精灵组到屏幕 游戏循环graph TD H[游戏初始化] H --&gt; I[设置游戏窗口] I --&gt; J[创建游戏时钟] J --&gt; K[创建精灵/精灵组] F[游戏循环] F --&gt; A[设置刷新帧率] A --&gt; B[事件监听] B --&gt; C[碰撞检测] C --&gt; D[更新/绘制精灵组] D --&gt; E[更新屏幕显示]","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"游戏","slug":"游戏","permalink":"http://szdf123.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"}],"author":"Benjamin"},{"title":"计算机技术英语生词本","slug":"计算机技术英语生词本","date":"2021-03-01T09:23:15.000Z","updated":"2021-03-04T16:22:21.256Z","comments":true,"path":"2021/03/01/ji-suan-ji-ji-zhu-ying-yu-sheng-ci-ben/","link":"","permalink":"http://szdf123.github.io/2021/03/01/ji-suan-ji-ji-zhu-ying-yu-sheng-ci-ben/","excerpt":"","text":"2021-03-01数据库anomaly n. 异常；不规则；反常事物 update anomalies 更新异常 insertion anomalies 插入异常 deletion anomalies 删除异常 semantic adj. 语义的；语义学的 modification n. 修改，修正；改变 inconsistent adj. 不一致的；前后矛盾的 insertion n. 插入；嵌入；插入物 deletion n. 删除 generalization n. 概括；普遍化；一般化 FD (Functional Dependency) 函数依赖 derivation n. 概括；普遍化；一般化 augmentation n. 增加，增大；增加物 transitivity n. 传递性；动词的及物性；转移性 additivity n. 添加；相加性 projectivity n. 投射心理；射影对应性；投射倾向 pseudotransitivity 伪递移法则 denote vt. 表示，指示 closure n. 关闭；终止，结束 relational schema 关系模式 2021-03-04离散数学argument n.论点 declarative sentences 陈述句 permises n.前提：包含一些论点的陈述句 conclusion n. 结论 entail vt. 使需要，必需；承担；遗传给；蕴含 n. 引起；需要；继承 propositional logic 命题逻辑 formulae n.公式 formalised vi. 使形式化，使正式 implementation n. 实施，履行 valid a. 有效的，合理的 tautology n.同意反复 detote vt. 表示 evaluate vt. 评价；估价 tautology n. 同义反复；无谓的重复 irrational adj. 不合理的；无理性的；荒谬的 n. [数] 无理数 Contradiction n. 矛盾；否认；反驳 substitution n. 代替；[数] 置换；代替物 valuation n. 评价，估价；计算 parenthese n. 括号；圆括号 complementation n. 互补；互补作用 isomorphic adj. [物] 同构的；同形的 cartesian adj. 笛卡尔的；笛卡尔哲学的 auxiliary adj. 辅助的；副的；附加的；（发动机、设备等）备用的","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"英语","slug":"英语","permalink":"http://szdf123.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"数据库SQL命令","slug":"数据库SQL命令","date":"2021-02-28T17:06:01.000Z","updated":"2021-03-04T07:55:11.132Z","comments":true,"path":"2021/03/01/shu-ju-ku-sql-ming-ling/","link":"","permalink":"http://szdf123.github.io/2021/03/01/shu-ju-ku-sql-ming-ling/","excerpt":"","text":"SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言 SQL 的动词 SQL功能 动词 数据查询 Select 数据定义 Create,Drop,Alter 数据操纵 Insert, Update, Delete 数据控制 Grant, Revoke SQL 的数据定义语句 操作对象 创建 删除 修改 模式 Create Schema Drop Schema 表 Create Table Drop Table Alter Table 视图 Create View Drop View 索引 Create Index Drop Index Alter Index 定义模式CREATE SCHEMA [&lt;模式名&gt;] AUTHORIZATION &lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;] CREATE SCHEMA “S-T” AUTHORIZATION WANG; 其中，模式名可隐藏，默认为&lt;用户名&gt;","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"COMP9311课程笔记（Week2）","slug":"COMP9311课程笔记（Week2）","date":"2021-02-28T15:20:47.000Z","updated":"2021-03-04T07:53:40.742Z","comments":true,"path":"2021/02/28/comp9311-ke-cheng-bi-ji-week2/","link":"","permalink":"http://szdf123.github.io/2021/02/28/comp9311-ke-cheng-bi-ji-week2/","excerpt":"","text":"关系代数关系数据库语言的分类关系代数语言：用对关系的运算来表达查询要求 关系演算语言：用谓词来表达查询要求 元组关系演算语言谓词变元的基本对象是元组变量代表：APLHA, QUEL 域关系演算语言谓词变元的基本对象是域变量代表：QBE 具有关系代数和关系演算双重特点的语言代表：SQL（Structured Query Language） 关系代数定义关系代数是一种抽象的查询语言，它用对关系的运算来表达查询 关系代数的特点 运算对象是关系 运算结果亦为关系 关系代数的运算符有两类：集合运算符和专门的关系运算符 运算符 含义 集合运算符 $\\cup $ 并 $- $ 差 $\\cap $ 交 $\\times$ 笛卡尔积 专门的关系运算符 $\\sigma$ 选择 $ \\pi$ 投影 $\\Join$ 连接 $\\div$ 除 传统的集合运算一些基本概念（1）$R,t\\in R,t[A_i]$设关系模式为$R(A_1,A_2,\\dots , A_n)$它的一个关系设为$R$$t \\in R $表示$t$是$R$的一个元组$t[A_i]$则表示元组$t$中相应于属性$A_i$的一个分量 （2）$A,t[A], \\bar{A}$若$A={A_{i1}, A_{i2}, \\dots, A_{ik}}$ ，其中$A_{i1}, A_{i2}, \\dots, A_{ik}$ 是$A_{1}, A_{2}, \\dots, A_{n}$ 中的一部分，则$A$称为属性列或属性组。$t[A]=(t[A_{i1}],t[A_{i2}],\\dots,t[A_{ik}])$表示元组$t$在属性列$A$上诸分量的集合。$\\bar{A}$则表示${A_{1}, A_{2}, \\dots, A_{n}}$中去掉${A_{i1}, A_{i2}, \\dots, A_{ik}}$后剩余的属性组。 (3)$\\overset{\\frown}{t_rt_s}$$R$为$n$目关系，$S$为$m$目关系。$t_r\\in R,t_s \\in S, \\overset{\\frown}{t_rt_s}$称为元组的连接。$\\overset{\\frown}{t_rt_s}$是一个$n+m$列的元组，前$n$个分量为$R$中的一个$n$元组，后$m$个分量为$S$中的一个$m$元组。 (4)象集$Z_x$给定一个关系$R（X，Z），X$和$Z$为属性组。 当$t[X]=x$时，$x$在$R$中的象集（Images Set）为：$Zx={t[Z]|,t ∈R,t[X]=x}$它表示$R$中属性组$X$上值为$x$的诸元组在$Z$上分量的集合 1. 并（Union） $R$和$S$ 具有相同的目$n$（即两个关系都有$n$个属性） 相应的属性取自同一个域$R\\cup S$ 仍为$n$目关系，由属于$R$或属于$S$的元组组成$R\\cup S = \\{ t|t ∈ R\\lor t \\in S\\}$ 2. 差（Difference） $R$和$S$ 具有相同的目$n$ 相应的属性取自同一个域$R - S $ 仍为$n$目关系，由属于$R$而不属于$S$的所有元组组成$R -S = \\{ t|t∈R∧t∉S \\}$ 3.交（Intersection） $R$和$S$具有相同的目$n$ 相应的属性取自同一个域 $R∩S$ 仍为$n$目关系，由既属于$R$又属于$S$的元组组成 $R∩S = \\{ t|t ∈ R∧t ∈S \\}\\\\ R∩S = R –(R-S）$ 4.笛卡尔积（Cartesian Product） $R: n$目关系，$k_1$个元组； $S: m$目关系，$k_2$个元组对于$R×S$，有 列：$（n+m）$列元组的集合元组的前$n$列是关系$R$的一个元组后$m$列是关系$S$的一个元组 行：$k_1×k_2$个元组$R×S = \\{\\overset{\\frown}{t_rt_s}|t_r ∈R ∧ t_s∈S \\}$","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"}],"author":"Benjamin"},{"title":"Python3教程笔记（一）","slug":"Python3教程笔记","date":"2021-02-26T14:18:55.000Z","updated":"2021-03-04T07:53:05.840Z","comments":true,"path":"2021/02/26/python3-jiao-cheng-bi-ji/","link":"","permalink":"http://szdf123.github.io/2021/02/26/python3-jiao-cheng-bi-ji/","excerpt":"","text":"本文根据菜鸟教程整理 语法基础语法编码 默认编码：UTF-8 # -*- coding: cp-1252 -*- 标示符需要符合以下正则表达式： [_A-Za-z]+[_A-Za-z0-9]* （变量名也支持中文） python保留字&gt;&gt;&gt; import keyword &gt;&gt;&gt; keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释单行注释 #，多行注释 ‘’’和 “”” 行与缩进python使用行与缩进表示代码块，不使用{}等符号 多行语句使用== \\\\==实现多行语句 在 [], {}, 或 () 中，不需要使用多行语句 数字(Number)类型整数int、布尔型bool、浮点数float和复数complex 字符串(String) 单引号’’及双引号””语义完全相同 使用三引号定义多行字符串 转义字符为\\\\ 使用r’内容’，使字符串中的内容不转义 使用+号拼接，使用*号重复 索引左侧数从0开始，右侧数从-1开始 没有单独的字符类型 字符串截取：变量[头下标:尾下标:步长] 空行用于分割函数或类，不是Python语法，仅用于便于日后维护 等待用户输入#!/usr/bin/python3 input(\"\\n\\n按下 enter 键后退出。\") 同一行显示多条语句语句见使用;分割 多个语句构成代码组即缩进相同的一组语句构成一个代码块 print 输出 print 默认输出后换行 不换行需要在尾部加上 end=”” import 与 from…import 导入整个模块：import somemodule 从模块中导入函数： from somemodule import firstfunc, secondfunc, thirdfunc 导入模块中的全部函数： from somemodule import * 命令行参数可使用python -h命令查看python帮助 Python3 基本数据类型变量声明及赋值 定义变量时不需要声明类型 使用=给变量赋值 使用del删除变量 多个变量赋值允许同时为多个变量赋值，格式为 a = b = c = 1 # a,b,c均赋值为1 a, b, c = 1, 2, \"runoob\" # a,b,c分别赋值 标准数据类型 Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组） 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合） Number（数字）支持 int、float、bool、complex（复数） Python3 没有Long，Python2有Long类型 type(a) # 查询对象类型，不会认为子类是一种父类类型 isinstance(a, int) # 判断对象是否为指定类型，认为子类是一种父类类型 基本数学运算&gt;&gt;&gt; 5 + 4 # 加法 &gt;&gt;&gt; 4.3 - 2 # 减法 &gt;&gt;&gt; 3 * 7 # 乘法 &gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数 &gt;&gt;&gt; 2 // 4 # 除法，得到一个整数 &gt;&gt;&gt; 17 % 3 # 取余 &gt;&gt;&gt; 2 ** 5 # 乘方 String（字符串） 使用’’或“”定义，或使用 “””…””” ‘’’…’’’ 跨越多行定义 使用\\转义 截取字符串方法 变量名[头下标:尾下标] 使用+连接字符串，使用*重复字符串 使用r’’定义原始不转义字符串 索引从左往右以0开始，从右往左以-1开始 List（列表） 使用[]符号定义，元素间使用,符号分割 列表中的数据类型可以不相同 可以被截取，截取方式为：变量名[头下标:尾下标] 或 变量名[头下标:尾下标:步长] 可以被索引和切片，索引值以 0 为开始值，-1 为从末尾的开始位置 加号 + 是列表连接运算符，星号 * 是重复操作 列表中的元素可以改变 a[0] = 9 # 改变列表单个值 a[2:5] = [13, 14, 15] # 改变列表多个值 a[2:4] = [] # 删除列表中的指定项数据 Tuple（元组） 使用()符号定义，元素之间用逗号隔开 元组的元素不能修改 可以被索引且下标索引从0开始，-1 为从末尾开始的位置 可以被截取，截取方式为：变量名[头下标:尾下标] 或 变量名[头下标:尾下标:步长] 元组的元素可以是可变的对象，比如list列表 string、list 和 tuple 都属于 sequence（序列） Set（集合） 使用大括号 { } 或者 set() 函数创建集合 # 集合的运算 a - b # a 和 b 的差集 a | b # a 和 b 的并集 a &amp; b # a 和 b 的交集 a ^ b # a 和 b 中不同时存在的元素 Dictionary（字典） 使用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合 列表是有序的对象集合，字典是无序的对象集合 键(key)必须使用不可变类型 在同一个字典中，键(key)必须是唯一的，不能重复 字典类型也有一些内置的函数，例如clear()、keys()、values() 创建空字典使用 { } 字典是一种映射类型，它的元素是键值对 # 字典的基本使用方法 dict['one'] # 输出键为 'one' 的值 dict[2] # 输出键为 2 的值 print (tinydict) # 输出完整的字典到控制台 tinydict.keys() # 输出所有键 tinydict.values() # 输出所有值 # 构造函数 dict() 可以直接从键值对序列中构建字典 dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)]) {x: x**2 for x in (2, 4, 6)} dict(Runoob=1, Google=2, Taobao=3) Python数据类型转换 函数 描述 int(x [,base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 运算符Python算术运算符 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 31 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -11 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 210 / 除 - x 除以 y b / a 输出结果 2.1 % 取模 - 返回除法的余数 b % a 输出结果 1 ** 幂 - 返回x的y次幂 a**b 为10的21次方 // 取整除 - 向下取接近商的整数 &gt;&gt;&gt; 9//2 # 4&gt;&gt;&gt; -9//2 # -5 Python比较运算符 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。 (a &lt; b) 返回 True。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 True。 Python赋值运算符 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c = a 等效于 c = c a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a := 海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。 在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) &gt; 10: print(f\"List is too long ({n} elements, expected &lt;= 10)\") Python位运算符 运算符 描述 实例 &amp; 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100 $#124; 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 (a \\ b) 输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 &lt;&lt; 左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。 a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000 &gt;&gt; 右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数 a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111 Python逻辑运算符 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False Python成员运算符 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 Python身份运算符 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 id() 函数用于获取对象内存地址 is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。 Python运算符优先级 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，求余数和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 逻辑比较中，顺序 not&gt;and&gt;or Python3不再支持 &lt;&gt; 运算符 数字(Number) 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。 浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250） 复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 Python 数字类型转换 int(x) 将x转换为一个整数。 float(x) 将x转换到一个浮点数。 complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。 complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。 Python 数字运算加+, 减-,乘 * ,除/,取整除//,幂** 在交互模式中，最后被输出的表达式结果被赋值给变量 _ 数学函数 函数 返回值 ( 描述 ) abs(x) 返回数字的绝对值，如abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如math.ceil(4.1) 返回 5 cmp(x, y) 如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换。 exp(x) 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045 fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0 floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4 log(x) 如math.log(math.e)返回1.0,math.log(100,10)返回2.0 log10(x) 返回以10为基数的x的对数，如math.log10(100)返回 2.0 max(x1, x2,…) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,…) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。其实准确的说是保留值将保留到离上一位更近的一端。 sqrt(x) 返回数字x的平方根。 随机数函数 函数 描述 choice(seq) 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。 randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1 random() 随机生成下一个实数，它在[0,1)范围内。 seed([x]) 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。 shuffle(lst) 将序列的所有元素随机排序 uniform(x, y) 随机生成下一个实数，它在[x,y]范围内。 三角函数 函数 描述 acos(x) 返回x的反余弦弧度值。 asin(x) 返回x的反正弦弧度值。 atan(x) 返回x的反正切弧度值。 atan2(y, x) 返回给定的 X 及 Y 坐标值的反正切值。 cos(x) 返回x的弧度的余弦值。 hypot(x, y) 返回欧几里德范数 sqrt(xx + yy)。 sin(x) 返回的x弧度的正弦值。 tan(x) 返回x弧度的正切值。 degrees(x) 将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0 radians(x) 将角度转换为弧度 数学常量 常量 描述 pi 数学常量 pi（圆周率，一般以π来表示） e 数学常量 e，e即自然常数（自然常数）。 Python3 字符串 使用引号( ' 或 \" )来创建字符串。 Python 访问字符串中的值 不支持单字符类型 使用方括号 [] 来截取字符串 Python转义字符 转义字符 描述 实例 \\(在行尾时) 续行符 &gt;&gt;&gt; print(\"line1 \\ ... line2 \\ ... line3\") line1 line2 line3 &gt;&gt;&gt; \\\\ 反斜杠符号 &gt;&gt;&gt; print(\"\\\\\") \\ \\’ 单引号 &gt;&gt;&gt; print('\\'') ' \\” 双引号 &gt;&gt;&gt; print(\"\\\"\") \" \\a 响铃 &gt;&gt;&gt; print(\"\\a\")执行后电脑有响声。 \\b 退格(Backspace) &gt;&gt;&gt; print(\"Hello \\b World!\") Hello World! \\000 空 &gt;&gt;&gt; print(\"\\000\") &gt;&gt;&gt; \\n 换行 &gt;&gt;&gt; print(\"\\n\") &gt;&gt;&gt; \\v 纵向制表符 &gt;&gt;&gt; print(\"Hello \\v World!\") Hello World! &gt;&gt;&gt; \\t 横向制表符 &gt;&gt;&gt; print(\"Hello \\t World!\") Hello World! &gt;&gt;&gt; \\r 回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。 &gt;&gt;&gt; print(\"Hello\\rWorld!\") World! &gt;&gt;&gt; print('google runoob taobao\\r123456') 123456 runoob taobao \\f 换页 &gt;&gt;&gt; print(\"Hello \\f World!\") Hello World! &gt;&gt;&gt; \\yyy 八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。 &gt;&gt;&gt; print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\") Hello World! \\xyy 十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行 &gt;&gt;&gt; print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\") Hello World! \\other 其它的字符以普通格式输出 Python字符串运算符下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”： 操作符 描述 实例 + 字符串连接 a + b 输出结果： HelloPython * 重复输出字符串 a*2 输出结果：HelloHello [] 通过索引获取字符串中字符 a[1] 输出结果 e [ : ] 截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。 a[1:4] 输出结果 ell in 成员运算符 - 如果字符串中包含给定的字符返回 True ‘H’ in a 输出结果 True not in 成员运算符 - 如果字符串中不包含给定的字符返回 True ‘M’ not in a 输出结果 True r/R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。 print( r'\\n' ) print( R'\\n' ) % 格式字符串 请看下一节内容。 Python字符串格式化 符 号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 格式化操作符辅助指令: 符号 功能 * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + ) 在正数前面显示空格 # 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) 0 显示的数字前面填充’0’而不是默认的空格 % ‘%%’输出一个单一的’%’ (var) 映射变量(字典参数) m.n. m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) Python三引号 允许一个字符串跨多行 f-string python3.6 之后版本新增功能 &gt;&gt;&gt; name = 'Runoob' &gt;&gt;&gt; f'Hello {name}' # 替换变量 'Hello Runoob' &gt;&gt;&gt; f'{1+2}' # 使用表达式n'3' &gt;&gt;&gt; w = {'name': 'Runoob', 'url': 'www.runoob.com'} &gt;&gt;&gt; f'{w[\"name\"]}: {w[\"url\"]}' 在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; print(f'{x+1}') # Python 3.6 2 &gt;&gt;&gt; x = 1 &gt;&gt;&gt; print(f'{x+1=}') # Python 3.8 'x+1=2' Unicode 字符串在Python3中，所有的字符串都是Unicode字符串 Python 的字符串内建函数 序号 方法及描述 1 capitalize() 将字符串的第一个字符转换为大写 2 center(width, fillchar) 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。 3 count(str, beg= 0,end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数 4 bytes.decode(encoding=”utf-8”, errors=”strict”) Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 5 encode(encoding=’UTF-8’,errors=’strict’) 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’ 6 endswith(suffix, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False. 7 expandtabs(tabsize=8) 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。 8 find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1 9 index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在字符串中会报一个异常。 10 isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False 11 isalpha() 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False 12 isdigit() 如果字符串只包含数字则返回 True 否则返回 False.. 13 islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False 14 isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False 15 isspace() 如果字符串中只包含空白，则返回 True，否则返回 False. 16 istitle() 如果字符串是标题化的(见 title())则返回 True，否则返回 False 17 isupper() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False 18 join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串 19 len(string) 返回字符串长度 20 ljust(width[, fillchar]) 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。 21 lower() 转换字符串中所有大写字符为小写. 22 lstrip() 截掉字符串左边的空格或指定字符。 23 maketrans() 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 24 max(str) 返回字符串 str 中最大的字母。 25 min(str) 返回字符串 str 中最小的字母。 26 replace(old, new [, max]) 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。 27 rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找. 28 rindex( str, beg=0, end=len(string)) 类似于 index()，不过是从右边开始. 29 rjust(width,[, fillchar]) 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串 30 rstrip() 删除字符串字符串末尾的空格. 31 split(str=””, num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串 32 splitlines([keepends]) 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 33 startswith(substr, beg=0,end=len(string)) 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。 34 strip([chars]) 在字符串上执行 lstrip()和 rstrip() 35 swapcase() 将字符串中大写转换为小写，小写转换为大写 36 title() 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle()) 37 translate(table, deletechars=””) 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中 38 upper() 转换字符串中的小写字母为大写 39 zfill (width) 返回长度为 width 的字符串，原字符串右对齐，前面填充0 40 isdecimal() 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。 Python3 列表 列表都可以进行的操作包括索引，切片，加，乘，检查成员。 访问列表中的值 列表索引从 0 开始，第二个索引是 1，依此类推 使用方括号 [] 的形式截取字符，左闭右开 更新列表list[2] = 2001 list.append(100) 删除列表元素del list[2] Python列表脚本操作符 Python 表达式 结果 描述 len([1, 2, 3]) 3 长度 [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6] 组合 [‘Hi!’] * 4 [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] 重复 3 in [1, 2, 3] True 元素是否存在于列表中 for x in [1, 2, 3]: print(x, end=” “) 1 2 3 迭代 Python列表截取与拼接 Python 表达式 结果 描述 L[2] ‘Taobao’ 读取第三个元素 L[-2] ‘Runoob’ 从右侧开始读取倒数第二个元素: count from the right L[1:] [‘Runoob’, ‘Taobao’] 输出从第二个元素开始后的所有元素 嵌套列表使用嵌套列表即在列表里创建其它列表 Python列表函数&amp;方法Python包含以下函数: 序号 函数 1 len(list) 列表元素个数 2 max(list) 返回列表元素最大值 3 min(list) 返回列表元素最小值 4 list(seq) 将元组转换为列表 Python包含以下方法: 号 方法 1 list.append(obj) 在列表末尾添加新的对象 2 list.count(obj) 统计某个元素在列表中出现的次数 3 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表） 4 list.index(obj) 从列表中找出某个值第一个匹配项的索引位置 5 list.insert(index, obj) 将对象插入列表 6 list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值 7 list.remove(obj) 移除列表中某个值的第一个匹配项 8 list.reverse() 反向列表中元素 9 list.sort( key=None, reverse=False) 对原列表进行排序 10 list.clear() 清空列表 11 list.copy() 复制列表","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"}],"author":"Benjamin"},{"title":"Hexo个人博客搭建教程","slug":"hexo搭建教程","date":"2021-02-24T07:33:43.000Z","updated":"2021-03-04T07:56:15.993Z","comments":true,"path":"2021/02/24/hexo-da-jian-jiao-cheng/","link":"","permalink":"http://szdf123.github.io/2021/02/24/hexo-da-jian-jiao-cheng/","excerpt":"","text":"本教程为使用Mac搭建Hexo个人博客 Hexo官方安装部署文档 Hexo官方中文安装部署文档 1. 下载安装Nodejs在Nodejs官网，下载最新版Node.js，并安装至/usr/local/bin/node 安装npm至/usr/local/bin/npm 2. 启动iterm，安装cnpm，安装进入Mac 命令行中，输入 node -v # 查看node版本 查看node npm -v # 查看npm版本 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org # 安装cnpm cnpm -v # 查看cnpm版本版本 3.安装hexocnpm install -g hexo-cli # 安装hexo hexo -v # 查看hexo的版本 4. 在本地创建博客目录cd 【本地目录】 # 该目录用于存放未来全部的博客内容 mkdir blog cd blog hexo init # 初始化博客 hexo s # 启动hexo 默认启动本地4000端口 http://localhost:4000 在blog目录下hexo n \"我的第一篇博客\" # 创建博客 hexo clean 清空缓存 hexo g 自动创建静态文件 5. 创建github的repository进入github，创建与登录账号同名的repository xxx.github.io 并生成token：【Token】 Token极其私密，请牢记，勿分享！ 6. 本地安装hexo-git插件cnpm install --save hexo-deployer-git 在blog目录下，修改_config.yml文件 Deployment下，修改为以下内容 deploy:type: gitrepo: https://github.com/xxx/xxx.github.io.gitbranch: mastertoken: * hexo d # 部署Hexo服务到远端 7. 访问在线博客 xxx.github.io 8. 定制主题Hexo的主题有很多，如 github.com/litten/hexo-theme-yiliagithub.com/cendeal/hexo-theme-aomorigithub.com/jangdelong/hexo-theme-xupsgithub.com/blinkfox/hexo-theme-matery 将主题克隆至本地git clone http://github.com/litten/hexo-theme-yilia.git themes/yilia git clone https://github.com/cendeal/hexo-theme-aomori.git themes/aomori git clone https://github.com/jangdelong/hexo-theme-xups.git themes/xups git clone https://github.com/blinkfox/hexo-theme-matery.git themes/matery vim _config.yml将 theme: landscape 修改为 theme: yilia或aomori在本地编译，部署服务hexo clean hexo g hexo d或hexo d -g 9. 修复模板缺失问题npm i hexo-generator-json-content --save 修改_config.yml，增加以下配置 jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 10. 使用LaTeX可参考 Hexo博客中使用Latex","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"COMP9020课程笔记（Week2）","slug":"COMP9020课程笔记（Week2）","date":"2021-02-24T07:33:43.000Z","updated":"2021-03-04T15:00:54.596Z","comments":true,"path":"2021/02/24/comp9020-ke-cheng-bi-ji-week2/","link":"","permalink":"http://szdf123.github.io/2021/02/24/comp9020-ke-cheng-bi-ji-week2/","excerpt":"","text":"Week 2Logical 逻辑逻辑等价 Logical Equivalence \\begin{align} \\mbox{Excluded Middle} \\qquad p\\lor \\lnot p & \\equiv \\top \\\\ \\mbox{Contradiction} \\qquad p\\wedge \\lnot p & \\equiv \\bot \\\\ \\mbox{Idempotence} \\qquad \\quad p\\lor p & \\equiv p \\\\ p \\wedge p & \\equiv p \\\\ \\mbox{Double Negation} \\qquad \\quad \\lnot \\lnot p & \\equiv p \\\\ \\mbox{Identity} \\qquad \\quad p \\lor \\bot & \\equiv p \\\\ p \\wedge \\top & \\equiv p \\\\ p \\lor \\top & \\equiv \\top \\\\ p \\wedge \\bot & \\equiv \\bot \\\\ \\mbox {Commutativity} \\qquad \\quad p \\lor q & \\equiv q \\lor v \\\\ p\\land q & \\equiv q \\land p \\\\ \\mbox {Associativity}\\qquad (p \\lor q ) \\lor r & \\equiv p \\lor (q \\lor r ) \\\\ (p \\land q ) \\land r & \\equiv p \\land ( q \\land r ) \\\\ \\mbox {Distribution}\\qquad p \\lor (q \\land r) & \\equiv (p \\lor q) \\land ( p \\lor r) \\\\ p \\land (q \\lor r) & \\equiv (p \\land q)\\lor (p \\land r) \\\\ \\mbox {De Morgan's laws}\\qquad \\lnot (p \\land q) & \\equiv \\lnot p \\lor \\lnot q \\\\ \\lnot (p \\lor q) & \\equiv \\lnot p \\land \\lnot q \\\\ \\mbox {Implication} \\qquad \\qquad p \\Rightarrow q & \\equiv \\lnot p \\lor q \\\\ p \\Leftrightarrow q & \\equiv (p \\Rightarrow q) \\land (q \\Rightarrow p) \\end{align}Example \\begin{array} ((r \\land \\lnot p ) \\lor (r \\land q)) \\lor (( \\lnot r \\land \\lnot p ) \\lor (\\lnot r \\land q)) \\\\ \\qquad \\equiv (r \\land ( \\lnot p \\lor q )) \\lor (\\lnot r \\land ( \\lnot p \\lor q )) \\qquad \\mbox {Distrib.} \\\\ \\qquad \\equiv (r \\lor \\lnot r) \\land (\\lnot p \\lor q) \\qquad \\qquad \\qquad \\quad \\mbox {Distrib.} \\\\ \\qquad \\equiv \\top \\land (\\lnot p \\lor q ) \\qquad \\qquad \\qquad \\qquad \\quad \\mbox {Excl. Mid.} \\\\ \\qquad \\equiv \\lnot p \\lor q \\qquad \\qquad \\qquad \\qquad \\qquad \\qquad \\mbox {Ident.} \\end{array} \\color {Green} \\checkmark p \\Rightarrow ( q \\Rightarrow r) \\equiv ( p \\Rightarrow q) \\Rightarrow (p \\Rightarrow r) \\\\ \\color {Red} \\times (p \\Rightarrow q ) \\Rightarrow r \\equiv p \\Rightarrow (q \\Rightarrow r ) p q r $(p \\Rightarrow q ) \\Rightarrow r$ $p \\Rightarrow (q \\Rightarrow r )$ F T F $ \\color{Red}{\\mbox{F}}$ $ \\color {Green} {\\mbox{T}}$ A B $ A \\Rightarrow B $ $\\lnot ( A \\Rightarrow B )$ FFTT FTFT $ \\color{Green}{\\mbox{T}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$ $ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$ Example:根据例题描述，得出： $J \\Rightarrow \\lnot S$ $S \\Rightarrow K$ $K \\Rightarrow J$ 求$\\phi = (J\\Rightarrow \\lnot S) \\land (S\\Rightarrow K) \\land (K\\Rightarrow J)$为真的情形。 解析真值表为： J K S $J\\Rightarrow \\lnot S$ $S \\Rightarrow K$ $K \\Rightarrow J$ $\\phi$ FFFFTTTT FFTTFFTT FTFTFTFT FF FF FF $ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$$ \\color{Green}{\\mbox{T}}$$ \\color{Red}{\\mbox{F}}$ Exercise 2.7.14:Which of the following formulae are always true? (a) $(p \\land (p \\Rightarrow q)) \\Rightarrow q \\color{Green}{\\checkmark}$ (b) $((p \\lor q) \\land \\lnot p) \\Rightarrow \\lnot q\\color{Red}{\\times}$ (e) $((p\\Rightarrow q) \\lor (q \\Rightarrow r)) \\Rightarrow (p \\Rightarrow r)\\color{Red}{\\times}$ (f) $(p \\land q) \\Rightarrow q\\color{Green}{\\checkmark}$ 有效性、蕴涵、参数 Validity, Entailment, Argumentspermises 前提：包含一些论点的陈述句 The conclusion logically follows from the premises. The conclusion is a logical consequence of the premises. The premises entail the conclusion. DEF： $\\phi_1,\\dots,\\phi_n \\vDash \\phi $ Applications III: Reasoning About Requirements/Specififications The requirements cannot be implemented if $\\phi_1 \\land \\dots \\land \\phi_n$ is not satisfifiable. if $\\phi_1 , \\dots , \\phi_n \\vDash \\psi$ then every correct implementation of the requirements R will be such that C is always true in the resulting system. If $\\phi_1 , \\dots , \\phi_{n-1} \\vDash \\phi_n$, then the condition $\\phi_n$ of the specifification is redundant and need not be stated in the specifification. Validity of Formulas 公式的有效性Validity, Equivalence and Entailment 有效性，等价性和蕴含性定理 Theorem以下等价 $\\phi_1,\\dots,\\phi_n\\vDash\\psi$ $\\vDash(\\phi_1\\land\\dots\\land\\phi_n)\\Rightarrow \\psi$ $\\vDash \\phi_1 \\Rightarrow (\\phi_2\\Rightarrow \\dots (\\phi_n \\Rightarrow \\psi )\\dots)$ $\\phi \\equiv \\psi \\ \\mbox{if and only if} \\vDash \\phi \\Leftrightarrow \\psi$ Proof Roles and Methods 证明规则与方法Proof Roles and Methods: Proof by Cases 按案例证明To prove A, we have $B_1 \\lor \\dots \\lor B_n$ $B_i \\Rightarrow A \\ \\mbox{for each } i = 1 \\dots n$ $\\forall$ means “for all” $ \\exists$ Means “there exist(s)” Goldbach’s conjecture $\\forall n \\in 2 \\mathbb {N} ( n &gt; 2 \\Rightarrow \\exists p, q \\in \\mathbb {N} (p,q \\in PRIMES \\land n=p+1))$ ExerciseWhich of the following is a tautology? $\\forall x(\\exists y( P(x,y))) \\Rightarrow \\exists y(\\forall x (P(x,y)))\\color {Red} \\times$ $ \\exists y(\\forall x (P(x,y))) \\Rightarrow \\forall x(\\exists y( P(x,y))) \\color {Green} \\checkmark$ Proof of the Contrapositive 证明逆否命题We want to prove $ A \\Rightarrow B$ To prove it , we show $ \\lnot B \\Rightarrow \\lnot A$ and invoke the equivalence $(A \\Rightarrow B) \\equiv (\\lnot B \\Rightarrow \\lnot A)$ Example The square root of an irrational number is irrational: $\\forall x \\in \\mathbb {R}(x\\notin \\mathbb {Q} \\Rightarrow \\sqrt {x} \\notin \\mathbb {Q})$ To prove this, we can prove: $\\sqrt x \\in \\mathbb {Q} \\Rightarrow x \\ zai \\mathbb {Q}$ $\\sqrt x = \\frac {p}{q} \\ \\mbox {for some } p,q \\in \\mathbb {Z} \\\\\\Rightarrow x = \\frac {p^2}{q^2}$ Proof by Contradiction 反证法We want to prove $A$. To prove it, we assume $\\lnot A$ , and derive both $B$ and $\\lnot B$ for some proposition $B$. (Hard part: working out what $B$ should be.) Example $\\sqrt{2}$ is irrational There exist an infinite number of primes $\\sqrt{2}=\\frac{p}{q}$ $\\Rightarrow 2q^2 = p^2$ $\\Rightarrow p^2 \\mbox{ is even } \\Rightarrow p \\mbox{ is even } \\Rightarrow p=2\\cdot r$ $\\Rightarrow 2q^2 = 4 r^2$ $\\Rightarrow q^2 = 2 r^2$ $\\Rightarrow q^2 \\mbox{ is even } \\Rightarrow q \\mbox{ is even }$ but $p,q$ must relative prime, so there is a contradiction substitution 替换Substitution is the process of replacing every occurrence of some symbol by an expression. We can substitute logical expressions for logical variables. Substitution Rules(a) if $\\vDash \\phi(P)$ then $\\vDash \\phi ( \\alpha)$ (b) if $\\alpha \\equiv \\beta$ then $\\phi(\\alpha) \\equiv \\phi(\\beta)$ Boolean Functions 布尔函数A Boolean function of one variable is also called unary(一元的). A function of two variables is called binary(二元的). A function of n input variables is called n-ary(n元的). Boolean ArithmeticConsider truth values with operations $\\land \\lor \\lnot $ algebraic structure: $\\mathbb{B}={0,1}$ with ‘Boolean’ arithmetic $a\\cdot b, a+b,a^\\prime = 1-a$ $pq$ is for $p \\cdot q$ $\\bar{p}$ is more common than $p^\\prime$ $\\bar{(\\cdot )}$ obviates the need for some parentheses Applications IV: Digital Circuits 应用四:数字电路 Definition Boolean Algebra 布尔代数的定义commutative: $ x + y = y + x$ $ x \\cdot y = y \\cdot x$ associative: $(x + y) + z = x + (y + z)$ $(x \\cdot y) \\cdot z = x \\cdot ( y\\cdot z)$ distributive: $x + (y\\cdot z)=(x+y)\\cdot (x+z)$ $x \\cdot (y+x) = (x\\cdot y) + (x \\cdot z)$ identity: $x + 0 = x, \\ x \\cdot 1 = x$ complementation: $x + x^\\prime = 1, \\ x\\cdot x^\\prime =0$ 2-bit vectors $\\mathbb{B}^2$: 0 \\overset {def}{=}(0,0) \\\\ 1 \\overset {def}{=}(1,1) \\\\ \\mbox{join: } (a_1,a_2)+(b_1,b_2) \\mapsto (a_1 = b_1, a_2 + b_2) \\\\ \\mbox{join: } (a_1,a_2)\\cdot(b_1,b_2) \\mapsto (a_1 \\cdot b_1, a_2 \\cdot b_2) \\\\ \\mbox{complementation: } (a_1,a_2)^\\prime \\mapsto(a_1^\\prime,a_2^\\prime)$T={(0,0),(0,1),(1,0),(1,1)}$ Boolean Expressions PL BA(Boolean algebra) propositional atoms $p,q,\\dots$ $p,q,\\dots$ conjunction $p\\land q$ $p\\cdot q$ or $pq$ disjunction $p\\lor q$ $p + q$ negation $\\lnot p$ $p^\\prime$ Terminology and Rules 术语和规则 a literal is an expression $p$ or $p^\\prime$, where $p$ is a propositonal atom An expression is in CNF (conjunctive normal form,合取范式) is it has the form \\prod_{i} C_i where each clause $C_i$ is a disjunction of literals e.g. $p+q+r^\\prime$. An expression is in DNF (disjunctive normal form, 析取范式) if it has the form \\sum_{i}C_i where each clause $C_i$ is a conjunction of literals e.g. $pqr^\\prime$ CNF and DNF are named after their top level operators; no deeper nesting of $\\cdot$ or $+$ is permitted. any given variable appears only once in one clause x + x =x,\\ xx=x \\\\ xx^\\prime = 0,\\ x + x^\\prime = 1 \\\\ x \\cdot 0 = 0,\\ x \\cdot 1 = x,\\ x + 0 = x,\\ x +1 =1 DNF perferred, as well as few terms \\begin{array} xx + xy & = x \\quad \\mbox{(absorption)} \\\\ xy + xy^\\prime & = x \\quad \\mbox{(combining the opposites)} \\end{array} every Boolean expression $\\phi$ has an equivalent expression in CNF or DNF De morgan’s laws (x+y)^\\prime = x^\\prime \\cdot y^\\prime \\\\ (x \\cdot y )^\\prime = x^\\prime + y^\\prime \\\\ (x^\\prime)^\\prime = xCanonical Form DNF 规范形式DNF \\mathcal{l}=\\begin{cases} X_i \\quad if\\ \\pi(x_i)=1 \\\\ x_i^\\prime \\quad if \\ \\pi(x_i)=0 \\end{cases} \\\\ \\mbox{product}\\ t_\\pi = \\mathcal{l}_1\\cdot\\mathcal{l}_2\\cdot \\ \\dots \\ \\cdot \\mathcal{l}_nExample If $\\pi(x_1)=1 $ and $\\pi(x_2)=0$ , then $t_\\pi=x_1\\cdot x_2^\\prime$ The canonical DNF of $E$ is E^{dnf}=\\sum_{E(\\pi)=1}t_\\piExample if E is defined by x y E 0 0 1 0 1 0 1 0 1 1 1 1 Then $E^{dnf} = {x}’{y}’+x{y}’+xy$ it can be simplified to $x+{y}’$ Karnaugh Maps 卡诺图 The rectangles can go ‘around the corner’/the actual map should be seen as a torus. Rectangles must have sides of 1, 2 or 4 squares (three adjacent cells are useless). 本图由freakyuito整理 Boolean Algebras in Computer Science 计算机科学中的布尔代数 一些数据结构有类似自然法则的运算符，如$\\land \\lor \\lnot$ 只包含0和1的n元布尔运算规则：加（join）：$(1,0,0,1) + (1,1,0,0) = (1,1,0,1)$ 乘（meet）：$(1,0,0,1)\\cdot (1,1,0,0) = (1,0,0,0)$ 补集（complementation）：${(1,0,0,1)}’=(0,1,1,0)$ $Pow(S)$ ——$S$的子集加（join）：$A\\cup B$ 乘（meet）：$A \\cap B$ 补集（complement）：$A^C = S \\setminus A$ 对于S的布尔代数，$Pow(S)$，$s=\\{a,b,c\\}$，有： $0 \\overset{def}=\\empty$ $1 \\overset{def}=\\{a,b,c\\}$ 加（join）：$X,Y \\mapsto X \\cup Y $ 乘（meet）：$X,Y \\mapsto X \\cap Y$ 补（complementation）：$X \\mapsto \\{a,b,c\\} \\setminus X$ 更多计算机科学中布尔代数的例子对于任意集合$S$到$\\mathbb{B}$的函数，它们的集合记为$Map(S, \\mathbb{B})$ 如果$f,g: S \\rightarrow \\mathbb{B}$，那么： $(f+g):S \\rightarrow \\mathbb(B) $定义为$s \\mapsto f(s) + g(s)$ $(f\\cdot g):S\\rightarrow \\mathbb{B}$定义为$s \\mapsto f(s)\\cdot g(s)$ $f’:S\\rightarrow \\mathbb{B}$定义为$s\\mapsto {(f(s))}’$ 对于$|S|=n$，一共有$2^n$个 对于所有n个变量的布尔函数，如$(p_1,p_2,p_3)\\mapsto (p_1+p_2’)\\cdot (p_1+p_3)\\cdot p_2 + p_3’$ 它们一共有$2^{2^n}$个，它们的集合表示为$BOOL(n)$ 事实上，每个具有有限元素集T的布尔代数满足: $|T|=2^k$ 定义 考虑 布尔代数$B_1$在集合$S$上有不同的元素$0_S$和$1_S$ 布尔代数$B_2$在集合$T$上有不同的元素$0_T$和$1_T$ 它们是同构体（isomorphic），写作$B_1\\simeq B_2$，当且仅当存在一一对应关系时，$\\iota:S\\mapsto T$，这样 $\\iota(0_S)=0_T$ $\\iota(1_S)=1_T$ $\\iota(s_1+s_2)=\\iota(S_1)+\\iota(S_2)$ 对于所有的$s_1,s_2\\in S$ $\\iota(s_1 \\cdot s_2)=\\iota(S_1)\\cdot \\iota(S_2)$ 对于所有的$s_1,s_2\\in S$ $\\iota(s’)=\\iota(s)’$ 对于所有的$s\\in S$ 事实上，所有元素数相同的代数都是同构的，即“结构上相似”。因此，研究一个这样的代数就可以描述所有的性质。 布尔代数的笛卡尔积也是布尔代数。写作： \\mathbb{B}^k = \\mathbb{B} \\times \\dots \\mathbb{B}上面提到的代数都是这种形式： $n元\\simeq \\mathbb{B}^n$ $Pow(S)\\simeq \\mathbb{B}^{|S|}$ $Map(S,\\mathbb{B})\\simeq \\mathbb{B}^{|S|}$ $BOOL(n)\\simeq \\mathbb{B}^{2^n}$ 小结$\\equiv$等价 可满足的公式（satisfiable formulae），有效公式（valid formulae）、重复式（tautologies） 逻辑蕴涵$\\vDash$ 证明方法：反证法，证明逆否命题，按案例证明 布尔代数，CNF，DNF，规范形式，卡诺图（Karnaugh maps）","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"},{"title":"LaTeX 符号命令大全","slug":"LaTeX 符号命令大全","date":"2021-02-24T04:31:07.000Z","updated":"2021-03-04T07:56:24.242Z","comments":true,"path":"2021/02/24/latex-fu-hao-ming-ling-da-quan/","link":"","permalink":"http://szdf123.github.io/2021/02/24/latex-fu-hao-ming-ling-da-quan/","excerpt":"","text":"本文引用改编自： http://blog.sina.com.cn/s/blog_bad174440102z1t7.html https://www.cnblogs.com/yalphait/articles/8685586.html 函数、符号及特殊字符声调 语法 效果 语法 效果 语法 效果 \\bar{x} $\\bar{x}$ \\acute{\\eta} $\\acute{\\eta}$ \\check{\\alpha} $\\check{\\alpha}$ \\grave{\\eta} $\\grave{\\eta}$ \\breve{a} $\\breve{a}$ \\ddot{y} $\\ddot{y}$ \\dot{x} $\\dot{x}$ \\hat{\\alpha} $\\hat{\\alpha}$ \\tilde{\\iota} $\\tilde{\\iota}$ 函数 语法 效果 语法 效果 语法 效果 \\sin\\theta $\\sin\\theta$ \\cos\\theta $\\cos\\theta$ $\\tan\\theta$ $\\tan\\theta$ \\arcsin\\frac{L}{r} $\\arcsin\\frac{L}{r}$ \\arccos\\frac{T}{r} $\\arccos\\frac{T}{r}$ $\\arctan\\frac{L}{T}$ $\\arctan\\frac{L}{T}$ \\sinh g $\\sinh g$ \\cosh h $\\cosh h$ $\\tanh i$ \\tanh i \\operatorname{sh}j $\\operatorname{sh}j$ \\operatorname{argsh}k $\\operatorname{argsh}k$ \\operatorname{ch}h $\\operatorname{ch}h$ \\operatorname{argch}l $\\operatorname{argch}l$ \\operatorname{th}i $\\operatorname{th}i$ \\operatorname{argth}m $\\operatorname{argth}m$ k’(x)=\\lim_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Deltax} k’(x)=$m_{\\Delta x\\to 0}\\frac{k(x)-k(x-\\Delta x)}{\\Deltax}$ \\limsup S $\\limsup S$ \\liminf I $\\liminf I$ \\max H $\\max H$ \\min L $\\min L$ \\inf s $\\inf s$ \\sup t $\\sup t$ \\exp!t $\\exp!t$ \\ln X $\\ln X$ \\lg X $\\lg X$ \\log X $\\log X$ \\log_\\alpha X $\\log_\\alpha X$ \\ker x $\\ker x$ \\deg x $\\deg x$ \\gcd(T,U,V,W,X) $\\gcd(T,U,V,W,X)$ \\Pr x $\\Pr x$ \\det x $\\det x$ \\hom x $\\hom x$ \\arg x $\\arg x$ \\dim x $\\dim x$ \\lim_{t\\to n}T $\\lim_{t\\to n}T$ 同余 语法 效果 语法 效果 \\pmod{m} $\\pmod{m}$ a \\bmod b $a \\bmod b$ 微分 语法 效果 语法 效果 语法 效果 \\nabla $\\nabla$ \\partial x $\\partial x$ \\mathrm{d}x $\\mathrm{d}x$ \\dot x $\\dot x$ \\ddot y $\\ddot y$ 集合 语法 效果 语法 效果 语法 效果 语法 效果 语法 效果 \\forall $\\forall$ \\exists $\\exists$ \\empty $\\empty$ \\emptyset $\\emptyset$ \\varnothing $\\varnothing$ \\in $\\in$ \\ni $\\ni$ \\not\\in $\\not\\in$ \\notin $\\notin$ \\subset $\\subset$ \\subseteq $\\subseteq$ \\supset $\\supset$ \\supseteq $\\supseteq$ \\cap $\\cap$ \\bigcap $\\bigcap$ \\cup $\\cup$ \\bigcup $\\bigcup$ \\biguplus $\\biguplus$ \\sqsubset $\\sqsubset$ \\sqsubseteq $\\sqsubseteq$ \\sqsupset $\\sqsupset$ \\sqsupseteq $\\sqsupseteq$ \\sqcap $\\sqcap$ \\sqcup $\\sqcup$ \\bigsqcup $\\bigsqcup$ 逻辑 语法 效果 语法 效果 语法 效果 语法 效果 p $P$ \\land $\\land$ \\wedge $\\wedge$ \\bigwedge $\\bigwedge$ \\bar{q} \\to p $\\bar{q} \\to p$ \\lor $\\lor$ \\vee $\\vee$ \\bigvee $\\bigvee$ \\lnot $\\lnot$ \\neg q $\\neg q$ \\setminus $\\setminus$ \\smallsetminus $\\smallsetminus$ 根号 语法 效果 语法 效果 \\sqrt{3} $\\sqrt{3}$ \\sqrt[n]{3} $\\sqrt[n]{3}$ 关系符号 语法 效果 \\Delta ABC\\sim\\Delta XYZ $1 $ \\sqrt{3}\\approx1.732050808\\ldots $1$ \\simeq $\\simeq$ \\cong $\\cong$ \\dot= $\\dot=$ \\ggg $1$ \\gg $1$ &gt; $1$ \\ge $1$ \\geqq $1$ = $1$ \\leq $1$ \\leqq $1$ &lt; $1$ \\ll $1$ \\lll $1$ (x-y)^2\\equiv(-x+y)^2\\equiv x^2-2xy+y^2 $1$ \\begin{align}``\\because\\begin{cases}``\\acute{a}x^2+bx^2+c\\gtrless0\\gtrless\\grave{a}x^2+bx^2+c\\\\``\\acute{a}&gt;0&gt;\\grave{a}``\\end{cases}\\\\``\\therefore\\frac{-b\\pm\\sqrt{b^2-4\\acute{a}c}}{2\\acute{a}}{}_\\lessgtr^\\gtrlessx_\\lessgtr^\\gtrless\\frac{-b\\pm\\sqrt{b^2-4\\grave{a}c}}{2\\grave{a}}``\\end{align} $1$ x\\not\\equiv N $x\\not\\equiv N$ x\\ne A $x\\ne A$ x\\neq C $x\\neq C$ t\\propto v $t\\propto v$ \\pm $\\pm$ \\mp $\\mp$ 几何符号 特征 语法 效果 菱形 \\Diamond $\\Diamond$ 正方形 \\Box $\\Box$ 三角形 Delta \\Delta $\\Delta$ 三角形 图型 \\triangle $\\triangle$ 角名 \\angle\\Alpha\\Beta\\Gamma $\\angle\\Alpha\\Beta\\Gamma$ 角度 \\sin\\!\\frac{\\pi}{3}=\\sin60^\\operatorname{\\omicron}=\\frac{\\sqrt{3}}{2} $\\sin!\\frac{\\pi}{3}=\\sin60^\\operatorname{\\omicron}=\\frac{\\sqrt{3}}{2}$ 垂直 \\perp $\\perp$ 箭头符号 语法 效果 语法 效果 语法 效果 \\leftarrow $\\leftarrow$ \\gets $\\gets$ \\rightarrow $\\rightarrow$ \\to $\\to$ \\leftrightarrow $\\leftrightarrow$ \\longleftarrow $\\longleftarrow$ \\longrightarrow $\\longrightarrow$ \\mapsto $\\mapsto$ \\longmapsto $\\longmapsto$ \\hookrightarrow $\\hookrightarrow$ \\hookleftarrow $\\hookleftarrow$ \\nearrow $\\nearrow$ \\searrow $\\searrow$ \\swarrow $\\swarrow$ \\nwarrow $\\nwarrow$ \\uparrow $\\uparrow $ \\downarrow $\\downarrow$ \\updownarrow $\\updownarrow$ 语法 效果 语法 效果 语法 效果 语法 效果 \\rightharpoonup $\\rightharpoonup $ \\rightharpoondown $\\rightharpoondown$ \\leftharpoonup $\\leftharpoonup$ \\leftharpoondown $\\leftharpoondown$ \\upharpoonleft $\\upharpoonleft$ \\upharpoonright $\\upharpoonright$ \\downharpoonleft $\\downharpoonleft$ \\downharpoonright $\\downharpoonright$ 语法 效果 语法 效果 语法 效果 \\Leftarrow $\\Leftarrow$ \\Rightarrow $\\Rightarrow$ \\Leftrightarrow $\\Leftrightarrow$ \\Longleftarrow $\\Longleftarrow$ \\Longrightarrow $\\Longrightarrow$ \\Longleftrightarrow (or \\iff) $\\Longleftrightarrow (or \\iff)$ \\Uparrow $\\Uparrow$ \\Downarrow $\\Downarrow$ \\Updownarrow $\\Updownarrow$","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"}],"author":"Benjamin"},{"title":"博客配置及图片引用方法","slug":"博客配置及图片引用方法","date":"2021-02-24T04:31:07.000Z","updated":"2021-03-04T07:54:53.687Z","comments":true,"path":"2021/02/24/bo-ke-pei-zhi-ji-tu-pian-yin-yong-fang-fa/","link":"","permalink":"http://szdf123.github.io/2021/02/24/bo-ke-pei-zhi-ji-tu-pian-yin-yong-fang-fa/","excerpt":"","text":"引用content [author[source]] [link] [source_link_title] 普通的 blockquoteLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块{% codeblock [title] [lang:language] [url] [link text] [additional options] %} code snippet {% endcodeblock %} 普通的代码块alert(\"Hello World!\"); 指定语言print(\"This is my python code!\") 附加说明Array.maparray.map(callback[, thisArg]) 附加说明和网址_.compactUnderscore.js_.compact([0, 1, false, 2, '', 3]); =&gt; [1, 2, 3] println(\"This is my Java code!\"); 网址matery-github","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"Java","slug":"Java","permalink":"http://szdf123.github.io/tags/Java/"},{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"已完成","slug":"已完成","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E6%88%90/"}],"author":"Benjamin"},{"title":"COMP9020课程笔记（Week1）","slug":"COMP9020课程笔记（Week1）","date":"2021-02-20T07:19:32.000Z","updated":"2021-03-04T09:24:30.875Z","comments":true,"path":"2021/02/20/comp9020-ke-cheng-bi-ji-week1/","link":"","permalink":"http://szdf123.github.io/2021/02/20/comp9020-ke-cheng-bi-ji-week1/","excerpt":"","text":"Week 1一般地，以下表达式成立： $|B| &lt; | Pow(B)| \\\\ A \\cap B \\in Pow(B)$ 注意，一般以下表达式不成立： $A \\subseteq Pow(A)$ Week 1 小结数字符号 notation for numbers$\\lfloor m \\rfloor , \\lceil m \\rceil , m | n , n\\mod m, |a|, [a, b], (a,b),gcd,lcn$ 集合操作符 Sets and set operations $|A|,\\in , \\cup , \\cap , \\setminus , \\oplus , A^c , Pow(A) , \\subseteq , \\subset , \\times$ 正式语言:字母和文字 Formal languages: alphabets and words$\\lambda , \\sum ^*, \\sum ^+, \\sum ^1, \\sum ^2, \\dots ,\\sum ^{\\leq k}$ 命题逻辑的语言 Language of propositional logic$\\land , \\lor , \\lnot , \\Rightarrow , \\Leftrightarrow , \\top , \\bot , \\mbox {truth tables}$ 一般情况下，$(A\\backslash B\\backslash C)\\neq A\\backslash(B\\backslash C)$，当 $A \\cap C = \\emptyset$时等式成立","categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"}],"author":"Benjamin"}],"categories":[{"name":"UNSW","slug":"UNSW","permalink":"http://szdf123.github.io/categories/UNSW/"},{"name":"技术学习","slug":"技术学习","permalink":"http://szdf123.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"},{"name":"实用工具","slug":"实用工具","permalink":"http://szdf123.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"COMP9020","slug":"COMP9020","permalink":"http://szdf123.github.io/tags/COMP9020/"},{"name":"笔记","slug":"笔记","permalink":"http://szdf123.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"课程","slug":"课程","permalink":"http://szdf123.github.io/tags/%E8%AF%BE%E7%A8%8B/"},{"name":"离散数学","slug":"离散数学","permalink":"http://szdf123.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"},{"name":"编辑中","slug":"编辑中","permalink":"http://szdf123.github.io/tags/%E7%BC%96%E8%BE%91%E4%B8%AD/"},{"name":"数据库","slug":"数据库","permalink":"http://szdf123.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"实践操作","slug":"实践操作","permalink":"http://szdf123.github.io/tags/%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C/"},{"name":"已完稿","slug":"已完稿","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E7%A8%BF/"},{"name":"Python","slug":"Python","permalink":"http://szdf123.github.io/tags/Python/"},{"name":"游戏","slug":"游戏","permalink":"http://szdf123.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"手册","slug":"手册","permalink":"http://szdf123.github.io/tags/%E6%89%8B%E5%86%8C/"},{"name":"英语","slug":"英语","permalink":"http://szdf123.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"持续更新","slug":"持续更新","permalink":"http://szdf123.github.io/tags/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"name":"COMP9311","slug":"COMP9311","permalink":"http://szdf123.github.io/tags/COMP9311/"},{"name":"SQL","slug":"SQL","permalink":"http://szdf123.github.io/tags/SQL/"},{"name":"教程","slug":"教程","permalink":"http://szdf123.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"工具","slug":"工具","permalink":"http://szdf123.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Java","slug":"Java","permalink":"http://szdf123.github.io/tags/Java/"},{"name":"已完成","slug":"已完成","permalink":"http://szdf123.github.io/tags/%E5%B7%B2%E5%AE%8C%E6%88%90/"}]}